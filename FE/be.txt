Directory structure:
└── back-end/
    ├── Procfile
    ├── index.js
    ├── package-lock.json
    ├── package.json
    ├── vercel.json
    ├── .gitignore
    ├── controllers/
    │   ├── AdminController.js
    │   ├── AuthController.js
    │   ├── CommentController.js
    │   ├── NovelController.js
    │   ├── PaymentController.js
    │   ├── RatingController.js
    │   ├── SavedController.js
    │   ├── StatisticController.js
    │   ├── TrafficController.js
    │   ├── UserController.js
    │   └── middlewareController.js
    ├── models/
    │   ├── Bill.js
    │   ├── Chapter.js
    │   ├── Chapterunlocked.js
    │   ├── Comment.js
    │   ├── Novel.js
    │   ├── Rating.js
    │   ├── Reading.js
    │   ├── Role.js
    │   ├── Saved.js
    │   ├── Traffic.js
    │   └── User.js
    ├── routers/
    │   ├── AdminRoute.js
    │   ├── AuthRoute.js
    │   ├── CommentRoute.js
    │   ├── NovelRoute.js
    │   ├── PaymentRoute.js
    │   ├── RatingRoute.js
    │   ├── SavedRoute.js
    │   ├── StatisticRoute.js
    │   ├── TrafficRoute.js
    │   ├── UserRoute.js
    │   └── index.js
    └── services/
        ├── EmailService.js
        ├── ResponseJSON.js
        └── cloneDB.js

================================================
File: back-end/Procfile
================================================
web: npm start

================================================
File: back-end/index.js
================================================
import express from 'express';
import bodyParser from 'body-parser';
import cors from 'cors';
import mongoose from 'mongoose';
import dotenv from 'dotenv';
import cookieParser from 'cookie-parser'
import {UserRoute,AuthRoute, NovelRoute, CommentRoute, AdminRoute,SavedRoute,PaymentRoute, StatisticRoute, RatingRoute, TrafficRoute} from './routers/index.js'
import { Novel } from './models/Novel.js';
import { Chapter } from './models/Chapter.js';

dotenv.config()


const app=express();
const PORT = process.env.PORT ||5000;
const URI=process.env.MONGODB_URL;

app.use(bodyParser.json());
app.use(bodyParser.urlencoded({extended:true,limit:'50mb'}))
app.use(cors({ credentials: true, origin:true}));
app.use(cookieParser());

mongoose.connect(URI)
    .then(()=>{
        console.log('Connected')
        
    }).catch(err=> {
        console.log('err',err)
    })

    

app.listen(PORT, () => {
            console.log(`Server is running on port ${PORT} `)
        })
app.get('/',(req,res)=>{
        res.send('SUCCESS');
    });
app.use('/api',AuthRoute)
app.use('/api/user',UserRoute)
app.use('/api/novels',NovelRoute)
app.use('/api/comment',CommentRoute)
app.use('/api/admin',AdminRoute)
app.use('/api/saved',SavedRoute)
app.use('/api/payment',PaymentRoute)
app.use('/api/statistic',StatisticRoute)
app.use('/api/rating',RatingRoute)
app.use('/api/traffic',TrafficRoute)


================================================
File: back-end/package-lock.json
================================================
{
    "name": "back-end",
    "version": "1.0.0",
    "lockfileVersion": 2,
    "requires": true,
    "packages": {
        "": {
            "name": "back-end",
            "version": "1.0.0",
            "license": "ISC",
            "dependencies": {
                "bcrypt": "^5.0.1",
                "body-parser": "^1.19.2",
                "cookie-parser": "^1.4.6",
                "cors": "^2.8.5",
                "date-fns": "^2.29.3",
                "dotenv": "^16.0.0",
                "express": "^4.17.3",
                "generate-password": "^1.7.0",
                "googleapis": "^108.0.0",
                "jsonwebtoken": "^8.5.1",
                "jwt-decode": "^3.1.2",
                "moment": "^2.29.4",
                "mongoose": "^6.2.4",
                "node-fetch": "^3.2.2",
                "nodemailer": "^6.7.2",
                "nodemon": "^2.0.15",
                "qs": "^6.11.0",
                "redux-persist": "^6.0.0"
            }
        },
        "node_modules/@babel/runtime": {
            "version": "7.17.2",
            "resolved": "https://registry.npmjs.org/@babel/runtime/-/runtime-7.17.2.tgz",
            "integrity": "sha512-hzeyJyMA1YGdJTuWU0e/j4wKXrU4OMFvY2MSlaI9B7VQb0r5cxTE3EAIS2Q7Tn2RIcDkRvTA/v2JsAEhxe99uw==",
            "peer": true,
            "dependencies": {
                "regenerator-runtime": "^0.13.4"
            },
            "engines": {
                "node": ">=6.9.0"
            }
        },
        "node_modules/@mapbox/node-pre-gyp": {
            "version": "1.0.8",
            "resolved": "https://registry.npmjs.org/@mapbox/node-pre-gyp/-/node-pre-gyp-1.0.8.tgz",
            "integrity": "sha512-CMGKi28CF+qlbXh26hDe6NxCd7amqeAzEqnS6IHeO6LoaKyM/n+Xw3HT1COdq8cuioOdlKdqn/hCmqPUOMOywg==",
            "dependencies": {
                "detect-libc": "^1.0.3",
                "https-proxy-agent": "^5.0.0",
                "make-dir": "^3.1.0",
                "node-fetch": "^2.6.5",
                "nopt": "^5.0.0",
                "npmlog": "^5.0.1",
                "rimraf": "^3.0.2",
                "semver": "^7.3.5",
                "tar": "^6.1.11"
            },
            "bin": {
                "node-pre-gyp": "bin/node-pre-gyp"
            }
        },
        "node_modules/@mapbox/node-pre-gyp/node_modules/node-fetch": {
            "version": "2.6.7",
            "resolved": "https://registry.npmjs.org/node-fetch/-/node-fetch-2.6.7.tgz",
            "integrity": "sha512-ZjMPFEfVx5j+y2yF35Kzx5sF7kDzxuDj6ziH4FFbOp87zKDZNx8yExJIb05OGF4Nlt9IHFIMBkRl41VdvcNdbQ==",
            "dependencies": {
                "whatwg-url": "^5.0.0"
            },
            "engines": {
                "node": "4.x || >=6.0.0"
            },
            "peerDependencies": {
                "encoding": "^0.1.0"
            },
            "peerDependenciesMeta": {
                "encoding": {
                    "optional": true
                }
            }
        },
        "node_modules/@mapbox/node-pre-gyp/node_modules/nopt": {
            "version": "5.0.0",
            "resolved": "https://registry.npmjs.org/nopt/-/nopt-5.0.0.tgz",
            "integrity": "sha512-Tbj67rffqceeLpcRXrT7vKAN8CwfPeIBgM7E6iBkmKLV7bEMwpGgYLGv0jACUsECaa/vuxP0IjEont6umdMgtQ==",
            "dependencies": {
                "abbrev": "1"
            },
            "bin": {
                "nopt": "bin/nopt.js"
            },
            "engines": {
                "node": ">=6"
            }
        },
        "node_modules/@mapbox/node-pre-gyp/node_modules/semver": {
            "version": "7.3.5",
            "resolved": "https://registry.npmjs.org/semver/-/semver-7.3.5.tgz",
            "integrity": "sha512-PoeGJYh8HK4BTO/a9Tf6ZG3veo/A7ZVsYrSA6J8ny9nb3B1VrpkuN+z9OE5wfE5p6H4LchYZsegiQgbJD94ZFQ==",
            "dependencies": {
                "lru-cache": "^6.0.0"
            },
            "bin": {
                "semver": "bin/semver.js"
            },
            "engines": {
                "node": ">=10"
            }
        },
        "node_modules/@mapbox/node-pre-gyp/node_modules/tr46": {
            "version": "0.0.3",
            "resolved": "https://registry.npmjs.org/tr46/-/tr46-0.0.3.tgz",
            "integrity": "sha1-gYT9NH2snNwYWZLzpmIuFLnZq2o="
        },
        "node_modules/@mapbox/node-pre-gyp/node_modules/webidl-conversions": {
            "version": "3.0.1",
            "resolved": "https://registry.npmjs.org/webidl-conversions/-/webidl-conversions-3.0.1.tgz",
            "integrity": "sha1-JFNCdeKnvGvnvIZhHMFq4KVlSHE="
        },
        "node_modules/@mapbox/node-pre-gyp/node_modules/whatwg-url": {
            "version": "5.0.0",
            "resolved": "https://registry.npmjs.org/whatwg-url/-/whatwg-url-5.0.0.tgz",
            "integrity": "sha1-lmRU6HZUYuN2RNNib2dCzotwll0=",
            "dependencies": {
                "tr46": "~0.0.3",
                "webidl-conversions": "^3.0.0"
            }
        },
        "node_modules/@types/node": {
            "version": "18.7.18",
            "resolved": "https://registry.npmjs.org/@types/node/-/node-18.7.18.tgz",
            "integrity": "sha512-m+6nTEOadJZuTPkKR/SYK3A2d7FZrgElol9UP1Kae90VVU4a6mxnPuLiIW1m4Cq4gZ/nWb9GrdVXJCoCazDAbg=="
        },
        "node_modules/@types/webidl-conversions": {
            "version": "7.0.0",
            "resolved": "https://registry.npmjs.org/@types/webidl-conversions/-/webidl-conversions-7.0.0.tgz",
            "integrity": "sha512-xTE1E+YF4aWPJJeUzaZI5DRntlkY3+BCVJi0axFptnjGmAoWxkyREIh/XMrfxVLejwQxMCfDXdICo0VLxThrog=="
        },
        "node_modules/@types/whatwg-url": {
            "version": "8.2.2",
            "resolved": "https://registry.npmjs.org/@types/whatwg-url/-/whatwg-url-8.2.2.tgz",
            "integrity": "sha512-FtQu10RWgn3D9U4aazdwIE2yzphmTJREDqNdODHrbrZmmMqI0vMheC/6NE/J1Yveaj8H+ela+YwWTjq5PGmuhA==",
            "dependencies": {
                "@types/node": "*",
                "@types/webidl-conversions": "*"
            }
        },
        "node_modules/abbrev": {
            "version": "1.1.1",
            "resolved": "https://registry.npmjs.org/abbrev/-/abbrev-1.1.1.tgz",
            "integrity": "sha512-nne9/IiQ/hzIhY6pdDnbBtz7DjPTKrY00P/zvPSm5pOFkl6xuGrGnXn/VtTNNfNtAfZ9/1RtehkszU9qcTii0Q=="
        },
        "node_modules/accepts": {
            "version": "1.3.8",
            "resolved": "https://registry.npmjs.org/accepts/-/accepts-1.3.8.tgz",
            "integrity": "sha512-PYAthTa2m2VKxuvSD3DPC/Gy+U+sOA1LAuT8mkmRuvw+NACSaeXEQ+NHcVF7rONl6qcaxV3Uuemwawk+7+SJLw==",
            "dependencies": {
                "mime-types": "~2.1.34",
                "negotiator": "0.6.3"
            },
            "engines": {
                "node": ">= 0.6"
            }
        },
        "node_modules/agent-base": {
            "version": "6.0.2",
            "resolved": "https://registry.npmjs.org/agent-base/-/agent-base-6.0.2.tgz",
            "integrity": "sha512-RZNwNclF7+MS/8bDg70amg32dyeZGZxiDuQmZxKLAlQjr3jGyLx+4Kkk58UO7D2QdgFIQCovuSuZESne6RG6XQ==",
            "dependencies": {
                "debug": "4"
            },
            "engines": {
                "node": ">= 6.0.0"
            }
        },
        "node_modules/agent-base/node_modules/debug": {
            "version": "4.3.3",
            "resolved": "https://registry.npmjs.org/debug/-/debug-4.3.3.tgz",
            "integrity": "sha512-/zxw5+vh1Tfv+4Qn7a5nsbcJKPaSvCDhojn6FEl9vupwK2VCSDtEiEtqr8DFtzYFOdz63LBkxec7DYuc2jon6Q==",
            "dependencies": {
                "ms": "2.1.2"
            },
            "engines": {
                "node": ">=6.0"
            },
            "peerDependenciesMeta": {
                "supports-color": {
                    "optional": true
                }
            }
        },
        "node_modules/agent-base/node_modules/ms": {
            "version": "2.1.2",
            "resolved": "https://registry.npmjs.org/ms/-/ms-2.1.2.tgz",
            "integrity": "sha512-sGkPx+VjMtmA6MX27oA4FBFELFCZZ4S4XqeGOXCv68tT+jb3vk/RyaKWP0PTKyWtmLSM0b+adUTEvbs1PEaH2w=="
        },
        "node_modules/ansi-regex": {
            "version": "5.0.1",
            "resolved": "https://registry.npmjs.org/ansi-regex/-/ansi-regex-5.0.1.tgz",
            "integrity": "sha512-quJQXlTSUGL2LH9SUXo8VwsY4soanhgo6LNSm84E1LBcE8s3O0wpdiRzyR9z/ZZJMlMWv37qOOb9pdJlMUEKFQ==",
            "engines": {
                "node": ">=8"
            }
        },
        "node_modules/anymatch": {
            "version": "3.1.2",
            "resolved": "https://registry.npmjs.org/anymatch/-/anymatch-3.1.2.tgz",
            "integrity": "sha512-P43ePfOAIupkguHUycrc4qJ9kz8ZiuOUijaETwX7THt0Y/GNK7v0aa8rY816xWjZ7rJdA5XdMcpVFTKMq+RvWg==",
            "dependencies": {
                "normalize-path": "^3.0.0",
                "picomatch": "^2.0.4"
            },
            "engines": {
                "node": ">= 8"
            }
        },
        "node_modules/aproba": {
            "version": "2.0.0",
            "resolved": "https://registry.npmjs.org/aproba/-/aproba-2.0.0.tgz",
            "integrity": "sha512-lYe4Gx7QT+MKGbDsA+Z+he/Wtef0BiwDOlK/XkBrdfsh9J/jPPXbX0tE9x9cl27Tmu5gg3QUbUrQYa/y+KOHPQ=="
        },
        "node_modules/are-we-there-yet": {
            "version": "2.0.0",
            "resolved": "https://registry.npmjs.org/are-we-there-yet/-/are-we-there-yet-2.0.0.tgz",
            "integrity": "sha512-Ci/qENmwHnsYo9xKIcUJN5LeDKdJ6R1Z1j9V/J5wyq8nh/mYPEpIKJbBZXtZjG04HiK7zV/p6Vs9952MrMeUIw==",
            "dependencies": {
                "delegates": "^1.0.0",
                "readable-stream": "^3.6.0"
            },
            "engines": {
                "node": ">=10"
            }
        },
        "node_modules/array-flatten": {
            "version": "1.1.1",
            "resolved": "https://registry.npmjs.org/array-flatten/-/array-flatten-1.1.1.tgz",
            "integrity": "sha1-ml9pkFGx5wczKPKgCJaLZOopVdI="
        },
        "node_modules/arrify": {
            "version": "2.0.1",
            "resolved": "https://registry.npmjs.org/arrify/-/arrify-2.0.1.tgz",
            "integrity": "sha512-3duEwti880xqi4eAMN8AyR4a0ByT90zoYdLlevfrvU43vb0YZwZVfxOgxWrLXXXpyugL0hNZc9G6BiB5B3nUug==",
            "engines": {
                "node": ">=8"
            }
        },
        "node_modules/balanced-match": {
            "version": "1.0.2",
            "resolved": "https://registry.npmjs.org/balanced-match/-/balanced-match-1.0.2.tgz",
            "integrity": "sha512-3oSeUO0TMV67hN1AmbXsK4yaqU7tjiHlbxRDZOpH0KW9+CeX4bRAaX0Anxt0tx2MrpRpWwQaPwIlISEJhYU5Pw=="
        },
        "node_modules/base64-js": {
            "version": "1.5.1",
            "resolved": "https://registry.npmjs.org/base64-js/-/base64-js-1.5.1.tgz",
            "integrity": "sha512-AKpaYlHn8t4SVbOHCy+b5+KKgvR4vrsD8vbvrbiQJps7fKDTkjkDry6ji0rUJjC0kzbNePLwzxq8iypo41qeWA==",
            "funding": [
                {
                    "type": "github",
                    "url": "https://github.com/sponsors/feross"
                },
                {
                    "type": "patreon",
                    "url": "https://www.patreon.com/feross"
                },
                {
                    "type": "consulting",
                    "url": "https://feross.org/support"
                }
            ]
        },
        "node_modules/bcrypt": {
            "version": "5.0.1",
            "resolved": "https://registry.npmjs.org/bcrypt/-/bcrypt-5.0.1.tgz",
            "integrity": "sha512-9BTgmrhZM2t1bNuDtrtIMVSmmxZBrJ71n8Wg+YgdjHuIWYF7SjjmCPZFB+/5i/o/PIeRpwVJR3P+NrpIItUjqw==",
            "hasInstallScript": true,
            "dependencies": {
                "@mapbox/node-pre-gyp": "^1.0.0",
                "node-addon-api": "^3.1.0"
            },
            "engines": {
                "node": ">= 10.0.0"
            }
        },
        "node_modules/bignumber.js": {
            "version": "9.1.0",
            "resolved": "https://registry.npmjs.org/bignumber.js/-/bignumber.js-9.1.0.tgz",
            "integrity": "sha512-4LwHK4nfDOraBCtst+wOWIHbu1vhvAPJK8g8nROd4iuc3PSEjWif/qwbkh8jwCJz6yDBvtU4KPynETgrfh7y3A==",
            "engines": {
                "node": "*"
            }
        },
        "node_modules/binary-extensions": {
            "version": "2.2.0",
            "resolved": "https://registry.npmjs.org/binary-extensions/-/binary-extensions-2.2.0.tgz",
            "integrity": "sha512-jDctJ/IVQbZoJykoeHbhXpOlNBqGNcwXJKJog42E5HDPUwQTSdjCHdihjj0DlnheQ7blbT6dHOafNAiS8ooQKA==",
            "engines": {
                "node": ">=8"
            }
        },
        "node_modules/body-parser": {
            "version": "1.19.2",
            "resolved": "https://registry.npmjs.org/body-parser/-/body-parser-1.19.2.tgz",
            "integrity": "sha512-SAAwOxgoCKMGs9uUAUFHygfLAyaniaoun6I8mFY9pRAJL9+Kec34aU+oIjDhTycub1jozEfEwx1W1IuOYxVSFw==",
            "dependencies": {
                "bytes": "3.1.2",
                "content-type": "~1.0.4",
                "debug": "2.6.9",
                "depd": "~1.1.2",
                "http-errors": "1.8.1",
                "iconv-lite": "0.4.24",
                "on-finished": "~2.3.0",
                "qs": "6.9.7",
                "raw-body": "2.4.3",
                "type-is": "~1.6.18"
            },
            "engines": {
                "node": ">= 0.8"
            }
        },
        "node_modules/body-parser/node_modules/qs": {
            "version": "6.9.7",
            "resolved": "https://registry.npmjs.org/qs/-/qs-6.9.7.tgz",
            "integrity": "sha512-IhMFgUmuNpyRfxA90umL7ByLlgRXu6tIfKPpF5TmcfRLlLCckfP/g3IQmju6jjpu+Hh8rA+2p6A27ZSPOOHdKw==",
            "engines": {
                "node": ">=0.6"
            },
            "funding": {
                "url": "https://github.com/sponsors/ljharb"
            }
        },
        "node_modules/brace-expansion": {
            "version": "1.1.11",
            "resolved": "https://registry.npmjs.org/brace-expansion/-/brace-expansion-1.1.11.tgz",
            "integrity": "sha512-iCuPHDFgrHX7H2vEI/5xpz07zSHB00TpugqhmYtVmMO6518mCuRMoOYFldEBl0g187ufozdaHgWKcYFb61qGiA==",
            "dependencies": {
                "balanced-match": "^1.0.0",
                "concat-map": "0.0.1"
            }
        },
        "node_modules/braces": {
            "version": "3.0.2",
            "resolved": "https://registry.npmjs.org/braces/-/braces-3.0.2.tgz",
            "integrity": "sha512-b8um+L1RzM3WDSzvhm6gIz1yfTbBt6YTlcEKAvsmqCZZFw46z626lVj9j1yEPW33H5H+lBQpZMP1k8l+78Ha0A==",
            "dependencies": {
                "fill-range": "^7.0.1"
            },
            "engines": {
                "node": ">=8"
            }
        },
        "node_modules/bson": {
            "version": "4.7.0",
            "resolved": "https://registry.npmjs.org/bson/-/bson-4.7.0.tgz",
            "integrity": "sha512-VrlEE4vuiO1WTpfof4VmaVolCVYkYTgB9iWgYNOrVlnifpME/06fhFRmONgBhClD5pFC1t9ZWqFUQEQAzY43bA==",
            "dependencies": {
                "buffer": "^5.6.0"
            },
            "engines": {
                "node": ">=6.9.0"
            }
        },
        "node_modules/buffer": {
            "version": "5.7.1",
            "resolved": "https://registry.npmjs.org/buffer/-/buffer-5.7.1.tgz",
            "integrity": "sha512-EHcyIPBQ4BSGlvjB16k5KgAJ27CIsHY/2JBmCRReo48y9rQ3MaUzWX3KVlBa4U7MyX02HdVj0K7C3WaB3ju7FQ==",
            "funding": [
                {
                    "type": "github",
                    "url": "https://github.com/sponsors/feross"
                },
                {
                    "type": "patreon",
                    "url": "https://www.patreon.com/feross"
                },
                {
                    "type": "consulting",
                    "url": "https://feross.org/support"
                }
            ],
            "dependencies": {
                "base64-js": "^1.3.1",
                "ieee754": "^1.1.13"
            }
        },
        "node_modules/buffer-equal-constant-time": {
            "version": "1.0.1",
            "resolved": "https://registry.npmjs.org/buffer-equal-constant-time/-/buffer-equal-constant-time-1.0.1.tgz",
            "integrity": "sha1-+OcRMvf/5uAaXJaXpMbz5I1cyBk="
        },
        "node_modules/bytes": {
            "version": "3.1.2",
            "resolved": "https://registry.npmjs.org/bytes/-/bytes-3.1.2.tgz",
            "integrity": "sha512-/Nf7TyzTx6S3yRJObOAV7956r8cr2+Oj8AC5dt8wSP3BQAoeX58NoHyCU8P8zGkNXStjTSi6fzO6F0pBdcYbEg==",
            "engines": {
                "node": ">= 0.8"
            }
        },
        "node_modules/call-bind": {
            "version": "1.0.2",
            "resolved": "https://registry.npmjs.org/call-bind/-/call-bind-1.0.2.tgz",
            "integrity": "sha512-7O+FbCihrB5WGbFYesctwmTKae6rOiIzmz1icreWJ+0aA7LJfuqhEso2T9ncpcFtzMQtzXf2QGGueWJGTYsqrA==",
            "dependencies": {
                "function-bind": "^1.1.1",
                "get-intrinsic": "^1.0.2"
            },
            "funding": {
                "url": "https://github.com/sponsors/ljharb"
            }
        },
        "node_modules/chokidar": {
            "version": "3.5.3",
            "resolved": "https://registry.npmjs.org/chokidar/-/chokidar-3.5.3.tgz",
            "integrity": "sha512-Dr3sfKRP6oTcjf2JmUmFJfeVMvXBdegxB0iVQ5eb2V10uFJUCAS8OByZdVAyVb8xXNz3GjjTgj9kLWsZTqE6kw==",
            "funding": [
                {
                    "type": "individual",
                    "url": "https://paulmillr.com/funding/"
                }
            ],
            "dependencies": {
                "anymatch": "~3.1.2",
                "braces": "~3.0.2",
                "glob-parent": "~5.1.2",
                "is-binary-path": "~2.1.0",
                "is-glob": "~4.0.1",
                "normalize-path": "~3.0.0",
                "readdirp": "~3.6.0"
            },
            "engines": {
                "node": ">= 8.10.0"
            },
            "optionalDependencies": {
                "fsevents": "~2.3.2"
            }
        },
        "node_modules/chownr": {
            "version": "2.0.0",
            "resolved": "https://registry.npmjs.org/chownr/-/chownr-2.0.0.tgz",
            "integrity": "sha512-bIomtDF5KGpdogkLd9VspvFzk9KfpyyGlS8YFVZl7TGPBHL5snIOnxeshwVgPteQ9b4Eydl+pVbIyE1DcvCWgQ==",
            "engines": {
                "node": ">=10"
            }
        },
        "node_modules/color-support": {
            "version": "1.1.3",
            "resolved": "https://registry.npmjs.org/color-support/-/color-support-1.1.3.tgz",
            "integrity": "sha512-qiBjkpbMLO/HL68y+lh4q0/O1MZFj2RX6X/KmMa3+gJD3z+WwI1ZzDHysvqHGS3mP6mznPckpXmw1nI9cJjyRg==",
            "bin": {
                "color-support": "bin.js"
            }
        },
        "node_modules/concat-map": {
            "version": "0.0.1",
            "resolved": "https://registry.npmjs.org/concat-map/-/concat-map-0.0.1.tgz",
            "integrity": "sha1-2Klr13/Wjfd5OnMDajug1UBdR3s="
        },
        "node_modules/console-control-strings": {
            "version": "1.1.0",
            "resolved": "https://registry.npmjs.org/console-control-strings/-/console-control-strings-1.1.0.tgz",
            "integrity": "sha1-PXz0Rk22RG6mRL9LOVB/mFEAjo4="
        },
        "node_modules/content-disposition": {
            "version": "0.5.4",
            "resolved": "https://registry.npmjs.org/content-disposition/-/content-disposition-0.5.4.tgz",
            "integrity": "sha512-FveZTNuGw04cxlAiWbzi6zTAL/lhehaWbTtgluJh4/E95DqMwTmha3KZN1aAWA8cFIhHzMZUvLevkw5Rqk+tSQ==",
            "dependencies": {
                "safe-buffer": "5.2.1"
            },
            "engines": {
                "node": ">= 0.6"
            }
        },
        "node_modules/content-type": {
            "version": "1.0.4",
            "resolved": "https://registry.npmjs.org/content-type/-/content-type-1.0.4.tgz",
            "integrity": "sha512-hIP3EEPs8tB9AT1L+NUqtwOAps4mk2Zob89MWXMHjHWg9milF/j4osnnQLXBCBFBk/tvIG/tUc9mOUJiPBhPXA==",
            "engines": {
                "node": ">= 0.6"
            }
        },
        "node_modules/cookie": {
            "version": "0.4.2",
            "resolved": "https://registry.npmjs.org/cookie/-/cookie-0.4.2.tgz",
            "integrity": "sha512-aSWTXFzaKWkvHO1Ny/s+ePFpvKsPnjc551iI41v3ny/ow6tBG5Vd+FuqGNhh1LxOmVzOlGUriIlOaokOvhaStA==",
            "engines": {
                "node": ">= 0.6"
            }
        },
        "node_modules/cookie-parser": {
            "version": "1.4.6",
            "resolved": "https://registry.npmjs.org/cookie-parser/-/cookie-parser-1.4.6.tgz",
            "integrity": "sha512-z3IzaNjdwUC2olLIB5/ITd0/setiaFMLYiZJle7xg5Fe9KWAceil7xszYfHHBtDFYLSgJduS2Ty0P1uJdPDJeA==",
            "dependencies": {
                "cookie": "0.4.1",
                "cookie-signature": "1.0.6"
            },
            "engines": {
                "node": ">= 0.8.0"
            }
        },
        "node_modules/cookie-parser/node_modules/cookie": {
            "version": "0.4.1",
            "resolved": "https://registry.npmjs.org/cookie/-/cookie-0.4.1.tgz",
            "integrity": "sha512-ZwrFkGJxUR3EIoXtO+yVE69Eb7KlixbaeAWfBQB9vVsNn/o+Yw69gBWSSDK825hQNdN+wF8zELf3dFNl/kxkUA==",
            "engines": {
                "node": ">= 0.6"
            }
        },
        "node_modules/cookie-signature": {
            "version": "1.0.6",
            "resolved": "https://registry.npmjs.org/cookie-signature/-/cookie-signature-1.0.6.tgz",
            "integrity": "sha1-4wOogrNCzD7oylE6eZmXNNqzriw="
        },
        "node_modules/cors": {
            "version": "2.8.5",
            "resolved": "https://registry.npmjs.org/cors/-/cors-2.8.5.tgz",
            "integrity": "sha512-KIHbLJqu73RGr/hnbrO9uBeixNGuvSQjul/jdFvS/KFSIH1hWVd1ng7zOHx+YrEfInLG7q4n6GHQ9cDtxv/P6g==",
            "dependencies": {
                "object-assign": "^4",
                "vary": "^1"
            },
            "engines": {
                "node": ">= 0.10"
            }
        },
        "node_modules/data-uri-to-buffer": {
            "version": "4.0.0",
            "resolved": "https://registry.npmjs.org/data-uri-to-buffer/-/data-uri-to-buffer-4.0.0.tgz",
            "integrity": "sha512-Vr3mLBA8qWmcuschSLAOogKgQ/Jwxulv3RNE4FXnYWRGujzrRWQI4m12fQqRkwX06C0KanhLr4hK+GydchZsaA==",
            "engines": {
                "node": ">= 12"
            }
        },
        "node_modules/date-fns": {
            "version": "2.29.3",
            "resolved": "https://registry.npmjs.org/date-fns/-/date-fns-2.29.3.tgz",
            "integrity": "sha512-dDCnyH2WnnKusqvZZ6+jA1O51Ibt8ZMRNkDZdyAyK4YfbDwa/cEmuztzG5pk6hqlp9aSBPYcjOlktquahGwGeA==",
            "engines": {
                "node": ">=0.11"
            },
            "funding": {
                "type": "opencollective",
                "url": "https://opencollective.com/date-fns"
            }
        },
        "node_modules/debug": {
            "version": "2.6.9",
            "resolved": "https://registry.npmjs.org/debug/-/debug-2.6.9.tgz",
            "integrity": "sha512-bC7ElrdJaJnPbAP+1EotYvqZsb3ecl5wi6Bfi6BJTUcNowp6cvspg0jXznRTKDjm/E7AdgFBVeAPVMNcKGsHMA==",
            "dependencies": {
                "ms": "2.0.0"
            }
        },
        "node_modules/delegates": {
            "version": "1.0.0",
            "resolved": "https://registry.npmjs.org/delegates/-/delegates-1.0.0.tgz",
            "integrity": "sha1-hMbhWbgZBP3KWaDvRM2HDTElD5o="
        },
        "node_modules/denque": {
            "version": "2.1.0",
            "resolved": "https://registry.npmjs.org/denque/-/denque-2.1.0.tgz",
            "integrity": "sha512-HVQE3AAb/pxF8fQAoiqpvg9i3evqug3hoiwakOyZAwJm+6vZehbkYXZ0l4JxS+I3QxM97v5aaRNhj8v5oBhekw==",
            "engines": {
                "node": ">=0.10"
            }
        },
        "node_modules/depd": {
            "version": "1.1.2",
            "resolved": "https://registry.npmjs.org/depd/-/depd-1.1.2.tgz",
            "integrity": "sha1-m81S4UwJd2PnSbJ0xDRu0uVgtak=",
            "engines": {
                "node": ">= 0.6"
            }
        },
        "node_modules/destroy": {
            "version": "1.0.4",
            "resolved": "https://registry.npmjs.org/destroy/-/destroy-1.0.4.tgz",
            "integrity": "sha1-l4hXRCxEdJ5CBmE+N5RiBYJqvYA="
        },
        "node_modules/detect-libc": {
            "version": "1.0.3",
            "resolved": "https://registry.npmjs.org/detect-libc/-/detect-libc-1.0.3.tgz",
            "integrity": "sha1-+hN8S9aY7fVc1c0CrFWfkaTEups=",
            "bin": {
                "detect-libc": "bin/detect-libc.js"
            },
            "engines": {
                "node": ">=0.10"
            }
        },
        "node_modules/dotenv": {
            "version": "16.0.0",
            "resolved": "https://registry.npmjs.org/dotenv/-/dotenv-16.0.0.tgz",
            "integrity": "sha512-qD9WU0MPM4SWLPJy/r2Be+2WgQj8plChsyrCNQzW/0WjvcJQiKQJ9mH3ZgB3fxbUUxgc/11ZJ0Fi5KiimWGz2Q==",
            "engines": {
                "node": ">=12"
            }
        },
        "node_modules/ecdsa-sig-formatter": {
            "version": "1.0.11",
            "resolved": "https://registry.npmjs.org/ecdsa-sig-formatter/-/ecdsa-sig-formatter-1.0.11.tgz",
            "integrity": "sha512-nagl3RYrbNv6kQkeJIpt6NJZy8twLB/2vtz6yN9Z4vRKHN4/QZJIEbqohALSgwKdnksuY3k5Addp5lg8sVoVcQ==",
            "dependencies": {
                "safe-buffer": "^5.0.1"
            }
        },
        "node_modules/ee-first": {
            "version": "1.1.1",
            "resolved": "https://registry.npmjs.org/ee-first/-/ee-first-1.1.1.tgz",
            "integrity": "sha1-WQxhFWsK4vTwJVcyoViyZrxWsh0="
        },
        "node_modules/emoji-regex": {
            "version": "8.0.0",
            "resolved": "https://registry.npmjs.org/emoji-regex/-/emoji-regex-8.0.0.tgz",
            "integrity": "sha512-MSjYzcWNOA0ewAHpz0MxpYFvwg6yjy1NG3xteoqz644VCo/RPgnr1/GGt+ic3iJTzQ8Eu3TdM14SawnVUmGE6A=="
        },
        "node_modules/encodeurl": {
            "version": "1.0.2",
            "resolved": "https://registry.npmjs.org/encodeurl/-/encodeurl-1.0.2.tgz",
            "integrity": "sha1-rT/0yG7C0CkyL1oCw6mmBslbP1k=",
            "engines": {
                "node": ">= 0.8"
            }
        },
        "node_modules/escape-html": {
            "version": "1.0.3",
            "resolved": "https://registry.npmjs.org/escape-html/-/escape-html-1.0.3.tgz",
            "integrity": "sha1-Aljq5NPQwJdN4cFpGI7wBR0dGYg="
        },
        "node_modules/etag": {
            "version": "1.8.1",
            "resolved": "https://registry.npmjs.org/etag/-/etag-1.8.1.tgz",
            "integrity": "sha1-Qa4u62XvpiJorr/qg6x9eSmbCIc=",
            "engines": {
                "node": ">= 0.6"
            }
        },
        "node_modules/express": {
            "version": "4.17.3",
            "resolved": "https://registry.npmjs.org/express/-/express-4.17.3.tgz",
            "integrity": "sha512-yuSQpz5I+Ch7gFrPCk4/c+dIBKlQUxtgwqzph132bsT6qhuzss6I8cLJQz7B3rFblzd6wtcI0ZbGltH/C4LjUg==",
            "dependencies": {
                "accepts": "~1.3.8",
                "array-flatten": "1.1.1",
                "body-parser": "1.19.2",
                "content-disposition": "0.5.4",
                "content-type": "~1.0.4",
                "cookie": "0.4.2",
                "cookie-signature": "1.0.6",
                "debug": "2.6.9",
                "depd": "~1.1.2",
                "encodeurl": "~1.0.2",
                "escape-html": "~1.0.3",
                "etag": "~1.8.1",
                "finalhandler": "~1.1.2",
                "fresh": "0.5.2",
                "merge-descriptors": "1.0.1",
                "methods": "~1.1.2",
                "on-finished": "~2.3.0",
                "parseurl": "~1.3.3",
                "path-to-regexp": "0.1.7",
                "proxy-addr": "~2.0.7",
                "qs": "6.9.7",
                "range-parser": "~1.2.1",
                "safe-buffer": "5.2.1",
                "send": "0.17.2",
                "serve-static": "1.14.2",
                "setprototypeof": "1.2.0",
                "statuses": "~1.5.0",
                "type-is": "~1.6.18",
                "utils-merge": "1.0.1",
                "vary": "~1.1.2"
            },
            "engines": {
                "node": ">= 0.10.0"
            }
        },
        "node_modules/express/node_modules/qs": {
            "version": "6.9.7",
            "resolved": "https://registry.npmjs.org/qs/-/qs-6.9.7.tgz",
            "integrity": "sha512-IhMFgUmuNpyRfxA90umL7ByLlgRXu6tIfKPpF5TmcfRLlLCckfP/g3IQmju6jjpu+Hh8rA+2p6A27ZSPOOHdKw==",
            "engines": {
                "node": ">=0.6"
            },
            "funding": {
                "url": "https://github.com/sponsors/ljharb"
            }
        },
        "node_modules/extend": {
            "version": "3.0.2",
            "resolved": "https://registry.npmjs.org/extend/-/extend-3.0.2.tgz",
            "integrity": "sha512-fjquC59cD7CyW6urNXK0FBufkZcoiGG80wTuPujX590cB5Ttln20E2UB4S/WARVqhXffZl2LNgS+gQdPIIim/g=="
        },
        "node_modules/fast-text-encoding": {
            "version": "1.0.6",
            "resolved": "https://registry.npmjs.org/fast-text-encoding/-/fast-text-encoding-1.0.6.tgz",
            "integrity": "sha512-VhXlQgj9ioXCqGstD37E/HBeqEGV/qOD/kmbVG8h5xKBYvM1L3lR1Zn4555cQ8GkYbJa8aJSipLPndE1k6zK2w=="
        },
        "node_modules/fetch-blob": {
            "version": "3.1.4",
            "resolved": "https://registry.npmjs.org/fetch-blob/-/fetch-blob-3.1.4.tgz",
            "integrity": "sha512-Eq5Xv5+VlSrYWEqKrusxY1C3Hm/hjeAsCGVG3ft7pZahlUAChpGZT/Ms1WmSLnEAisEXszjzu/s+ce6HZB2VHA==",
            "funding": [
                {
                    "type": "github",
                    "url": "https://github.com/sponsors/jimmywarting"
                },
                {
                    "type": "paypal",
                    "url": "https://paypal.me/jimmywarting"
                }
            ],
            "dependencies": {
                "node-domexception": "^1.0.0",
                "web-streams-polyfill": "^3.0.3"
            },
            "engines": {
                "node": "^12.20 || >= 14.13"
            }
        },
        "node_modules/fill-range": {
            "version": "7.0.1",
            "resolved": "https://registry.npmjs.org/fill-range/-/fill-range-7.0.1.tgz",
            "integrity": "sha512-qOo9F+dMUmC2Lcb4BbVvnKJxTPjCm+RRpe4gDuGrzkL7mEVl/djYSu2OdQ2Pa302N4oqkSg9ir6jaLWJ2USVpQ==",
            "dependencies": {
                "to-regex-range": "^5.0.1"
            },
            "engines": {
                "node": ">=8"
            }
        },
        "node_modules/finalhandler": {
            "version": "1.1.2",
            "resolved": "https://registry.npmjs.org/finalhandler/-/finalhandler-1.1.2.tgz",
            "integrity": "sha512-aAWcW57uxVNrQZqFXjITpW3sIUQmHGG3qSb9mUah9MgMC4NeWhNOlNjXEYq3HjRAvL6arUviZGGJsBg6z0zsWA==",
            "dependencies": {
                "debug": "2.6.9",
                "encodeurl": "~1.0.2",
                "escape-html": "~1.0.3",
                "on-finished": "~2.3.0",
                "parseurl": "~1.3.3",
                "statuses": "~1.5.0",
                "unpipe": "~1.0.0"
            },
            "engines": {
                "node": ">= 0.8"
            }
        },
        "node_modules/formdata-polyfill": {
            "version": "4.0.10",
            "resolved": "https://registry.npmjs.org/formdata-polyfill/-/formdata-polyfill-4.0.10.tgz",
            "integrity": "sha512-buewHzMvYL29jdeQTVILecSaZKnt/RJWjoZCF5OW60Z67/GmSLBkOFM7qh1PI3zFNtJbaZL5eQu1vLfazOwj4g==",
            "dependencies": {
                "fetch-blob": "^3.1.2"
            },
            "engines": {
                "node": ">=12.20.0"
            }
        },
        "node_modules/forwarded": {
            "version": "0.2.0",
            "resolved": "https://registry.npmjs.org/forwarded/-/forwarded-0.2.0.tgz",
            "integrity": "sha512-buRG0fpBtRHSTCOASe6hD258tEubFoRLb4ZNA6NxMVHNw2gOcwHo9wyablzMzOA5z9xA9L1KNjk/Nt6MT9aYow==",
            "engines": {
                "node": ">= 0.6"
            }
        },
        "node_modules/fresh": {
            "version": "0.5.2",
            "resolved": "https://registry.npmjs.org/fresh/-/fresh-0.5.2.tgz",
            "integrity": "sha1-PYyt2Q2XZWn6g1qx+OSyOhBWBac=",
            "engines": {
                "node": ">= 0.6"
            }
        },
        "node_modules/fs-minipass": {
            "version": "2.1.0",
            "resolved": "https://registry.npmjs.org/fs-minipass/-/fs-minipass-2.1.0.tgz",
            "integrity": "sha512-V/JgOLFCS+R6Vcq0slCuaeWEdNC3ouDlJMNIsacH2VtALiu9mV4LPrHc5cDl8k5aw6J8jwgWWpiTo5RYhmIzvg==",
            "dependencies": {
                "minipass": "^3.0.0"
            },
            "engines": {
                "node": ">= 8"
            }
        },
        "node_modules/fs.realpath": {
            "version": "1.0.0",
            "resolved": "https://registry.npmjs.org/fs.realpath/-/fs.realpath-1.0.0.tgz",
            "integrity": "sha1-FQStJSMVjKpA20onh8sBQRmU6k8="
        },
        "node_modules/fsevents": {
            "version": "2.3.2",
            "resolved": "https://registry.npmjs.org/fsevents/-/fsevents-2.3.2.tgz",
            "integrity": "sha512-xiqMQR4xAeHTuB9uWm+fFRcIOgKBMiOBP+eXiyT7jsgVCq1bkVygt00oASowB7EdtpOHaaPgKt812P9ab+DDKA==",
            "hasInstallScript": true,
            "optional": true,
            "os": [
                "darwin"
            ],
            "engines": {
                "node": "^8.16.0 || ^10.6.0 || >=11.0.0"
            }
        },
        "node_modules/function-bind": {
            "version": "1.1.1",
            "resolved": "https://registry.npmjs.org/function-bind/-/function-bind-1.1.1.tgz",
            "integrity": "sha512-yIovAzMX49sF8Yl58fSCWJ5svSLuaibPxXQJFLmBObTuCr0Mf1KiPopGM9NiFjiYBCbfaa2Fh6breQ6ANVTI0A=="
        },
        "node_modules/gauge": {
            "version": "3.0.2",
            "resolved": "https://registry.npmjs.org/gauge/-/gauge-3.0.2.tgz",
            "integrity": "sha512-+5J6MS/5XksCuXq++uFRsnUd7Ovu1XenbeuIuNRJxYWjgQbPuFhT14lAvsWfqfAmnwluf1OwMjz39HjfLPci0Q==",
            "dependencies": {
                "aproba": "^1.0.3 || ^2.0.0",
                "color-support": "^1.1.2",
                "console-control-strings": "^1.0.0",
                "has-unicode": "^2.0.1",
                "object-assign": "^4.1.1",
                "signal-exit": "^3.0.0",
                "string-width": "^4.2.3",
                "strip-ansi": "^6.0.1",
                "wide-align": "^1.1.2"
            },
            "engines": {
                "node": ">=10"
            }
        },
        "node_modules/gaxios": {
            "version": "5.0.2",
            "resolved": "https://registry.npmjs.org/gaxios/-/gaxios-5.0.2.tgz",
            "integrity": "sha512-TjtV2AJOZoMQqRYoy5eM8cCQogYwazWNYLQ72QB0kwa6vHHruYkGmhhyrlzbmgNHK1dNnuP2WSH81urfzyN2Og==",
            "dependencies": {
                "extend": "^3.0.2",
                "https-proxy-agent": "^5.0.0",
                "is-stream": "^2.0.0",
                "node-fetch": "^2.6.7"
            },
            "engines": {
                "node": ">=12"
            }
        },
        "node_modules/gaxios/node_modules/node-fetch": {
            "version": "2.6.7",
            "resolved": "https://registry.npmjs.org/node-fetch/-/node-fetch-2.6.7.tgz",
            "integrity": "sha512-ZjMPFEfVx5j+y2yF35Kzx5sF7kDzxuDj6ziH4FFbOp87zKDZNx8yExJIb05OGF4Nlt9IHFIMBkRl41VdvcNdbQ==",
            "dependencies": {
                "whatwg-url": "^5.0.0"
            },
            "engines": {
                "node": "4.x || >=6.0.0"
            },
            "peerDependencies": {
                "encoding": "^0.1.0"
            },
            "peerDependenciesMeta": {
                "encoding": {
                    "optional": true
                }
            }
        },
        "node_modules/gaxios/node_modules/tr46": {
            "version": "0.0.3",
            "resolved": "https://registry.npmjs.org/tr46/-/tr46-0.0.3.tgz",
            "integrity": "sha512-N3WMsuqV66lT30CrXNbEjx4GEwlow3v6rr4mCcv6prnfwhS01rkgyFdjPNBYd9br7LpXV1+Emh01fHnq2Gdgrw=="
        },
        "node_modules/gaxios/node_modules/webidl-conversions": {
            "version": "3.0.1",
            "resolved": "https://registry.npmjs.org/webidl-conversions/-/webidl-conversions-3.0.1.tgz",
            "integrity": "sha512-2JAn3z8AR6rjK8Sm8orRC0h/bcl/DqL7tRPdGZ4I1CjdF+EaMLmYxBHyXuKL849eucPFhvBoxMsflfOb8kxaeQ=="
        },
        "node_modules/gaxios/node_modules/whatwg-url": {
            "version": "5.0.0",
            "resolved": "https://registry.npmjs.org/whatwg-url/-/whatwg-url-5.0.0.tgz",
            "integrity": "sha512-saE57nupxk6v3HY35+jzBwYa0rKSy0XR8JSxZPwgLr7ys0IBzhGviA1/TUGJLmSVqs8pb9AnvICXEuOHLprYTw==",
            "dependencies": {
                "tr46": "~0.0.3",
                "webidl-conversions": "^3.0.0"
            }
        },
        "node_modules/gcp-metadata": {
            "version": "5.0.1",
            "resolved": "https://registry.npmjs.org/gcp-metadata/-/gcp-metadata-5.0.1.tgz",
            "integrity": "sha512-jiRJ+Fk7e8FH68Z6TLaqwea307OktJpDjmYnU7/li6ziwvVvU2RlrCyQo5vkdeP94chm0kcSCOOszvmuaioq3g==",
            "dependencies": {
                "gaxios": "^5.0.0",
                "json-bigint": "^1.0.0"
            },
            "engines": {
                "node": ">=12"
            }
        },
        "node_modules/generate-password": {
            "version": "1.7.0",
            "resolved": "https://registry.npmjs.org/generate-password/-/generate-password-1.7.0.tgz",
            "integrity": "sha512-WPCtlfy0jexf7W5IbwxGUgpIDvsZIohbI2DAq2Q6TSlKKis+G4GT9sxvPxrZUGL8kP6WUXMWNqYnxY6DDKAdFA=="
        },
        "node_modules/get-intrinsic": {
            "version": "1.1.3",
            "resolved": "https://registry.npmjs.org/get-intrinsic/-/get-intrinsic-1.1.3.tgz",
            "integrity": "sha512-QJVz1Tj7MS099PevUG5jvnt9tSkXN8K14dxQlikJuPt4uD9hHAHjLyLBiLR5zELelBdD9QNRAXZzsJx0WaDL9A==",
            "dependencies": {
                "function-bind": "^1.1.1",
                "has": "^1.0.3",
                "has-symbols": "^1.0.3"
            },
            "funding": {
                "url": "https://github.com/sponsors/ljharb"
            }
        },
        "node_modules/glob": {
            "version": "7.2.0",
            "resolved": "https://registry.npmjs.org/glob/-/glob-7.2.0.tgz",
            "integrity": "sha512-lmLf6gtyrPq8tTjSmrO94wBeQbFR3HbLHbuyD69wuyQkImp2hWqMGB47OX65FBkPffO641IP9jWa1z4ivqG26Q==",
            "dependencies": {
                "fs.realpath": "^1.0.0",
                "inflight": "^1.0.4",
                "inherits": "2",
                "minimatch": "^3.0.4",
                "once": "^1.3.0",
                "path-is-absolute": "^1.0.0"
            },
            "engines": {
                "node": "*"
            },
            "funding": {
                "url": "https://github.com/sponsors/isaacs"
            }
        },
        "node_modules/glob-parent": {
            "version": "5.1.2",
            "resolved": "https://registry.npmjs.org/glob-parent/-/glob-parent-5.1.2.tgz",
            "integrity": "sha512-AOIgSQCepiJYwP3ARnGx+5VnTu2HBYdzbGP45eLw1vr3zB3vZLeyed1sC9hnbcOc9/SrMyM5RPQrkGz4aS9Zow==",
            "dependencies": {
                "is-glob": "^4.0.1"
            },
            "engines": {
                "node": ">= 6"
            }
        },
        "node_modules/google-auth-library": {
            "version": "8.6.0",
            "resolved": "https://registry.npmjs.org/google-auth-library/-/google-auth-library-8.6.0.tgz",
            "integrity": "sha512-y6bw1yTWMVgs1vGJwBZ3uu+uIClfgxQfsEVcTNKjQeNQOVwox69+ZUgTeTAzrh+74hBqrk1gWyb9RsQVDI7seg==",
            "dependencies": {
                "arrify": "^2.0.0",
                "base64-js": "^1.3.0",
                "ecdsa-sig-formatter": "^1.0.11",
                "fast-text-encoding": "^1.0.0",
                "gaxios": "^5.0.0",
                "gcp-metadata": "^5.0.0",
                "gtoken": "^6.1.0",
                "jws": "^4.0.0",
                "lru-cache": "^6.0.0"
            },
            "engines": {
                "node": ">=12"
            }
        },
        "node_modules/google-auth-library/node_modules/jwa": {
            "version": "2.0.0",
            "resolved": "https://registry.npmjs.org/jwa/-/jwa-2.0.0.tgz",
            "integrity": "sha512-jrZ2Qx916EA+fq9cEAeCROWPTfCwi1IVHqT2tapuqLEVVDKFDENFw1oL+MwrTvH6msKxsd1YTDVw6uKEcsrLEA==",
            "dependencies": {
                "buffer-equal-constant-time": "1.0.1",
                "ecdsa-sig-formatter": "1.0.11",
                "safe-buffer": "^5.0.1"
            }
        },
        "node_modules/google-auth-library/node_modules/jws": {
            "version": "4.0.0",
            "resolved": "https://registry.npmjs.org/jws/-/jws-4.0.0.tgz",
            "integrity": "sha512-KDncfTmOZoOMTFG4mBlG0qUIOlc03fmzH+ru6RgYVZhPkyiy/92Owlt/8UEN+a4TXR1FQetfIpJE8ApdvdVxTg==",
            "dependencies": {
                "jwa": "^2.0.0",
                "safe-buffer": "^5.0.1"
            }
        },
        "node_modules/google-p12-pem": {
            "version": "4.0.1",
            "resolved": "https://registry.npmjs.org/google-p12-pem/-/google-p12-pem-4.0.1.tgz",
            "integrity": "sha512-WPkN4yGtz05WZ5EhtlxNDWPhC4JIic6G8ePitwUWy4l+XPVYec+a0j0Ts47PDtW59y3RwAhUd9/h9ZZ63px6RQ==",
            "dependencies": {
                "node-forge": "^1.3.1"
            },
            "bin": {
                "gp12-pem": "build/src/bin/gp12-pem.js"
            },
            "engines": {
                "node": ">=12.0.0"
            }
        },
        "node_modules/googleapis": {
            "version": "108.0.1",
            "resolved": "https://registry.npmjs.org/googleapis/-/googleapis-108.0.1.tgz",
            "integrity": "sha512-NKYTMfQH1xVl38Efj4UAwYq/9j+vc/iaqULfG3dSBK4vQHhsYKgKN6agMrgzlWo3NA8ivwb/0bToxZxnhxj7Bg==",
            "dependencies": {
                "google-auth-library": "^8.0.2",
                "googleapis-common": "^6.0.0"
            },
            "engines": {
                "node": ">=12.0.0"
            }
        },
        "node_modules/googleapis-common": {
            "version": "6.0.3",
            "resolved": "https://registry.npmjs.org/googleapis-common/-/googleapis-common-6.0.3.tgz",
            "integrity": "sha512-Xyb4FsQ6PQDu4tAE/M/ev4yzZhFe2Gc7+rKmuCX2ZGk1ajBKbafsGlVYpmzGqQOT93BRDe8DiTmQb6YSkbICrA==",
            "dependencies": {
                "extend": "^3.0.2",
                "gaxios": "^5.0.1",
                "google-auth-library": "^8.0.2",
                "qs": "^6.7.0",
                "url-template": "^2.0.8",
                "uuid": "^9.0.0"
            },
            "engines": {
                "node": ">=12.0.0"
            }
        },
        "node_modules/gtoken": {
            "version": "6.1.2",
            "resolved": "https://registry.npmjs.org/gtoken/-/gtoken-6.1.2.tgz",
            "integrity": "sha512-4ccGpzz7YAr7lxrT2neugmXQ3hP9ho2gcaityLVkiUecAiwiy60Ii8gRbZeOsXV19fYaRjgBSshs8kXw+NKCPQ==",
            "dependencies": {
                "gaxios": "^5.0.1",
                "google-p12-pem": "^4.0.0",
                "jws": "^4.0.0"
            },
            "engines": {
                "node": ">=12.0.0"
            }
        },
        "node_modules/gtoken/node_modules/jwa": {
            "version": "2.0.0",
            "resolved": "https://registry.npmjs.org/jwa/-/jwa-2.0.0.tgz",
            "integrity": "sha512-jrZ2Qx916EA+fq9cEAeCROWPTfCwi1IVHqT2tapuqLEVVDKFDENFw1oL+MwrTvH6msKxsd1YTDVw6uKEcsrLEA==",
            "dependencies": {
                "buffer-equal-constant-time": "1.0.1",
                "ecdsa-sig-formatter": "1.0.11",
                "safe-buffer": "^5.0.1"
            }
        },
        "node_modules/gtoken/node_modules/jws": {
            "version": "4.0.0",
            "resolved": "https://registry.npmjs.org/jws/-/jws-4.0.0.tgz",
            "integrity": "sha512-KDncfTmOZoOMTFG4mBlG0qUIOlc03fmzH+ru6RgYVZhPkyiy/92Owlt/8UEN+a4TXR1FQetfIpJE8ApdvdVxTg==",
            "dependencies": {
                "jwa": "^2.0.0",
                "safe-buffer": "^5.0.1"
            }
        },
        "node_modules/has": {
            "version": "1.0.3",
            "resolved": "https://registry.npmjs.org/has/-/has-1.0.3.tgz",
            "integrity": "sha512-f2dvO0VU6Oej7RkWJGrehjbzMAjFp5/VKPp5tTpWIV4JHHZK1/BxbFRtf/siA2SWTe09caDmVtYYzWEIbBS4zw==",
            "dependencies": {
                "function-bind": "^1.1.1"
            },
            "engines": {
                "node": ">= 0.4.0"
            }
        },
        "node_modules/has-flag": {
            "version": "3.0.0",
            "resolved": "https://registry.npmjs.org/has-flag/-/has-flag-3.0.0.tgz",
            "integrity": "sha1-tdRU3CGZriJWmfNGfloH87lVuv0=",
            "engines": {
                "node": ">=4"
            }
        },
        "node_modules/has-symbols": {
            "version": "1.0.3",
            "resolved": "https://registry.npmjs.org/has-symbols/-/has-symbols-1.0.3.tgz",
            "integrity": "sha512-l3LCuF6MgDNwTDKkdYGEihYjt5pRPbEg46rtlmnSPlUbgmB8LOIrKJbYYFBSbnPaJexMKtiPO8hmeRjRz2Td+A==",
            "engines": {
                "node": ">= 0.4"
            },
            "funding": {
                "url": "https://github.com/sponsors/ljharb"
            }
        },
        "node_modules/has-unicode": {
            "version": "2.0.1",
            "resolved": "https://registry.npmjs.org/has-unicode/-/has-unicode-2.0.1.tgz",
            "integrity": "sha1-4Ob+aijPUROIVeCG0Wkedx3iqLk="
        },
        "node_modules/http-errors": {
            "version": "1.8.1",
            "resolved": "https://registry.npmjs.org/http-errors/-/http-errors-1.8.1.tgz",
            "integrity": "sha512-Kpk9Sm7NmI+RHhnj6OIWDI1d6fIoFAtFt9RLaTMRlg/8w49juAStsrBgp0Dp4OdxdVbRIeKhtCUvoi/RuAhO4g==",
            "dependencies": {
                "depd": "~1.1.2",
                "inherits": "2.0.4",
                "setprototypeof": "1.2.0",
                "statuses": ">= 1.5.0 < 2",
                "toidentifier": "1.0.1"
            },
            "engines": {
                "node": ">= 0.6"
            }
        },
        "node_modules/https-proxy-agent": {
            "version": "5.0.0",
            "resolved": "https://registry.npmjs.org/https-proxy-agent/-/https-proxy-agent-5.0.0.tgz",
            "integrity": "sha512-EkYm5BcKUGiduxzSt3Eppko+PiNWNEpa4ySk9vTC6wDsQJW9rHSa+UhGNJoRYp7bz6Ht1eaRIa6QaJqO5rCFbA==",
            "dependencies": {
                "agent-base": "6",
                "debug": "4"
            },
            "engines": {
                "node": ">= 6"
            }
        },
        "node_modules/https-proxy-agent/node_modules/debug": {
            "version": "4.3.3",
            "resolved": "https://registry.npmjs.org/debug/-/debug-4.3.3.tgz",
            "integrity": "sha512-/zxw5+vh1Tfv+4Qn7a5nsbcJKPaSvCDhojn6FEl9vupwK2VCSDtEiEtqr8DFtzYFOdz63LBkxec7DYuc2jon6Q==",
            "dependencies": {
                "ms": "2.1.2"
            },
            "engines": {
                "node": ">=6.0"
            },
            "peerDependenciesMeta": {
                "supports-color": {
                    "optional": true
                }
            }
        },
        "node_modules/https-proxy-agent/node_modules/ms": {
            "version": "2.1.2",
            "resolved": "https://registry.npmjs.org/ms/-/ms-2.1.2.tgz",
            "integrity": "sha512-sGkPx+VjMtmA6MX27oA4FBFELFCZZ4S4XqeGOXCv68tT+jb3vk/RyaKWP0PTKyWtmLSM0b+adUTEvbs1PEaH2w=="
        },
        "node_modules/iconv-lite": {
            "version": "0.4.24",
            "resolved": "https://registry.npmjs.org/iconv-lite/-/iconv-lite-0.4.24.tgz",
            "integrity": "sha512-v3MXnZAcvnywkTUEZomIActle7RXXeedOR31wwl7VlyoXO4Qi9arvSenNQWne1TcRwhCL1HwLI21bEqdpj8/rA==",
            "dependencies": {
                "safer-buffer": ">= 2.1.2 < 3"
            },
            "engines": {
                "node": ">=0.10.0"
            }
        },
        "node_modules/ieee754": {
            "version": "1.2.1",
            "resolved": "https://registry.npmjs.org/ieee754/-/ieee754-1.2.1.tgz",
            "integrity": "sha512-dcyqhDvX1C46lXZcVqCpK+FtMRQVdIMN6/Df5js2zouUsqG7I6sFxitIC+7KYK29KdXOLHdu9zL4sFnoVQnqaA==",
            "funding": [
                {
                    "type": "github",
                    "url": "https://github.com/sponsors/feross"
                },
                {
                    "type": "patreon",
                    "url": "https://www.patreon.com/feross"
                },
                {
                    "type": "consulting",
                    "url": "https://feross.org/support"
                }
            ]
        },
        "node_modules/ignore-by-default": {
            "version": "1.0.1",
            "resolved": "https://registry.npmjs.org/ignore-by-default/-/ignore-by-default-1.0.1.tgz",
            "integrity": "sha1-SMptcvbGo68Aqa1K5odr44ieKwk="
        },
        "node_modules/inflight": {
            "version": "1.0.6",
            "resolved": "https://registry.npmjs.org/inflight/-/inflight-1.0.6.tgz",
            "integrity": "sha1-Sb1jMdfQLQwJvJEKEHW6gWW1bfk=",
            "dependencies": {
                "once": "^1.3.0",
                "wrappy": "1"
            }
        },
        "node_modules/inherits": {
            "version": "2.0.4",
            "resolved": "https://registry.npmjs.org/inherits/-/inherits-2.0.4.tgz",
            "integrity": "sha512-k/vGaX4/Yla3WzyMCvTQOXYeIHvqOKtnqBduzTHpzpQZzAskKMhZ2K+EnBiSM9zGSoIFeMpXKxa4dYeZIQqewQ=="
        },
        "node_modules/ip": {
            "version": "2.0.0",
            "resolved": "https://registry.npmjs.org/ip/-/ip-2.0.0.tgz",
            "integrity": "sha512-WKa+XuLG1A1R0UWhl2+1XQSi+fZWMsYKffMZTTYsiZaUD8k2yDAj5atimTUD2TZkyCkNEeYE5NhFZmupOGtjYQ=="
        },
        "node_modules/ipaddr.js": {
            "version": "1.9.1",
            "resolved": "https://registry.npmjs.org/ipaddr.js/-/ipaddr.js-1.9.1.tgz",
            "integrity": "sha512-0KI/607xoxSToH7GjN1FfSbLoU0+btTicjsQSWQlh/hZykN8KpmMf7uYwPW3R+akZ6R/w18ZlXSHBYXiYUPO3g==",
            "engines": {
                "node": ">= 0.10"
            }
        },
        "node_modules/is-binary-path": {
            "version": "2.1.0",
            "resolved": "https://registry.npmjs.org/is-binary-path/-/is-binary-path-2.1.0.tgz",
            "integrity": "sha512-ZMERYes6pDydyuGidse7OsHxtbI7WVeUEozgR/g7rd0xUimYNlvZRE/K2MgZTjWy725IfelLeVcEM97mmtRGXw==",
            "dependencies": {
                "binary-extensions": "^2.0.0"
            },
            "engines": {
                "node": ">=8"
            }
        },
        "node_modules/is-extglob": {
            "version": "2.1.1",
            "resolved": "https://registry.npmjs.org/is-extglob/-/is-extglob-2.1.1.tgz",
            "integrity": "sha1-qIwCU1eR8C7TfHahueqXc8gz+MI=",
            "engines": {
                "node": ">=0.10.0"
            }
        },
        "node_modules/is-fullwidth-code-point": {
            "version": "3.0.0",
            "resolved": "https://registry.npmjs.org/is-fullwidth-code-point/-/is-fullwidth-code-point-3.0.0.tgz",
            "integrity": "sha512-zymm5+u+sCsSWyD9qNaejV3DFvhCKclKdizYaJUuHA83RLjb7nSuGnddCHGv0hk+KY7BMAlsWeK4Ueg6EV6XQg==",
            "engines": {
                "node": ">=8"
            }
        },
        "node_modules/is-glob": {
            "version": "4.0.3",
            "resolved": "https://registry.npmjs.org/is-glob/-/is-glob-4.0.3.tgz",
            "integrity": "sha512-xelSayHH36ZgE7ZWhli7pW34hNbNl8Ojv5KVmkJD4hBdD3th8Tfk9vYasLM+mXWOZhFkgZfxhLSnrwRr4elSSg==",
            "dependencies": {
                "is-extglob": "^2.1.1"
            },
            "engines": {
                "node": ">=0.10.0"
            }
        },
        "node_modules/is-number": {
            "version": "7.0.0",
            "resolved": "https://registry.npmjs.org/is-number/-/is-number-7.0.0.tgz",
            "integrity": "sha512-41Cifkg6e8TylSpdtTpeLVMqvSBEVzTttHvERD741+pnZ8ANv0004MRL43QKPDlK9cGvNp6NZWZUBlbGXYxxng==",
            "engines": {
                "node": ">=0.12.0"
            }
        },
        "node_modules/is-stream": {
            "version": "2.0.1",
            "resolved": "https://registry.npmjs.org/is-stream/-/is-stream-2.0.1.tgz",
            "integrity": "sha512-hFoiJiTl63nn+kstHGBtewWSKnQLpyb155KHheA1l39uvtO9nWIop1p3udqPcUd/xbF1VLMO4n7OI6p7RbngDg==",
            "engines": {
                "node": ">=8"
            },
            "funding": {
                "url": "https://github.com/sponsors/sindresorhus"
            }
        },
        "node_modules/json-bigint": {
            "version": "1.0.0",
            "resolved": "https://registry.npmjs.org/json-bigint/-/json-bigint-1.0.0.tgz",
            "integrity": "sha512-SiPv/8VpZuWbvLSMtTDU8hEfrZWg/mH/nV/b4o0CYbSxu1UIQPLdwKOCIyLQX+VIPO5vrLX3i8qtqFyhdPSUSQ==",
            "dependencies": {
                "bignumber.js": "^9.0.0"
            }
        },
        "node_modules/jsonwebtoken": {
            "version": "8.5.1",
            "resolved": "https://registry.npmjs.org/jsonwebtoken/-/jsonwebtoken-8.5.1.tgz",
            "integrity": "sha512-XjwVfRS6jTMsqYs0EsuJ4LGxXV14zQybNd4L2r0UvbVnSF9Af8x7p5MzbJ90Ioz/9TI41/hTCvznF/loiSzn8w==",
            "dependencies": {
                "jws": "^3.2.2",
                "lodash.includes": "^4.3.0",
                "lodash.isboolean": "^3.0.3",
                "lodash.isinteger": "^4.0.4",
                "lodash.isnumber": "^3.0.3",
                "lodash.isplainobject": "^4.0.6",
                "lodash.isstring": "^4.0.1",
                "lodash.once": "^4.0.0",
                "ms": "^2.1.1",
                "semver": "^5.6.0"
            },
            "engines": {
                "node": ">=4",
                "npm": ">=1.4.28"
            }
        },
        "node_modules/jsonwebtoken/node_modules/ms": {
            "version": "2.1.3",
            "resolved": "https://registry.npmjs.org/ms/-/ms-2.1.3.tgz",
            "integrity": "sha512-6FlzubTLZG3J2a/NVCAleEhjzq5oxgHyaCU9yYXvcLsvoVaHJq/s5xXI6/XXP6tz7R9xAOtHnSO/tXtF3WRTlA=="
        },
        "node_modules/jwa": {
            "version": "1.4.1",
            "resolved": "https://registry.npmjs.org/jwa/-/jwa-1.4.1.tgz",
            "integrity": "sha512-qiLX/xhEEFKUAJ6FiBMbes3w9ATzyk5W7Hvzpa/SLYdxNtng+gcurvrI7TbACjIXlsJyr05/S1oUhZrc63evQA==",
            "dependencies": {
                "buffer-equal-constant-time": "1.0.1",
                "ecdsa-sig-formatter": "1.0.11",
                "safe-buffer": "^5.0.1"
            }
        },
        "node_modules/jws": {
            "version": "3.2.2",
            "resolved": "https://registry.npmjs.org/jws/-/jws-3.2.2.tgz",
            "integrity": "sha512-YHlZCB6lMTllWDtSPHz/ZXTsi8S00usEV6v1tjq8tOUZzw7DpSDWVXjXDre6ed1w/pd495ODpHZYSdkRTsa0HA==",
            "dependencies": {
                "jwa": "^1.4.1",
                "safe-buffer": "^5.0.1"
            }
        },
        "node_modules/jwt-decode": {
            "version": "3.1.2",
            "resolved": "https://registry.npmjs.org/jwt-decode/-/jwt-decode-3.1.2.tgz",
            "integrity": "sha512-UfpWE/VZn0iP50d8cz9NrZLM9lSWhcJ+0Gt/nm4by88UL+J1SiKN8/5dkjMmbEzwL2CAe+67GsegCbIKtbp75A=="
        },
        "node_modules/kareem": {
            "version": "2.4.1",
            "resolved": "https://registry.npmjs.org/kareem/-/kareem-2.4.1.tgz",
            "integrity": "sha512-aJ9opVoXroQUPfovYP5kaj2lM7Jn02Gw13bL0lg9v0V7SaUc0qavPs0Eue7d2DcC3NjqI6QAUElXNsuZSeM+EA=="
        },
        "node_modules/lodash.includes": {
            "version": "4.3.0",
            "resolved": "https://registry.npmjs.org/lodash.includes/-/lodash.includes-4.3.0.tgz",
            "integrity": "sha1-YLuYqHy5I8aMoeUTJUgzFISfVT8="
        },
        "node_modules/lodash.isboolean": {
            "version": "3.0.3",
            "resolved": "https://registry.npmjs.org/lodash.isboolean/-/lodash.isboolean-3.0.3.tgz",
            "integrity": "sha1-bC4XHbKiV82WgC/UOwGyDV9YcPY="
        },
        "node_modules/lodash.isinteger": {
            "version": "4.0.4",
            "resolved": "https://registry.npmjs.org/lodash.isinteger/-/lodash.isinteger-4.0.4.tgz",
            "integrity": "sha1-YZwK89A/iwTDH1iChAt3sRzWg0M="
        },
        "node_modules/lodash.isnumber": {
            "version": "3.0.3",
            "resolved": "https://registry.npmjs.org/lodash.isnumber/-/lodash.isnumber-3.0.3.tgz",
            "integrity": "sha1-POdoEMWSjQM1IwGsKHMX8RwLH/w="
        },
        "node_modules/lodash.isplainobject": {
            "version": "4.0.6",
            "resolved": "https://registry.npmjs.org/lodash.isplainobject/-/lodash.isplainobject-4.0.6.tgz",
            "integrity": "sha1-fFJqUtibRcRcxpC4gWO+BJf1UMs="
        },
        "node_modules/lodash.isstring": {
            "version": "4.0.1",
            "resolved": "https://registry.npmjs.org/lodash.isstring/-/lodash.isstring-4.0.1.tgz",
            "integrity": "sha1-1SfftUVuynzJu5XV2ur4i6VKVFE="
        },
        "node_modules/lodash.once": {
            "version": "4.1.1",
            "resolved": "https://registry.npmjs.org/lodash.once/-/lodash.once-4.1.1.tgz",
            "integrity": "sha1-DdOXEhPHxW34gJd9UEyI+0cal6w="
        },
        "node_modules/lru-cache": {
            "version": "6.0.0",
            "resolved": "https://registry.npmjs.org/lru-cache/-/lru-cache-6.0.0.tgz",
            "integrity": "sha512-Jo6dJ04CmSjuznwJSS3pUeWmd/H0ffTlkXXgwZi+eq1UCmqQwCh+eLsYOYCwY991i2Fah4h1BEMCx4qThGbsiA==",
            "dependencies": {
                "yallist": "^4.0.0"
            },
            "engines": {
                "node": ">=10"
            }
        },
        "node_modules/make-dir": {
            "version": "3.1.0",
            "resolved": "https://registry.npmjs.org/make-dir/-/make-dir-3.1.0.tgz",
            "integrity": "sha512-g3FeP20LNwhALb/6Cz6Dd4F2ngze0jz7tbzrD2wAV+o9FeNHe4rL+yK2md0J/fiSf1sa1ADhXqi5+oVwOM/eGw==",
            "dependencies": {
                "semver": "^6.0.0"
            },
            "engines": {
                "node": ">=8"
            },
            "funding": {
                "url": "https://github.com/sponsors/sindresorhus"
            }
        },
        "node_modules/make-dir/node_modules/semver": {
            "version": "6.3.0",
            "resolved": "https://registry.npmjs.org/semver/-/semver-6.3.0.tgz",
            "integrity": "sha512-b39TBaTSfV6yBrapU89p5fKekE2m/NwnDocOVruQFS1/veMgdzuPcnOM34M6CwxW8jH/lxEa5rBoDeUwu5HHTw==",
            "bin": {
                "semver": "bin/semver.js"
            }
        },
        "node_modules/media-typer": {
            "version": "0.3.0",
            "resolved": "https://registry.npmjs.org/media-typer/-/media-typer-0.3.0.tgz",
            "integrity": "sha1-hxDXrwqmJvj/+hzgAWhUUmMlV0g=",
            "engines": {
                "node": ">= 0.6"
            }
        },
        "node_modules/memory-pager": {
            "version": "1.5.0",
            "resolved": "https://registry.npmjs.org/memory-pager/-/memory-pager-1.5.0.tgz",
            "integrity": "sha512-ZS4Bp4r/Zoeq6+NLJpP+0Zzm0pR8whtGPf1XExKLJBAczGMnSi3It14OiNCStjQjM6NU1okjQGSxgEZN8eBYKg==",
            "optional": true
        },
        "node_modules/merge-descriptors": {
            "version": "1.0.1",
            "resolved": "https://registry.npmjs.org/merge-descriptors/-/merge-descriptors-1.0.1.tgz",
            "integrity": "sha1-sAqqVW3YtEVoFQ7J0blT8/kMu2E="
        },
        "node_modules/methods": {
            "version": "1.1.2",
            "resolved": "https://registry.npmjs.org/methods/-/methods-1.1.2.tgz",
            "integrity": "sha1-VSmk1nZUE07cxSZmVoNbD4Ua/O4=",
            "engines": {
                "node": ">= 0.6"
            }
        },
        "node_modules/mime": {
            "version": "1.6.0",
            "resolved": "https://registry.npmjs.org/mime/-/mime-1.6.0.tgz",
            "integrity": "sha512-x0Vn8spI+wuJ1O6S7gnbaQg8Pxh4NNHb7KSINmEWKiPE4RKOplvijn+NkmYmmRgP68mc70j2EbeTFRsrswaQeg==",
            "bin": {
                "mime": "cli.js"
            },
            "engines": {
                "node": ">=4"
            }
        },
        "node_modules/mime-db": {
            "version": "1.51.0",
            "resolved": "https://registry.npmjs.org/mime-db/-/mime-db-1.51.0.tgz",
            "integrity": "sha512-5y8A56jg7XVQx2mbv1lu49NR4dokRnhZYTtL+KGfaa27uq4pSTXkwQkFJl4pkRMyNFz/EtYDSkiiEHx3F7UN6g==",
            "engines": {
                "node": ">= 0.6"
            }
        },
        "node_modules/mime-types": {
            "version": "2.1.34",
            "resolved": "https://registry.npmjs.org/mime-types/-/mime-types-2.1.34.tgz",
            "integrity": "sha512-6cP692WwGIs9XXdOO4++N+7qjqv0rqxxVvJ3VHPh/Sc9mVZcQP+ZGhkKiTvWMQRr2tbHkJP/Yn7Y0npb3ZBs4A==",
            "dependencies": {
                "mime-db": "1.51.0"
            },
            "engines": {
                "node": ">= 0.6"
            }
        },
        "node_modules/minimatch": {
            "version": "3.1.2",
            "resolved": "https://registry.npmjs.org/minimatch/-/minimatch-3.1.2.tgz",
            "integrity": "sha512-J7p63hRiAjw1NDEww1W7i37+ByIrOWO5XQQAzZ3VOcL0PNybwpfmV/N05zFAzwQ9USyEcX6t3UO+K5aqBQOIHw==",
            "dependencies": {
                "brace-expansion": "^1.1.7"
            },
            "engines": {
                "node": "*"
            }
        },
        "node_modules/minipass": {
            "version": "3.1.6",
            "resolved": "https://registry.npmjs.org/minipass/-/minipass-3.1.6.tgz",
            "integrity": "sha512-rty5kpw9/z8SX9dmxblFA6edItUmwJgMeYDZRrwlIVN27i8gysGbznJwUggw2V/FVqFSDdWy040ZPS811DYAqQ==",
            "dependencies": {
                "yallist": "^4.0.0"
            },
            "engines": {
                "node": ">=8"
            }
        },
        "node_modules/minizlib": {
            "version": "2.1.2",
            "resolved": "https://registry.npmjs.org/minizlib/-/minizlib-2.1.2.tgz",
            "integrity": "sha512-bAxsR8BVfj60DWXHE3u30oHzfl4G7khkSuPW+qvpd7jFRHm7dLxOjUk1EHACJ/hxLY8phGJ0YhYHZo7jil7Qdg==",
            "dependencies": {
                "minipass": "^3.0.0",
                "yallist": "^4.0.0"
            },
            "engines": {
                "node": ">= 8"
            }
        },
        "node_modules/mkdirp": {
            "version": "1.0.4",
            "resolved": "https://registry.npmjs.org/mkdirp/-/mkdirp-1.0.4.tgz",
            "integrity": "sha512-vVqVZQyf3WLx2Shd0qJ9xuvqgAyKPLAiqITEtqW0oIUjzo3PePDd6fW9iFz30ef7Ysp/oiWqbhszeGWW2T6Gzw==",
            "bin": {
                "mkdirp": "bin/cmd.js"
            },
            "engines": {
                "node": ">=10"
            }
        },
        "node_modules/moment": {
            "version": "2.29.4",
            "resolved": "https://registry.npmjs.org/moment/-/moment-2.29.4.tgz",
            "integrity": "sha512-5LC9SOxjSc2HF6vO2CyuTDNivEdoz2IvyJJGj6X8DJ0eFyfszE0QiEd+iXmBvUP3WHxSjFH/vIsA0EN00cgr8w==",
            "engines": {
                "node": "*"
            }
        },
        "node_modules/mongodb": {
            "version": "4.9.1",
            "resolved": "https://registry.npmjs.org/mongodb/-/mongodb-4.9.1.tgz",
            "integrity": "sha512-ZhgI/qBf84fD7sI4waZBoLBNJYPQN5IOC++SBCiPiyhzpNKOxN/fi0tBHvH2dEC42HXtNEbFB0zmNz4+oVtorQ==",
            "dependencies": {
                "bson": "^4.7.0",
                "denque": "^2.1.0",
                "mongodb-connection-string-url": "^2.5.3",
                "socks": "^2.7.0"
            },
            "engines": {
                "node": ">=12.9.0"
            },
            "optionalDependencies": {
                "saslprep": "^1.0.3"
            }
        },
        "node_modules/mongodb-connection-string-url": {
            "version": "2.5.3",
            "resolved": "https://registry.npmjs.org/mongodb-connection-string-url/-/mongodb-connection-string-url-2.5.3.tgz",
            "integrity": "sha512-f+/WsED+xF4B74l3k9V/XkTVj5/fxFH2o5ToKXd8Iyi5UhM+sO9u0Ape17Mvl/GkZaFtM0HQnzAG5OTmhKw+tQ==",
            "dependencies": {
                "@types/whatwg-url": "^8.2.1",
                "whatwg-url": "^11.0.0"
            }
        },
        "node_modules/mongoose": {
            "version": "6.6.1",
            "resolved": "https://registry.npmjs.org/mongoose/-/mongoose-6.6.1.tgz",
            "integrity": "sha512-hPDamnn6quL9TjIrOudqUS5sMilENmP/gfxoCIb+rDmlzawtM7+MVCAWrM9930fzD20N7qAema/zE9QIDuifhQ==",
            "dependencies": {
                "bson": "^4.6.5",
                "kareem": "2.4.1",
                "mongodb": "4.9.1",
                "mpath": "0.9.0",
                "mquery": "4.0.3",
                "ms": "2.1.3",
                "sift": "16.0.0"
            },
            "engines": {
                "node": ">=12.0.0"
            },
            "funding": {
                "type": "opencollective",
                "url": "https://opencollective.com/mongoose"
            }
        },
        "node_modules/mongoose/node_modules/ms": {
            "version": "2.1.3",
            "resolved": "https://registry.npmjs.org/ms/-/ms-2.1.3.tgz",
            "integrity": "sha512-6FlzubTLZG3J2a/NVCAleEhjzq5oxgHyaCU9yYXvcLsvoVaHJq/s5xXI6/XXP6tz7R9xAOtHnSO/tXtF3WRTlA=="
        },
        "node_modules/mpath": {
            "version": "0.9.0",
            "resolved": "https://registry.npmjs.org/mpath/-/mpath-0.9.0.tgz",
            "integrity": "sha512-ikJRQTk8hw5DEoFVxHG1Gn9T/xcjtdnOKIU1JTmGjZZlg9LST2mBLmcX3/ICIbgJydT2GOc15RnNy5mHmzfSew==",
            "engines": {
                "node": ">=4.0.0"
            }
        },
        "node_modules/mquery": {
            "version": "4.0.3",
            "resolved": "https://registry.npmjs.org/mquery/-/mquery-4.0.3.tgz",
            "integrity": "sha512-J5heI+P08I6VJ2Ky3+33IpCdAvlYGTSUjwTPxkAr8i8EoduPMBX2OY/wa3IKZIQl7MU4SbFk8ndgSKyB/cl1zA==",
            "dependencies": {
                "debug": "4.x"
            },
            "engines": {
                "node": ">=12.0.0"
            }
        },
        "node_modules/mquery/node_modules/debug": {
            "version": "4.3.4",
            "resolved": "https://registry.npmjs.org/debug/-/debug-4.3.4.tgz",
            "integrity": "sha512-PRWFHuSU3eDtQJPvnNY7Jcket1j0t5OuOsFzPPzsekD52Zl8qUfFIPEiswXqIvHWGVHOgX+7G/vCNNhehwxfkQ==",
            "dependencies": {
                "ms": "2.1.2"
            },
            "engines": {
                "node": ">=6.0"
            },
            "peerDependenciesMeta": {
                "supports-color": {
                    "optional": true
                }
            }
        },
        "node_modules/mquery/node_modules/ms": {
            "version": "2.1.2",
            "resolved": "https://registry.npmjs.org/ms/-/ms-2.1.2.tgz",
            "integrity": "sha512-sGkPx+VjMtmA6MX27oA4FBFELFCZZ4S4XqeGOXCv68tT+jb3vk/RyaKWP0PTKyWtmLSM0b+adUTEvbs1PEaH2w=="
        },
        "node_modules/ms": {
            "version": "2.0.0",
            "resolved": "https://registry.npmjs.org/ms/-/ms-2.0.0.tgz",
            "integrity": "sha1-VgiurfwAvmwpAd9fmGF4jeDVl8g="
        },
        "node_modules/negotiator": {
            "version": "0.6.3",
            "resolved": "https://registry.npmjs.org/negotiator/-/negotiator-0.6.3.tgz",
            "integrity": "sha512-+EUsqGPLsM+j/zdChZjsnX51g4XrHFOIXwfnCVPGlQk/k5giakcKsuxCObBRu6DSm9opw/O6slWbJdghQM4bBg==",
            "engines": {
                "node": ">= 0.6"
            }
        },
        "node_modules/node-addon-api": {
            "version": "3.2.1",
            "resolved": "https://registry.npmjs.org/node-addon-api/-/node-addon-api-3.2.1.tgz",
            "integrity": "sha512-mmcei9JghVNDYydghQmeDX8KoAm0FAiYyIcUt/N4nhyAipB17pllZQDOJD2fotxABnt4Mdz+dKTO7eftLg4d0A=="
        },
        "node_modules/node-domexception": {
            "version": "1.0.0",
            "resolved": "https://registry.npmjs.org/node-domexception/-/node-domexception-1.0.0.tgz",
            "integrity": "sha512-/jKZoMpw0F8GRwl4/eLROPA3cfcXtLApP0QzLmUT/HuPCZWyB7IY9ZrMeKw2O/nFIqPQB3PVM9aYm0F312AXDQ==",
            "funding": [
                {
                    "type": "github",
                    "url": "https://github.com/sponsors/jimmywarting"
                },
                {
                    "type": "github",
                    "url": "https://paypal.me/jimmywarting"
                }
            ],
            "engines": {
                "node": ">=10.5.0"
            }
        },
        "node_modules/node-fetch": {
            "version": "3.2.10",
            "resolved": "https://registry.npmjs.org/node-fetch/-/node-fetch-3.2.10.tgz",
            "integrity": "sha512-MhuzNwdURnZ1Cp4XTazr69K0BTizsBroX7Zx3UgDSVcZYKF/6p0CBe4EUb/hLqmzVhl0UpYfgRljQ4yxE+iCxA==",
            "dependencies": {
                "data-uri-to-buffer": "^4.0.0",
                "fetch-blob": "^3.1.4",
                "formdata-polyfill": "^4.0.10"
            },
            "engines": {
                "node": "^12.20.0 || ^14.13.1 || >=16.0.0"
            },
            "funding": {
                "type": "opencollective",
                "url": "https://opencollective.com/node-fetch"
            }
        },
        "node_modules/node-forge": {
            "version": "1.3.1",
            "resolved": "https://registry.npmjs.org/node-forge/-/node-forge-1.3.1.tgz",
            "integrity": "sha512-dPEtOeMvF9VMcYV/1Wb8CPoVAXtp6MKMlcbAt4ddqmGqUJ6fQZFXkNZNkNlfevtNkGtaSoXf/vNNNSvgrdXwtA==",
            "engines": {
                "node": ">= 6.13.0"
            }
        },
        "node_modules/nodemailer": {
            "version": "6.7.2",
            "resolved": "https://registry.npmjs.org/nodemailer/-/nodemailer-6.7.2.tgz",
            "integrity": "sha512-Dz7zVwlef4k5R71fdmxwR8Q39fiboGbu3xgswkzGwczUfjp873rVxt1O46+Fh0j1ORnAC6L9+heI8uUpO6DT7Q==",
            "engines": {
                "node": ">=6.0.0"
            }
        },
        "node_modules/nodemon": {
            "version": "2.0.20",
            "resolved": "https://registry.npmjs.org/nodemon/-/nodemon-2.0.20.tgz",
            "integrity": "sha512-Km2mWHKKY5GzRg6i1j5OxOHQtuvVsgskLfigG25yTtbyfRGn/GNvIbRyOf1PSCKJ2aT/58TiuUsuOU5UToVViw==",
            "dependencies": {
                "chokidar": "^3.5.2",
                "debug": "^3.2.7",
                "ignore-by-default": "^1.0.1",
                "minimatch": "^3.1.2",
                "pstree.remy": "^1.1.8",
                "semver": "^5.7.1",
                "simple-update-notifier": "^1.0.7",
                "supports-color": "^5.5.0",
                "touch": "^3.1.0",
                "undefsafe": "^2.0.5"
            },
            "bin": {
                "nodemon": "bin/nodemon.js"
            },
            "engines": {
                "node": ">=8.10.0"
            },
            "funding": {
                "type": "opencollective",
                "url": "https://opencollective.com/nodemon"
            }
        },
        "node_modules/nodemon/node_modules/debug": {
            "version": "3.2.7",
            "resolved": "https://registry.npmjs.org/debug/-/debug-3.2.7.tgz",
            "integrity": "sha512-CFjzYYAi4ThfiQvizrFQevTTXHtnCqWfe7x1AhgEscTz6ZbLbfoLRLPugTQyBth6f8ZERVUSyWHFD/7Wu4t1XQ==",
            "dependencies": {
                "ms": "^2.1.1"
            }
        },
        "node_modules/nodemon/node_modules/ms": {
            "version": "2.1.3",
            "resolved": "https://registry.npmjs.org/ms/-/ms-2.1.3.tgz",
            "integrity": "sha512-6FlzubTLZG3J2a/NVCAleEhjzq5oxgHyaCU9yYXvcLsvoVaHJq/s5xXI6/XXP6tz7R9xAOtHnSO/tXtF3WRTlA=="
        },
        "node_modules/nopt": {
            "version": "1.0.10",
            "resolved": "https://registry.npmjs.org/nopt/-/nopt-1.0.10.tgz",
            "integrity": "sha1-bd0hvSoxQXuScn3Vhfim83YI6+4=",
            "dependencies": {
                "abbrev": "1"
            },
            "bin": {
                "nopt": "bin/nopt.js"
            },
            "engines": {
                "node": "*"
            }
        },
        "node_modules/normalize-path": {
            "version": "3.0.0",
            "resolved": "https://registry.npmjs.org/normalize-path/-/normalize-path-3.0.0.tgz",
            "integrity": "sha512-6eZs5Ls3WtCisHWp9S2GUy8dqkpGi4BVSz3GaqiE6ezub0512ESztXUwUB6C6IKbQkY2Pnb/mD4WYojCRwcwLA==",
            "engines": {
                "node": ">=0.10.0"
            }
        },
        "node_modules/npmlog": {
            "version": "5.0.1",
            "resolved": "https://registry.npmjs.org/npmlog/-/npmlog-5.0.1.tgz",
            "integrity": "sha512-AqZtDUWOMKs1G/8lwylVjrdYgqA4d9nu8hc+0gzRxlDb1I10+FHBGMXs6aiQHFdCUUlqH99MUMuLfzWDNDtfxw==",
            "dependencies": {
                "are-we-there-yet": "^2.0.0",
                "console-control-strings": "^1.1.0",
                "gauge": "^3.0.0",
                "set-blocking": "^2.0.0"
            }
        },
        "node_modules/object-assign": {
            "version": "4.1.1",
            "resolved": "https://registry.npmjs.org/object-assign/-/object-assign-4.1.1.tgz",
            "integrity": "sha1-IQmtx5ZYh8/AXLvUQsrIv7s2CGM=",
            "engines": {
                "node": ">=0.10.0"
            }
        },
        "node_modules/object-inspect": {
            "version": "1.12.2",
            "resolved": "https://registry.npmjs.org/object-inspect/-/object-inspect-1.12.2.tgz",
            "integrity": "sha512-z+cPxW0QGUp0mcqcsgQyLVRDoXFQbXOwBaqyF7VIgI4TWNQsDHrBpUQslRmIfAoYWdYzs6UlKJtB2XJpTaNSpQ==",
            "funding": {
                "url": "https://github.com/sponsors/ljharb"
            }
        },
        "node_modules/on-finished": {
            "version": "2.3.0",
            "resolved": "https://registry.npmjs.org/on-finished/-/on-finished-2.3.0.tgz",
            "integrity": "sha1-IPEzZIGwg811M3mSoWlxqi2QaUc=",
            "dependencies": {
                "ee-first": "1.1.1"
            },
            "engines": {
                "node": ">= 0.8"
            }
        },
        "node_modules/once": {
            "version": "1.4.0",
            "resolved": "https://registry.npmjs.org/once/-/once-1.4.0.tgz",
            "integrity": "sha1-WDsap3WWHUsROsF9nFC6753Xa9E=",
            "dependencies": {
                "wrappy": "1"
            }
        },
        "node_modules/parseurl": {
            "version": "1.3.3",
            "resolved": "https://registry.npmjs.org/parseurl/-/parseurl-1.3.3.tgz",
            "integrity": "sha512-CiyeOxFT/JZyN5m0z9PfXw4SCBJ6Sygz1Dpl0wqjlhDEGGBP1GnsUVEL0p63hoG1fcj3fHynXi9NYO4nWOL+qQ==",
            "engines": {
                "node": ">= 0.8"
            }
        },
        "node_modules/path-is-absolute": {
            "version": "1.0.1",
            "resolved": "https://registry.npmjs.org/path-is-absolute/-/path-is-absolute-1.0.1.tgz",
            "integrity": "sha1-F0uSaHNVNP+8es5r9TpanhtcX18=",
            "engines": {
                "node": ">=0.10.0"
            }
        },
        "node_modules/path-to-regexp": {
            "version": "0.1.7",
            "resolved": "https://registry.npmjs.org/path-to-regexp/-/path-to-regexp-0.1.7.tgz",
            "integrity": "sha1-32BBeABfUi8V60SQ5yR6G/qmf4w="
        },
        "node_modules/picomatch": {
            "version": "2.3.1",
            "resolved": "https://registry.npmjs.org/picomatch/-/picomatch-2.3.1.tgz",
            "integrity": "sha512-JU3teHTNjmE2VCGFzuY8EXzCDVwEqB2a8fsIvwaStHhAWJEeVd1o1QD80CU6+ZdEXXSLbSsuLwJjkCBWqRQUVA==",
            "engines": {
                "node": ">=8.6"
            },
            "funding": {
                "url": "https://github.com/sponsors/jonschlinkert"
            }
        },
        "node_modules/proxy-addr": {
            "version": "2.0.7",
            "resolved": "https://registry.npmjs.org/proxy-addr/-/proxy-addr-2.0.7.tgz",
            "integrity": "sha512-llQsMLSUDUPT44jdrU/O37qlnifitDP+ZwrmmZcoSKyLKvtZxpyV0n2/bD/N4tBAAZ/gJEdZU7KMraoK1+XYAg==",
            "dependencies": {
                "forwarded": "0.2.0",
                "ipaddr.js": "1.9.1"
            },
            "engines": {
                "node": ">= 0.10"
            }
        },
        "node_modules/pstree.remy": {
            "version": "1.1.8",
            "resolved": "https://registry.npmjs.org/pstree.remy/-/pstree.remy-1.1.8.tgz",
            "integrity": "sha512-77DZwxQmxKnu3aR542U+X8FypNzbfJ+C5XQDk3uWjWxn6151aIMGthWYRXTqT1E5oJvg+ljaa2OJi+VfvCOQ8w=="
        },
        "node_modules/punycode": {
            "version": "2.1.1",
            "resolved": "https://registry.npmjs.org/punycode/-/punycode-2.1.1.tgz",
            "integrity": "sha512-XRsRjdf+j5ml+y/6GKHPZbrF/8p2Yga0JPtdqTIY2Xe5ohJPD9saDJJLPvp9+NSBprVvevdXZybnj2cv8OEd0A==",
            "engines": {
                "node": ">=6"
            }
        },
        "node_modules/qs": {
            "version": "6.11.0",
            "resolved": "https://registry.npmjs.org/qs/-/qs-6.11.0.tgz",
            "integrity": "sha512-MvjoMCJwEarSbUYk5O+nmoSzSutSsTwF85zcHPQ9OrlFoZOYIjaqBAJIqIXjptyD5vThxGq52Xu/MaJzRkIk4Q==",
            "dependencies": {
                "side-channel": "^1.0.4"
            },
            "engines": {
                "node": ">=0.6"
            },
            "funding": {
                "url": "https://github.com/sponsors/ljharb"
            }
        },
        "node_modules/range-parser": {
            "version": "1.2.1",
            "resolved": "https://registry.npmjs.org/range-parser/-/range-parser-1.2.1.tgz",
            "integrity": "sha512-Hrgsx+orqoygnmhFbKaHE6c296J+HTAQXoxEF6gNupROmmGJRoyzfG3ccAveqCBrwr/2yxQ5BVd/GTl5agOwSg==",
            "engines": {
                "node": ">= 0.6"
            }
        },
        "node_modules/raw-body": {
            "version": "2.4.3",
            "resolved": "https://registry.npmjs.org/raw-body/-/raw-body-2.4.3.tgz",
            "integrity": "sha512-UlTNLIcu0uzb4D2f4WltY6cVjLi+/jEN4lgEUj3E04tpMDpUlkBo/eSn6zou9hum2VMNpCCUone0O0WeJim07g==",
            "dependencies": {
                "bytes": "3.1.2",
                "http-errors": "1.8.1",
                "iconv-lite": "0.4.24",
                "unpipe": "1.0.0"
            },
            "engines": {
                "node": ">= 0.8"
            }
        },
        "node_modules/readable-stream": {
            "version": "3.6.0",
            "resolved": "https://registry.npmjs.org/readable-stream/-/readable-stream-3.6.0.tgz",
            "integrity": "sha512-BViHy7LKeTz4oNnkcLJ+lVSL6vpiFeX6/d3oSH8zCW7UxP2onchk+vTGB143xuFjHS3deTgkKoXXymXqymiIdA==",
            "dependencies": {
                "inherits": "^2.0.3",
                "string_decoder": "^1.1.1",
                "util-deprecate": "^1.0.1"
            },
            "engines": {
                "node": ">= 6"
            }
        },
        "node_modules/readdirp": {
            "version": "3.6.0",
            "resolved": "https://registry.npmjs.org/readdirp/-/readdirp-3.6.0.tgz",
            "integrity": "sha512-hOS089on8RduqdbhvQ5Z37A0ESjsqz6qnRcffsMU3495FuTdqSm+7bhJ29JvIOsBDEEnan5DPu9t3To9VRlMzA==",
            "dependencies": {
                "picomatch": "^2.2.1"
            },
            "engines": {
                "node": ">=8.10.0"
            }
        },
        "node_modules/redux": {
            "version": "4.1.2",
            "resolved": "https://registry.npmjs.org/redux/-/redux-4.1.2.tgz",
            "integrity": "sha512-SH8PglcebESbd/shgf6mii6EIoRM0zrQyjcuQ+ojmfxjTtE0z9Y8pa62iA/OJ58qjP6j27uyW4kUF4jl/jd6sw==",
            "peer": true,
            "dependencies": {
                "@babel/runtime": "^7.9.2"
            }
        },
        "node_modules/redux-persist": {
            "version": "6.0.0",
            "resolved": "https://registry.npmjs.org/redux-persist/-/redux-persist-6.0.0.tgz",
            "integrity": "sha512-71LLMbUq2r02ng2We9S215LtPu3fY0KgaGE0k8WRgl6RkqxtGfl7HUozz1Dftwsb0D/5mZ8dwAaPbtnzfvbEwQ==",
            "peerDependencies": {
                "redux": ">4.0.0"
            }
        },
        "node_modules/regenerator-runtime": {
            "version": "0.13.9",
            "resolved": "https://registry.npmjs.org/regenerator-runtime/-/regenerator-runtime-0.13.9.tgz",
            "integrity": "sha512-p3VT+cOEgxFsRRA9X4lkI1E+k2/CtnKtU4gcxyaCUreilL/vqI6CdZ3wxVUx3UOUg+gnUOQQcRI7BmSI656MYA==",
            "peer": true
        },
        "node_modules/rimraf": {
            "version": "3.0.2",
            "resolved": "https://registry.npmjs.org/rimraf/-/rimraf-3.0.2.tgz",
            "integrity": "sha512-JZkJMZkAGFFPP2YqXZXPbMlMBgsxzE8ILs4lMIX/2o0L9UBw9O/Y3o6wFw/i9YLapcUJWwqbi3kdxIPdC62TIA==",
            "dependencies": {
                "glob": "^7.1.3"
            },
            "bin": {
                "rimraf": "bin.js"
            },
            "funding": {
                "url": "https://github.com/sponsors/isaacs"
            }
        },
        "node_modules/safe-buffer": {
            "version": "5.2.1",
            "resolved": "https://registry.npmjs.org/safe-buffer/-/safe-buffer-5.2.1.tgz",
            "integrity": "sha512-rp3So07KcdmmKbGvgaNxQSJr7bGVSVk5S9Eq1F+ppbRo70+YeaDxkw5Dd8NPN+GD6bjnYm2VuPuCXmpuYvmCXQ==",
            "funding": [
                {
                    "type": "github",
                    "url": "https://github.com/sponsors/feross"
                },
                {
                    "type": "patreon",
                    "url": "https://www.patreon.com/feross"
                },
                {
                    "type": "consulting",
                    "url": "https://feross.org/support"
                }
            ]
        },
        "node_modules/safer-buffer": {
            "version": "2.1.2",
            "resolved": "https://registry.npmjs.org/safer-buffer/-/safer-buffer-2.1.2.tgz",
            "integrity": "sha512-YZo3K82SD7Riyi0E1EQPojLz7kpepnSQI9IyPbHHg1XXXevb5dJI7tpyN2ADxGcQbHG7vcyRHk0cbwqcQriUtg=="
        },
        "node_modules/saslprep": {
            "version": "1.0.3",
            "resolved": "https://registry.npmjs.org/saslprep/-/saslprep-1.0.3.tgz",
            "integrity": "sha512-/MY/PEMbk2SuY5sScONwhUDsV2p77Znkb/q3nSVstq/yQzYJOH/Azh29p9oJLsl3LnQwSvZDKagDGBsBwSooag==",
            "optional": true,
            "dependencies": {
                "sparse-bitfield": "^3.0.3"
            },
            "engines": {
                "node": ">=6"
            }
        },
        "node_modules/semver": {
            "version": "5.7.1",
            "resolved": "https://registry.npmjs.org/semver/-/semver-5.7.1.tgz",
            "integrity": "sha512-sauaDf/PZdVgrLTNYHRtpXa1iRiKcaebiKQ1BJdpQlWH2lCvexQdX55snPFyK7QzpudqbCI0qXFfOasHdyNDGQ==",
            "bin": {
                "semver": "bin/semver"
            }
        },
        "node_modules/send": {
            "version": "0.17.2",
            "resolved": "https://registry.npmjs.org/send/-/send-0.17.2.tgz",
            "integrity": "sha512-UJYB6wFSJE3G00nEivR5rgWp8c2xXvJ3OPWPhmuteU0IKj8nKbG3DrjiOmLwpnHGYWAVwA69zmTm++YG0Hmwww==",
            "dependencies": {
                "debug": "2.6.9",
                "depd": "~1.1.2",
                "destroy": "~1.0.4",
                "encodeurl": "~1.0.2",
                "escape-html": "~1.0.3",
                "etag": "~1.8.1",
                "fresh": "0.5.2",
                "http-errors": "1.8.1",
                "mime": "1.6.0",
                "ms": "2.1.3",
                "on-finished": "~2.3.0",
                "range-parser": "~1.2.1",
                "statuses": "~1.5.0"
            },
            "engines": {
                "node": ">= 0.8.0"
            }
        },
        "node_modules/send/node_modules/ms": {
            "version": "2.1.3",
            "resolved": "https://registry.npmjs.org/ms/-/ms-2.1.3.tgz",
            "integrity": "sha512-6FlzubTLZG3J2a/NVCAleEhjzq5oxgHyaCU9yYXvcLsvoVaHJq/s5xXI6/XXP6tz7R9xAOtHnSO/tXtF3WRTlA=="
        },
        "node_modules/serve-static": {
            "version": "1.14.2",
            "resolved": "https://registry.npmjs.org/serve-static/-/serve-static-1.14.2.tgz",
            "integrity": "sha512-+TMNA9AFxUEGuC0z2mevogSnn9MXKb4fa7ngeRMJaaGv8vTwnIEkKi+QGvPt33HSnf8pRS+WGM0EbMtCJLKMBQ==",
            "dependencies": {
                "encodeurl": "~1.0.2",
                "escape-html": "~1.0.3",
                "parseurl": "~1.3.3",
                "send": "0.17.2"
            },
            "engines": {
                "node": ">= 0.8.0"
            }
        },
        "node_modules/set-blocking": {
            "version": "2.0.0",
            "resolved": "https://registry.npmjs.org/set-blocking/-/set-blocking-2.0.0.tgz",
            "integrity": "sha1-BF+XgtARrppoA93TgrJDkrPYkPc="
        },
        "node_modules/setprototypeof": {
            "version": "1.2.0",
            "resolved": "https://registry.npmjs.org/setprototypeof/-/setprototypeof-1.2.0.tgz",
            "integrity": "sha512-E5LDX7Wrp85Kil5bhZv46j8jOeboKq5JMmYM3gVGdGH8xFpPWXUMsNrlODCrkoxMEeNi/XZIwuRvY4XNwYMJpw=="
        },
        "node_modules/side-channel": {
            "version": "1.0.4",
            "resolved": "https://registry.npmjs.org/side-channel/-/side-channel-1.0.4.tgz",
            "integrity": "sha512-q5XPytqFEIKHkGdiMIrY10mvLRvnQh42/+GoBlFW3b2LXLE2xxJpZFdm94we0BaoV3RwJyGqg5wS7epxTv0Zvw==",
            "dependencies": {
                "call-bind": "^1.0.0",
                "get-intrinsic": "^1.0.2",
                "object-inspect": "^1.9.0"
            },
            "funding": {
                "url": "https://github.com/sponsors/ljharb"
            }
        },
        "node_modules/sift": {
            "version": "16.0.0",
            "resolved": "https://registry.npmjs.org/sift/-/sift-16.0.0.tgz",
            "integrity": "sha512-ILTjdP2Mv9V1kIxWMXeMTIRbOBrqKc4JAXmFMnFq3fKeyQ2Qwa3Dw1ubcye3vR+Y6ofA0b9gNDr/y2t6eUeIzQ=="
        },
        "node_modules/signal-exit": {
            "version": "3.0.7",
            "resolved": "https://registry.npmjs.org/signal-exit/-/signal-exit-3.0.7.tgz",
            "integrity": "sha512-wnD2ZE+l+SPC/uoS0vXeE9L1+0wuaMqKlfz9AMUo38JsyLSBWSFcHR1Rri62LZc12vLr1gb3jl7iwQhgwpAbGQ=="
        },
        "node_modules/simple-update-notifier": {
            "version": "1.0.7",
            "resolved": "https://registry.npmjs.org/simple-update-notifier/-/simple-update-notifier-1.0.7.tgz",
            "integrity": "sha512-BBKgR84BJQJm6WjWFMHgLVuo61FBDSj1z/xSFUIozqO6wO7ii0JxCqlIud7Enr/+LhlbNI0whErq96P2qHNWew==",
            "dependencies": {
                "semver": "~7.0.0"
            },
            "engines": {
                "node": ">=8.10.0"
            }
        },
        "node_modules/simple-update-notifier/node_modules/semver": {
            "version": "7.0.0",
            "resolved": "https://registry.npmjs.org/semver/-/semver-7.0.0.tgz",
            "integrity": "sha512-+GB6zVA9LWh6zovYQLALHwv5rb2PHGlJi3lfiqIHxR0uuwCgefcOJc59v9fv1w8GbStwxuuqqAjI9NMAOOgq1A==",
            "bin": {
                "semver": "bin/semver.js"
            }
        },
        "node_modules/smart-buffer": {
            "version": "4.2.0",
            "resolved": "https://registry.npmjs.org/smart-buffer/-/smart-buffer-4.2.0.tgz",
            "integrity": "sha512-94hK0Hh8rPqQl2xXc3HsaBoOXKV20MToPkcXvwbISWLEs+64sBq5kFgn2kJDHb1Pry9yrP0dxrCI9RRci7RXKg==",
            "engines": {
                "node": ">= 6.0.0",
                "npm": ">= 3.0.0"
            }
        },
        "node_modules/socks": {
            "version": "2.7.0",
            "resolved": "https://registry.npmjs.org/socks/-/socks-2.7.0.tgz",
            "integrity": "sha512-scnOe9y4VuiNUULJN72GrM26BNOjVsfPXI+j+98PkyEfsIXroa5ofyjT+FzGvn/xHs73U2JtoBYAVx9Hl4quSA==",
            "dependencies": {
                "ip": "^2.0.0",
                "smart-buffer": "^4.2.0"
            },
            "engines": {
                "node": ">= 10.13.0",
                "npm": ">= 3.0.0"
            }
        },
        "node_modules/sparse-bitfield": {
            "version": "3.0.3",
            "resolved": "https://registry.npmjs.org/sparse-bitfield/-/sparse-bitfield-3.0.3.tgz",
            "integrity": "sha512-kvzhi7vqKTfkh0PZU+2D2PIllw2ymqJKujUcyPMd9Y75Nv4nPbGJZXNhxsgdQab2BmlDct1YnfQCguEvHr7VsQ==",
            "optional": true,
            "dependencies": {
                "memory-pager": "^1.0.2"
            }
        },
        "node_modules/statuses": {
            "version": "1.5.0",
            "resolved": "https://registry.npmjs.org/statuses/-/statuses-1.5.0.tgz",
            "integrity": "sha1-Fhx9rBd2Wf2YEfQ3cfqZOBR4Yow=",
            "engines": {
                "node": ">= 0.6"
            }
        },
        "node_modules/string_decoder": {
            "version": "1.3.0",
            "resolved": "https://registry.npmjs.org/string_decoder/-/string_decoder-1.3.0.tgz",
            "integrity": "sha512-hkRX8U1WjJFd8LsDJ2yQ/wWWxaopEsABU1XfkM8A+j0+85JAGppt16cr1Whg6KIbb4okU6Mql6BOj+uup/wKeA==",
            "dependencies": {
                "safe-buffer": "~5.2.0"
            }
        },
        "node_modules/string-width": {
            "version": "4.2.3",
            "resolved": "https://registry.npmjs.org/string-width/-/string-width-4.2.3.tgz",
            "integrity": "sha512-wKyQRQpjJ0sIp62ErSZdGsjMJWsap5oRNihHhu6G7JVO/9jIB6UyevL+tXuOqrng8j/cxKTWyWUwvSTriiZz/g==",
            "dependencies": {
                "emoji-regex": "^8.0.0",
                "is-fullwidth-code-point": "^3.0.0",
                "strip-ansi": "^6.0.1"
            },
            "engines": {
                "node": ">=8"
            }
        },
        "node_modules/strip-ansi": {
            "version": "6.0.1",
            "resolved": "https://registry.npmjs.org/strip-ansi/-/strip-ansi-6.0.1.tgz",
            "integrity": "sha512-Y38VPSHcqkFrCpFnQ9vuSXmquuv5oXOKpGeT6aGrr3o3Gc9AlVa6JBfUSOCnbxGGZF+/0ooI7KrPuUSztUdU5A==",
            "dependencies": {
                "ansi-regex": "^5.0.1"
            },
            "engines": {
                "node": ">=8"
            }
        },
        "node_modules/supports-color": {
            "version": "5.5.0",
            "resolved": "https://registry.npmjs.org/supports-color/-/supports-color-5.5.0.tgz",
            "integrity": "sha512-QjVjwdXIt408MIiAqCX4oUKsgU2EqAGzs2Ppkm4aQYbjm+ZEWEcW4SfFNTr4uMNZma0ey4f5lgLrkB0aX0QMow==",
            "dependencies": {
                "has-flag": "^3.0.0"
            },
            "engines": {
                "node": ">=4"
            }
        },
        "node_modules/tar": {
            "version": "6.1.11",
            "resolved": "https://registry.npmjs.org/tar/-/tar-6.1.11.tgz",
            "integrity": "sha512-an/KZQzQUkZCkuoAA64hM92X0Urb6VpRhAFllDzz44U2mcD5scmT3zBc4VgVpkugF580+DQn8eAFSyoQt0tznA==",
            "dependencies": {
                "chownr": "^2.0.0",
                "fs-minipass": "^2.0.0",
                "minipass": "^3.0.0",
                "minizlib": "^2.1.1",
                "mkdirp": "^1.0.3",
                "yallist": "^4.0.0"
            },
            "engines": {
                "node": ">= 10"
            }
        },
        "node_modules/to-regex-range": {
            "version": "5.0.1",
            "resolved": "https://registry.npmjs.org/to-regex-range/-/to-regex-range-5.0.1.tgz",
            "integrity": "sha512-65P7iz6X5yEr1cwcgvQxbbIw7Uk3gOy5dIdtZ4rDveLqhrdJP+Li/Hx6tyK0NEb+2GCyneCMJiGqrADCSNk8sQ==",
            "dependencies": {
                "is-number": "^7.0.0"
            },
            "engines": {
                "node": ">=8.0"
            }
        },
        "node_modules/toidentifier": {
            "version": "1.0.1",
            "resolved": "https://registry.npmjs.org/toidentifier/-/toidentifier-1.0.1.tgz",
            "integrity": "sha512-o5sSPKEkg/DIQNmH43V0/uerLrpzVedkUh8tGNvaeXpfpuwjKenlSox/2O/BTlZUtEe+JG7s5YhEz608PlAHRA==",
            "engines": {
                "node": ">=0.6"
            }
        },
        "node_modules/touch": {
            "version": "3.1.0",
            "resolved": "https://registry.npmjs.org/touch/-/touch-3.1.0.tgz",
            "integrity": "sha512-WBx8Uy5TLtOSRtIq+M03/sKDrXCLHxwDcquSP2c43Le03/9serjQBIztjRz6FkJez9D/hleyAXTBGLwwZUw9lA==",
            "dependencies": {
                "nopt": "~1.0.10"
            },
            "bin": {
                "nodetouch": "bin/nodetouch.js"
            }
        },
        "node_modules/tr46": {
            "version": "3.0.0",
            "resolved": "https://registry.npmjs.org/tr46/-/tr46-3.0.0.tgz",
            "integrity": "sha512-l7FvfAHlcmulp8kr+flpQZmVwtu7nfRV7NZujtN0OqES8EL4O4e0qqzL0DC5gAvx/ZC/9lk6rhcUwYvkBnBnYA==",
            "dependencies": {
                "punycode": "^2.1.1"
            },
            "engines": {
                "node": ">=12"
            }
        },
        "node_modules/type-is": {
            "version": "1.6.18",
            "resolved": "https://registry.npmjs.org/type-is/-/type-is-1.6.18.tgz",
            "integrity": "sha512-TkRKr9sUTxEH8MdfuCSP7VizJyzRNMjj2J2do2Jr3Kym598JVdEksuzPQCnlFPW4ky9Q+iA+ma9BGm06XQBy8g==",
            "dependencies": {
                "media-typer": "0.3.0",
                "mime-types": "~2.1.24"
            },
            "engines": {
                "node": ">= 0.6"
            }
        },
        "node_modules/undefsafe": {
            "version": "2.0.5",
            "resolved": "https://registry.npmjs.org/undefsafe/-/undefsafe-2.0.5.tgz",
            "integrity": "sha512-WxONCrssBM8TSPRqN5EmsjVrsv4A8X12J4ArBiiayv3DyyG3ZlIg6yysuuSYdZsVz3TKcTg2fd//Ujd4CHV1iA=="
        },
        "node_modules/unpipe": {
            "version": "1.0.0",
            "resolved": "https://registry.npmjs.org/unpipe/-/unpipe-1.0.0.tgz",
            "integrity": "sha1-sr9O6FFKrmFltIF4KdIbLvSZBOw=",
            "engines": {
                "node": ">= 0.8"
            }
        },
        "node_modules/url-template": {
            "version": "2.0.8",
            "resolved": "https://registry.npmjs.org/url-template/-/url-template-2.0.8.tgz",
            "integrity": "sha512-XdVKMF4SJ0nP/O7XIPB0JwAEuT9lDIYnNsK8yGVe43y0AWoKeJNdv3ZNWh7ksJ6KqQFjOO6ox/VEitLnaVNufw=="
        },
        "node_modules/util-deprecate": {
            "version": "1.0.2",
            "resolved": "https://registry.npmjs.org/util-deprecate/-/util-deprecate-1.0.2.tgz",
            "integrity": "sha1-RQ1Nyfpw3nMnYvvS1KKJgUGaDM8="
        },
        "node_modules/utils-merge": {
            "version": "1.0.1",
            "resolved": "https://registry.npmjs.org/utils-merge/-/utils-merge-1.0.1.tgz",
            "integrity": "sha1-n5VxD1CiZ5R7LMwSR0HBAoQn5xM=",
            "engines": {
                "node": ">= 0.4.0"
            }
        },
        "node_modules/uuid": {
            "version": "9.0.0",
            "resolved": "https://registry.npmjs.org/uuid/-/uuid-9.0.0.tgz",
            "integrity": "sha512-MXcSTerfPa4uqyzStbRoTgt5XIe3x5+42+q1sDuy3R5MDk66URdLMOZe5aPX/SQd+kuYAh0FdP/pO28IkQyTeg==",
            "bin": {
                "uuid": "dist/bin/uuid"
            }
        },
        "node_modules/vary": {
            "version": "1.1.2",
            "resolved": "https://registry.npmjs.org/vary/-/vary-1.1.2.tgz",
            "integrity": "sha1-IpnwLG3tMNSllhsLn3RSShj2NPw=",
            "engines": {
                "node": ">= 0.8"
            }
        },
        "node_modules/web-streams-polyfill": {
            "version": "3.2.0",
            "resolved": "https://registry.npmjs.org/web-streams-polyfill/-/web-streams-polyfill-3.2.0.tgz",
            "integrity": "sha512-EqPmREeOzttaLRm5HS7io98goBgZ7IVz79aDvqjD0kYXLtFZTc0T/U6wHTPKyIjb+MdN7DFIIX6hgdBEpWmfPA==",
            "engines": {
                "node": ">= 8"
            }
        },
        "node_modules/webidl-conversions": {
            "version": "7.0.0",
            "resolved": "https://registry.npmjs.org/webidl-conversions/-/webidl-conversions-7.0.0.tgz",
            "integrity": "sha512-VwddBukDzu71offAQR975unBIGqfKZpM+8ZX6ySk8nYhVoo5CYaZyzt3YBvYtRtO+aoGlqxPg/B87NGVZ/fu6g==",
            "engines": {
                "node": ">=12"
            }
        },
        "node_modules/whatwg-url": {
            "version": "11.0.0",
            "resolved": "https://registry.npmjs.org/whatwg-url/-/whatwg-url-11.0.0.tgz",
            "integrity": "sha512-RKT8HExMpoYx4igMiVMY83lN6UeITKJlBQ+vR/8ZJ8OCdSiN3RwCq+9gH0+Xzj0+5IrM6i4j/6LuvzbZIQgEcQ==",
            "dependencies": {
                "tr46": "^3.0.0",
                "webidl-conversions": "^7.0.0"
            },
            "engines": {
                "node": ">=12"
            }
        },
        "node_modules/wide-align": {
            "version": "1.1.5",
            "resolved": "https://registry.npmjs.org/wide-align/-/wide-align-1.1.5.tgz",
            "integrity": "sha512-eDMORYaPNZ4sQIuuYPDHdQvf4gyCF9rEEV/yPxGfwPkRodwEgiMUUXTx/dex+Me0wxx53S+NgUHaP7y3MGlDmg==",
            "dependencies": {
                "string-width": "^1.0.2 || 2 || 3 || 4"
            }
        },
        "node_modules/wrappy": {
            "version": "1.0.2",
            "resolved": "https://registry.npmjs.org/wrappy/-/wrappy-1.0.2.tgz",
            "integrity": "sha1-tSQ9jz7BqjXxNkYFvA0QNuMKtp8="
        },
        "node_modules/yallist": {
            "version": "4.0.0",
            "resolved": "https://registry.npmjs.org/yallist/-/yallist-4.0.0.tgz",
            "integrity": "sha512-3wdGidZyq5PB084XLES5TpOSRA3wjXAlIWMhum2kRcv/41Sn2emQ0dycQW4uZXLejwKvg6EsvbdlVL+FYEct7A=="
        }
    },
    "dependencies": {
        "@babel/runtime": {
            "version": "7.17.2",
            "resolved": "https://registry.npmjs.org/@babel/runtime/-/runtime-7.17.2.tgz",
            "integrity": "sha512-hzeyJyMA1YGdJTuWU0e/j4wKXrU4OMFvY2MSlaI9B7VQb0r5cxTE3EAIS2Q7Tn2RIcDkRvTA/v2JsAEhxe99uw==",
            "peer": true,
            "requires": {
                "regenerator-runtime": "^0.13.4"
            }
        },
        "@mapbox/node-pre-gyp": {
            "version": "1.0.8",
            "resolved": "https://registry.npmjs.org/@mapbox/node-pre-gyp/-/node-pre-gyp-1.0.8.tgz",
            "integrity": "sha512-CMGKi28CF+qlbXh26hDe6NxCd7amqeAzEqnS6IHeO6LoaKyM/n+Xw3HT1COdq8cuioOdlKdqn/hCmqPUOMOywg==",
            "requires": {
                "detect-libc": "^1.0.3",
                "https-proxy-agent": "^5.0.0",
                "make-dir": "^3.1.0",
                "node-fetch": "^2.6.5",
                "nopt": "^5.0.0",
                "npmlog": "^5.0.1",
                "rimraf": "^3.0.2",
                "semver": "^7.3.5",
                "tar": "^6.1.11"
            },
            "dependencies": {
                "node-fetch": {
                    "version": "2.6.7",
                    "resolved": "https://registry.npmjs.org/node-fetch/-/node-fetch-2.6.7.tgz",
                    "integrity": "sha512-ZjMPFEfVx5j+y2yF35Kzx5sF7kDzxuDj6ziH4FFbOp87zKDZNx8yExJIb05OGF4Nlt9IHFIMBkRl41VdvcNdbQ==",
                    "requires": {
                        "whatwg-url": "^5.0.0"
                    }
                },
                "nopt": {
                    "version": "5.0.0",
                    "resolved": "https://registry.npmjs.org/nopt/-/nopt-5.0.0.tgz",
                    "integrity": "sha512-Tbj67rffqceeLpcRXrT7vKAN8CwfPeIBgM7E6iBkmKLV7bEMwpGgYLGv0jACUsECaa/vuxP0IjEont6umdMgtQ==",
                    "requires": {
                        "abbrev": "1"
                    }
                },
                "semver": {
                    "version": "7.3.5",
                    "resolved": "https://registry.npmjs.org/semver/-/semver-7.3.5.tgz",
                    "integrity": "sha512-PoeGJYh8HK4BTO/a9Tf6ZG3veo/A7ZVsYrSA6J8ny9nb3B1VrpkuN+z9OE5wfE5p6H4LchYZsegiQgbJD94ZFQ==",
                    "requires": {
                        "lru-cache": "^6.0.0"
                    }
                },
                "tr46": {
                    "version": "0.0.3",
                    "resolved": "https://registry.npmjs.org/tr46/-/tr46-0.0.3.tgz",
                    "integrity": "sha1-gYT9NH2snNwYWZLzpmIuFLnZq2o="
                },
                "webidl-conversions": {
                    "version": "3.0.1",
                    "resolved": "https://registry.npmjs.org/webidl-conversions/-/webidl-conversions-3.0.1.tgz",
                    "integrity": "sha1-JFNCdeKnvGvnvIZhHMFq4KVlSHE="
                },
                "whatwg-url": {
                    "version": "5.0.0",
                    "resolved": "https://registry.npmjs.org/whatwg-url/-/whatwg-url-5.0.0.tgz",
                    "integrity": "sha1-lmRU6HZUYuN2RNNib2dCzotwll0=",
                    "requires": {
                        "tr46": "~0.0.3",
                        "webidl-conversions": "^3.0.0"
                    }
                }
            }
        },
        "@types/node": {
            "version": "18.7.18",
            "resolved": "https://registry.npmjs.org/@types/node/-/node-18.7.18.tgz",
            "integrity": "sha512-m+6nTEOadJZuTPkKR/SYK3A2d7FZrgElol9UP1Kae90VVU4a6mxnPuLiIW1m4Cq4gZ/nWb9GrdVXJCoCazDAbg=="
        },
        "@types/webidl-conversions": {
            "version": "7.0.0",
            "resolved": "https://registry.npmjs.org/@types/webidl-conversions/-/webidl-conversions-7.0.0.tgz",
            "integrity": "sha512-xTE1E+YF4aWPJJeUzaZI5DRntlkY3+BCVJi0axFptnjGmAoWxkyREIh/XMrfxVLejwQxMCfDXdICo0VLxThrog=="
        },
        "@types/whatwg-url": {
            "version": "8.2.2",
            "resolved": "https://registry.npmjs.org/@types/whatwg-url/-/whatwg-url-8.2.2.tgz",
            "integrity": "sha512-FtQu10RWgn3D9U4aazdwIE2yzphmTJREDqNdODHrbrZmmMqI0vMheC/6NE/J1Yveaj8H+ela+YwWTjq5PGmuhA==",
            "requires": {
                "@types/node": "*",
                "@types/webidl-conversions": "*"
            }
        },
        "abbrev": {
            "version": "1.1.1",
            "resolved": "https://registry.npmjs.org/abbrev/-/abbrev-1.1.1.tgz",
            "integrity": "sha512-nne9/IiQ/hzIhY6pdDnbBtz7DjPTKrY00P/zvPSm5pOFkl6xuGrGnXn/VtTNNfNtAfZ9/1RtehkszU9qcTii0Q=="
        },
        "accepts": {
            "version": "1.3.8",
            "resolved": "https://registry.npmjs.org/accepts/-/accepts-1.3.8.tgz",
            "integrity": "sha512-PYAthTa2m2VKxuvSD3DPC/Gy+U+sOA1LAuT8mkmRuvw+NACSaeXEQ+NHcVF7rONl6qcaxV3Uuemwawk+7+SJLw==",
            "requires": {
                "mime-types": "~2.1.34",
                "negotiator": "0.6.3"
            }
        },
        "agent-base": {
            "version": "6.0.2",
            "resolved": "https://registry.npmjs.org/agent-base/-/agent-base-6.0.2.tgz",
            "integrity": "sha512-RZNwNclF7+MS/8bDg70amg32dyeZGZxiDuQmZxKLAlQjr3jGyLx+4Kkk58UO7D2QdgFIQCovuSuZESne6RG6XQ==",
            "requires": {
                "debug": "4"
            },
            "dependencies": {
                "debug": {
                    "version": "4.3.3",
                    "resolved": "https://registry.npmjs.org/debug/-/debug-4.3.3.tgz",
                    "integrity": "sha512-/zxw5+vh1Tfv+4Qn7a5nsbcJKPaSvCDhojn6FEl9vupwK2VCSDtEiEtqr8DFtzYFOdz63LBkxec7DYuc2jon6Q==",
                    "requires": {
                        "ms": "2.1.2"
                    }
                },
                "ms": {
                    "version": "2.1.2",
                    "resolved": "https://registry.npmjs.org/ms/-/ms-2.1.2.tgz",
                    "integrity": "sha512-sGkPx+VjMtmA6MX27oA4FBFELFCZZ4S4XqeGOXCv68tT+jb3vk/RyaKWP0PTKyWtmLSM0b+adUTEvbs1PEaH2w=="
                }
            }
        },
        "ansi-regex": {
            "version": "5.0.1",
            "resolved": "https://registry.npmjs.org/ansi-regex/-/ansi-regex-5.0.1.tgz",
            "integrity": "sha512-quJQXlTSUGL2LH9SUXo8VwsY4soanhgo6LNSm84E1LBcE8s3O0wpdiRzyR9z/ZZJMlMWv37qOOb9pdJlMUEKFQ=="
        },
        "anymatch": {
            "version": "3.1.2",
            "resolved": "https://registry.npmjs.org/anymatch/-/anymatch-3.1.2.tgz",
            "integrity": "sha512-P43ePfOAIupkguHUycrc4qJ9kz8ZiuOUijaETwX7THt0Y/GNK7v0aa8rY816xWjZ7rJdA5XdMcpVFTKMq+RvWg==",
            "requires": {
                "normalize-path": "^3.0.0",
                "picomatch": "^2.0.4"
            }
        },
        "aproba": {
            "version": "2.0.0",
            "resolved": "https://registry.npmjs.org/aproba/-/aproba-2.0.0.tgz",
            "integrity": "sha512-lYe4Gx7QT+MKGbDsA+Z+he/Wtef0BiwDOlK/XkBrdfsh9J/jPPXbX0tE9x9cl27Tmu5gg3QUbUrQYa/y+KOHPQ=="
        },
        "are-we-there-yet": {
            "version": "2.0.0",
            "resolved": "https://registry.npmjs.org/are-we-there-yet/-/are-we-there-yet-2.0.0.tgz",
            "integrity": "sha512-Ci/qENmwHnsYo9xKIcUJN5LeDKdJ6R1Z1j9V/J5wyq8nh/mYPEpIKJbBZXtZjG04HiK7zV/p6Vs9952MrMeUIw==",
            "requires": {
                "delegates": "^1.0.0",
                "readable-stream": "^3.6.0"
            }
        },
        "array-flatten": {
            "version": "1.1.1",
            "resolved": "https://registry.npmjs.org/array-flatten/-/array-flatten-1.1.1.tgz",
            "integrity": "sha1-ml9pkFGx5wczKPKgCJaLZOopVdI="
        },
        "arrify": {
            "version": "2.0.1",
            "resolved": "https://registry.npmjs.org/arrify/-/arrify-2.0.1.tgz",
            "integrity": "sha512-3duEwti880xqi4eAMN8AyR4a0ByT90zoYdLlevfrvU43vb0YZwZVfxOgxWrLXXXpyugL0hNZc9G6BiB5B3nUug=="
        },
        "balanced-match": {
            "version": "1.0.2",
            "resolved": "https://registry.npmjs.org/balanced-match/-/balanced-match-1.0.2.tgz",
            "integrity": "sha512-3oSeUO0TMV67hN1AmbXsK4yaqU7tjiHlbxRDZOpH0KW9+CeX4bRAaX0Anxt0tx2MrpRpWwQaPwIlISEJhYU5Pw=="
        },
        "base64-js": {
            "version": "1.5.1",
            "resolved": "https://registry.npmjs.org/base64-js/-/base64-js-1.5.1.tgz",
            "integrity": "sha512-AKpaYlHn8t4SVbOHCy+b5+KKgvR4vrsD8vbvrbiQJps7fKDTkjkDry6ji0rUJjC0kzbNePLwzxq8iypo41qeWA=="
        },
        "bcrypt": {
            "version": "5.0.1",
            "resolved": "https://registry.npmjs.org/bcrypt/-/bcrypt-5.0.1.tgz",
            "integrity": "sha512-9BTgmrhZM2t1bNuDtrtIMVSmmxZBrJ71n8Wg+YgdjHuIWYF7SjjmCPZFB+/5i/o/PIeRpwVJR3P+NrpIItUjqw==",
            "requires": {
                "@mapbox/node-pre-gyp": "^1.0.0",
                "node-addon-api": "^3.1.0"
            }
        },
        "bignumber.js": {
            "version": "9.1.0",
            "resolved": "https://registry.npmjs.org/bignumber.js/-/bignumber.js-9.1.0.tgz",
            "integrity": "sha512-4LwHK4nfDOraBCtst+wOWIHbu1vhvAPJK8g8nROd4iuc3PSEjWif/qwbkh8jwCJz6yDBvtU4KPynETgrfh7y3A=="
        },
        "binary-extensions": {
            "version": "2.2.0",
            "resolved": "https://registry.npmjs.org/binary-extensions/-/binary-extensions-2.2.0.tgz",
            "integrity": "sha512-jDctJ/IVQbZoJykoeHbhXpOlNBqGNcwXJKJog42E5HDPUwQTSdjCHdihjj0DlnheQ7blbT6dHOafNAiS8ooQKA=="
        },
        "body-parser": {
            "version": "1.19.2",
            "resolved": "https://registry.npmjs.org/body-parser/-/body-parser-1.19.2.tgz",
            "integrity": "sha512-SAAwOxgoCKMGs9uUAUFHygfLAyaniaoun6I8mFY9pRAJL9+Kec34aU+oIjDhTycub1jozEfEwx1W1IuOYxVSFw==",
            "requires": {
                "bytes": "3.1.2",
                "content-type": "~1.0.4",
                "debug": "2.6.9",
                "depd": "~1.1.2",
                "http-errors": "1.8.1",
                "iconv-lite": "0.4.24",
                "on-finished": "~2.3.0",
                "qs": "6.9.7",
                "raw-body": "2.4.3",
                "type-is": "~1.6.18"
            },
            "dependencies": {
                "qs": {
                    "version": "6.9.7",
                    "resolved": "https://registry.npmjs.org/qs/-/qs-6.9.7.tgz",
                    "integrity": "sha512-IhMFgUmuNpyRfxA90umL7ByLlgRXu6tIfKPpF5TmcfRLlLCckfP/g3IQmju6jjpu+Hh8rA+2p6A27ZSPOOHdKw=="
                }
            }
        },
        "brace-expansion": {
            "version": "1.1.11",
            "resolved": "https://registry.npmjs.org/brace-expansion/-/brace-expansion-1.1.11.tgz",
            "integrity": "sha512-iCuPHDFgrHX7H2vEI/5xpz07zSHB00TpugqhmYtVmMO6518mCuRMoOYFldEBl0g187ufozdaHgWKcYFb61qGiA==",
            "requires": {
                "balanced-match": "^1.0.0",
                "concat-map": "0.0.1"
            }
        },
        "braces": {
            "version": "3.0.2",
            "resolved": "https://registry.npmjs.org/braces/-/braces-3.0.2.tgz",
            "integrity": "sha512-b8um+L1RzM3WDSzvhm6gIz1yfTbBt6YTlcEKAvsmqCZZFw46z626lVj9j1yEPW33H5H+lBQpZMP1k8l+78Ha0A==",
            "requires": {
                "fill-range": "^7.0.1"
            }
        },
        "bson": {
            "version": "4.7.0",
            "resolved": "https://registry.npmjs.org/bson/-/bson-4.7.0.tgz",
            "integrity": "sha512-VrlEE4vuiO1WTpfof4VmaVolCVYkYTgB9iWgYNOrVlnifpME/06fhFRmONgBhClD5pFC1t9ZWqFUQEQAzY43bA==",
            "requires": {
                "buffer": "^5.6.0"
            }
        },
        "buffer": {
            "version": "5.7.1",
            "resolved": "https://registry.npmjs.org/buffer/-/buffer-5.7.1.tgz",
            "integrity": "sha512-EHcyIPBQ4BSGlvjB16k5KgAJ27CIsHY/2JBmCRReo48y9rQ3MaUzWX3KVlBa4U7MyX02HdVj0K7C3WaB3ju7FQ==",
            "requires": {
                "base64-js": "^1.3.1",
                "ieee754": "^1.1.13"
            }
        },
        "buffer-equal-constant-time": {
            "version": "1.0.1",
            "resolved": "https://registry.npmjs.org/buffer-equal-constant-time/-/buffer-equal-constant-time-1.0.1.tgz",
            "integrity": "sha1-+OcRMvf/5uAaXJaXpMbz5I1cyBk="
        },
        "bytes": {
            "version": "3.1.2",
            "resolved": "https://registry.npmjs.org/bytes/-/bytes-3.1.2.tgz",
            "integrity": "sha512-/Nf7TyzTx6S3yRJObOAV7956r8cr2+Oj8AC5dt8wSP3BQAoeX58NoHyCU8P8zGkNXStjTSi6fzO6F0pBdcYbEg=="
        },
        "call-bind": {
            "version": "1.0.2",
            "resolved": "https://registry.npmjs.org/call-bind/-/call-bind-1.0.2.tgz",
            "integrity": "sha512-7O+FbCihrB5WGbFYesctwmTKae6rOiIzmz1icreWJ+0aA7LJfuqhEso2T9ncpcFtzMQtzXf2QGGueWJGTYsqrA==",
            "requires": {
                "function-bind": "^1.1.1",
                "get-intrinsic": "^1.0.2"
            }
        },
        "chokidar": {
            "version": "3.5.3",
            "resolved": "https://registry.npmjs.org/chokidar/-/chokidar-3.5.3.tgz",
            "integrity": "sha512-Dr3sfKRP6oTcjf2JmUmFJfeVMvXBdegxB0iVQ5eb2V10uFJUCAS8OByZdVAyVb8xXNz3GjjTgj9kLWsZTqE6kw==",
            "requires": {
                "anymatch": "~3.1.2",
                "braces": "~3.0.2",
                "fsevents": "~2.3.2",
                "glob-parent": "~5.1.2",
                "is-binary-path": "~2.1.0",
                "is-glob": "~4.0.1",
                "normalize-path": "~3.0.0",
                "readdirp": "~3.6.0"
            }
        },
        "chownr": {
            "version": "2.0.0",
            "resolved": "https://registry.npmjs.org/chownr/-/chownr-2.0.0.tgz",
            "integrity": "sha512-bIomtDF5KGpdogkLd9VspvFzk9KfpyyGlS8YFVZl7TGPBHL5snIOnxeshwVgPteQ9b4Eydl+pVbIyE1DcvCWgQ=="
        },
        "color-support": {
            "version": "1.1.3",
            "resolved": "https://registry.npmjs.org/color-support/-/color-support-1.1.3.tgz",
            "integrity": "sha512-qiBjkpbMLO/HL68y+lh4q0/O1MZFj2RX6X/KmMa3+gJD3z+WwI1ZzDHysvqHGS3mP6mznPckpXmw1nI9cJjyRg=="
        },
        "concat-map": {
            "version": "0.0.1",
            "resolved": "https://registry.npmjs.org/concat-map/-/concat-map-0.0.1.tgz",
            "integrity": "sha1-2Klr13/Wjfd5OnMDajug1UBdR3s="
        },
        "console-control-strings": {
            "version": "1.1.0",
            "resolved": "https://registry.npmjs.org/console-control-strings/-/console-control-strings-1.1.0.tgz",
            "integrity": "sha1-PXz0Rk22RG6mRL9LOVB/mFEAjo4="
        },
        "content-disposition": {
            "version": "0.5.4",
            "resolved": "https://registry.npmjs.org/content-disposition/-/content-disposition-0.5.4.tgz",
            "integrity": "sha512-FveZTNuGw04cxlAiWbzi6zTAL/lhehaWbTtgluJh4/E95DqMwTmha3KZN1aAWA8cFIhHzMZUvLevkw5Rqk+tSQ==",
            "requires": {
                "safe-buffer": "5.2.1"
            }
        },
        "content-type": {
            "version": "1.0.4",
            "resolved": "https://registry.npmjs.org/content-type/-/content-type-1.0.4.tgz",
            "integrity": "sha512-hIP3EEPs8tB9AT1L+NUqtwOAps4mk2Zob89MWXMHjHWg9milF/j4osnnQLXBCBFBk/tvIG/tUc9mOUJiPBhPXA=="
        },
        "cookie": {
            "version": "0.4.2",
            "resolved": "https://registry.npmjs.org/cookie/-/cookie-0.4.2.tgz",
            "integrity": "sha512-aSWTXFzaKWkvHO1Ny/s+ePFpvKsPnjc551iI41v3ny/ow6tBG5Vd+FuqGNhh1LxOmVzOlGUriIlOaokOvhaStA=="
        },
        "cookie-parser": {
            "version": "1.4.6",
            "resolved": "https://registry.npmjs.org/cookie-parser/-/cookie-parser-1.4.6.tgz",
            "integrity": "sha512-z3IzaNjdwUC2olLIB5/ITd0/setiaFMLYiZJle7xg5Fe9KWAceil7xszYfHHBtDFYLSgJduS2Ty0P1uJdPDJeA==",
            "requires": {
                "cookie": "0.4.1",
                "cookie-signature": "1.0.6"
            },
            "dependencies": {
                "cookie": {
                    "version": "0.4.1",
                    "resolved": "https://registry.npmjs.org/cookie/-/cookie-0.4.1.tgz",
                    "integrity": "sha512-ZwrFkGJxUR3EIoXtO+yVE69Eb7KlixbaeAWfBQB9vVsNn/o+Yw69gBWSSDK825hQNdN+wF8zELf3dFNl/kxkUA=="
                }
            }
        },
        "cookie-signature": {
            "version": "1.0.6",
            "resolved": "https://registry.npmjs.org/cookie-signature/-/cookie-signature-1.0.6.tgz",
            "integrity": "sha1-4wOogrNCzD7oylE6eZmXNNqzriw="
        },
        "cors": {
            "version": "2.8.5",
            "resolved": "https://registry.npmjs.org/cors/-/cors-2.8.5.tgz",
            "integrity": "sha512-KIHbLJqu73RGr/hnbrO9uBeixNGuvSQjul/jdFvS/KFSIH1hWVd1ng7zOHx+YrEfInLG7q4n6GHQ9cDtxv/P6g==",
            "requires": {
                "object-assign": "^4",
                "vary": "^1"
            }
        },
        "data-uri-to-buffer": {
            "version": "4.0.0",
            "resolved": "https://registry.npmjs.org/data-uri-to-buffer/-/data-uri-to-buffer-4.0.0.tgz",
            "integrity": "sha512-Vr3mLBA8qWmcuschSLAOogKgQ/Jwxulv3RNE4FXnYWRGujzrRWQI4m12fQqRkwX06C0KanhLr4hK+GydchZsaA=="
        },
        "date-fns": {
            "version": "2.29.3",
            "resolved": "https://registry.npmjs.org/date-fns/-/date-fns-2.29.3.tgz",
            "integrity": "sha512-dDCnyH2WnnKusqvZZ6+jA1O51Ibt8ZMRNkDZdyAyK4YfbDwa/cEmuztzG5pk6hqlp9aSBPYcjOlktquahGwGeA=="
        },
        "debug": {
            "version": "2.6.9",
            "resolved": "https://registry.npmjs.org/debug/-/debug-2.6.9.tgz",
            "integrity": "sha512-bC7ElrdJaJnPbAP+1EotYvqZsb3ecl5wi6Bfi6BJTUcNowp6cvspg0jXznRTKDjm/E7AdgFBVeAPVMNcKGsHMA==",
            "requires": {
                "ms": "2.0.0"
            }
        },
        "delegates": {
            "version": "1.0.0",
            "resolved": "https://registry.npmjs.org/delegates/-/delegates-1.0.0.tgz",
            "integrity": "sha1-hMbhWbgZBP3KWaDvRM2HDTElD5o="
        },
        "denque": {
            "version": "2.1.0",
            "resolved": "https://registry.npmjs.org/denque/-/denque-2.1.0.tgz",
            "integrity": "sha512-HVQE3AAb/pxF8fQAoiqpvg9i3evqug3hoiwakOyZAwJm+6vZehbkYXZ0l4JxS+I3QxM97v5aaRNhj8v5oBhekw=="
        },
        "depd": {
            "version": "1.1.2",
            "resolved": "https://registry.npmjs.org/depd/-/depd-1.1.2.tgz",
            "integrity": "sha1-m81S4UwJd2PnSbJ0xDRu0uVgtak="
        },
        "destroy": {
            "version": "1.0.4",
            "resolved": "https://registry.npmjs.org/destroy/-/destroy-1.0.4.tgz",
            "integrity": "sha1-l4hXRCxEdJ5CBmE+N5RiBYJqvYA="
        },
        "detect-libc": {
            "version": "1.0.3",
            "resolved": "https://registry.npmjs.org/detect-libc/-/detect-libc-1.0.3.tgz",
            "integrity": "sha1-+hN8S9aY7fVc1c0CrFWfkaTEups="
        },
        "dotenv": {
            "version": "16.0.0",
            "resolved": "https://registry.npmjs.org/dotenv/-/dotenv-16.0.0.tgz",
            "integrity": "sha512-qD9WU0MPM4SWLPJy/r2Be+2WgQj8plChsyrCNQzW/0WjvcJQiKQJ9mH3ZgB3fxbUUxgc/11ZJ0Fi5KiimWGz2Q=="
        },
        "ecdsa-sig-formatter": {
            "version": "1.0.11",
            "resolved": "https://registry.npmjs.org/ecdsa-sig-formatter/-/ecdsa-sig-formatter-1.0.11.tgz",
            "integrity": "sha512-nagl3RYrbNv6kQkeJIpt6NJZy8twLB/2vtz6yN9Z4vRKHN4/QZJIEbqohALSgwKdnksuY3k5Addp5lg8sVoVcQ==",
            "requires": {
                "safe-buffer": "^5.0.1"
            }
        },
        "ee-first": {
            "version": "1.1.1",
            "resolved": "https://registry.npmjs.org/ee-first/-/ee-first-1.1.1.tgz",
            "integrity": "sha1-WQxhFWsK4vTwJVcyoViyZrxWsh0="
        },
        "emoji-regex": {
            "version": "8.0.0",
            "resolved": "https://registry.npmjs.org/emoji-regex/-/emoji-regex-8.0.0.tgz",
            "integrity": "sha512-MSjYzcWNOA0ewAHpz0MxpYFvwg6yjy1NG3xteoqz644VCo/RPgnr1/GGt+ic3iJTzQ8Eu3TdM14SawnVUmGE6A=="
        },
        "encodeurl": {
            "version": "1.0.2",
            "resolved": "https://registry.npmjs.org/encodeurl/-/encodeurl-1.0.2.tgz",
            "integrity": "sha1-rT/0yG7C0CkyL1oCw6mmBslbP1k="
        },
        "escape-html": {
            "version": "1.0.3",
            "resolved": "https://registry.npmjs.org/escape-html/-/escape-html-1.0.3.tgz",
            "integrity": "sha1-Aljq5NPQwJdN4cFpGI7wBR0dGYg="
        },
        "etag": {
            "version": "1.8.1",
            "resolved": "https://registry.npmjs.org/etag/-/etag-1.8.1.tgz",
            "integrity": "sha1-Qa4u62XvpiJorr/qg6x9eSmbCIc="
        },
        "express": {
            "version": "4.17.3",
            "resolved": "https://registry.npmjs.org/express/-/express-4.17.3.tgz",
            "integrity": "sha512-yuSQpz5I+Ch7gFrPCk4/c+dIBKlQUxtgwqzph132bsT6qhuzss6I8cLJQz7B3rFblzd6wtcI0ZbGltH/C4LjUg==",
            "requires": {
                "accepts": "~1.3.8",
                "array-flatten": "1.1.1",
                "body-parser": "1.19.2",
                "content-disposition": "0.5.4",
                "content-type": "~1.0.4",
                "cookie": "0.4.2",
                "cookie-signature": "1.0.6",
                "debug": "2.6.9",
                "depd": "~1.1.2",
                "encodeurl": "~1.0.2",
                "escape-html": "~1.0.3",
                "etag": "~1.8.1",
                "finalhandler": "~1.1.2",
                "fresh": "0.5.2",
                "merge-descriptors": "1.0.1",
                "methods": "~1.1.2",
                "on-finished": "~2.3.0",
                "parseurl": "~1.3.3",
                "path-to-regexp": "0.1.7",
                "proxy-addr": "~2.0.7",
                "qs": "6.9.7",
                "range-parser": "~1.2.1",
                "safe-buffer": "5.2.1",
                "send": "0.17.2",
                "serve-static": "1.14.2",
                "setprototypeof": "1.2.0",
                "statuses": "~1.5.0",
                "type-is": "~1.6.18",
                "utils-merge": "1.0.1",
                "vary": "~1.1.2"
            },
            "dependencies": {
                "qs": {
                    "version": "6.9.7",
                    "resolved": "https://registry.npmjs.org/qs/-/qs-6.9.7.tgz",
                    "integrity": "sha512-IhMFgUmuNpyRfxA90umL7ByLlgRXu6tIfKPpF5TmcfRLlLCckfP/g3IQmju6jjpu+Hh8rA+2p6A27ZSPOOHdKw=="
                }
            }
        },
        "extend": {
            "version": "3.0.2",
            "resolved": "https://registry.npmjs.org/extend/-/extend-3.0.2.tgz",
            "integrity": "sha512-fjquC59cD7CyW6urNXK0FBufkZcoiGG80wTuPujX590cB5Ttln20E2UB4S/WARVqhXffZl2LNgS+gQdPIIim/g=="
        },
        "fast-text-encoding": {
            "version": "1.0.6",
            "resolved": "https://registry.npmjs.org/fast-text-encoding/-/fast-text-encoding-1.0.6.tgz",
            "integrity": "sha512-VhXlQgj9ioXCqGstD37E/HBeqEGV/qOD/kmbVG8h5xKBYvM1L3lR1Zn4555cQ8GkYbJa8aJSipLPndE1k6zK2w=="
        },
        "fetch-blob": {
            "version": "3.1.4",
            "resolved": "https://registry.npmjs.org/fetch-blob/-/fetch-blob-3.1.4.tgz",
            "integrity": "sha512-Eq5Xv5+VlSrYWEqKrusxY1C3Hm/hjeAsCGVG3ft7pZahlUAChpGZT/Ms1WmSLnEAisEXszjzu/s+ce6HZB2VHA==",
            "requires": {
                "node-domexception": "^1.0.0",
                "web-streams-polyfill": "^3.0.3"
            }
        },
        "fill-range": {
            "version": "7.0.1",
            "resolved": "https://registry.npmjs.org/fill-range/-/fill-range-7.0.1.tgz",
            "integrity": "sha512-qOo9F+dMUmC2Lcb4BbVvnKJxTPjCm+RRpe4gDuGrzkL7mEVl/djYSu2OdQ2Pa302N4oqkSg9ir6jaLWJ2USVpQ==",
            "requires": {
                "to-regex-range": "^5.0.1"
            }
        },
        "finalhandler": {
            "version": "1.1.2",
            "resolved": "https://registry.npmjs.org/finalhandler/-/finalhandler-1.1.2.tgz",
            "integrity": "sha512-aAWcW57uxVNrQZqFXjITpW3sIUQmHGG3qSb9mUah9MgMC4NeWhNOlNjXEYq3HjRAvL6arUviZGGJsBg6z0zsWA==",
            "requires": {
                "debug": "2.6.9",
                "encodeurl": "~1.0.2",
                "escape-html": "~1.0.3",
                "on-finished": "~2.3.0",
                "parseurl": "~1.3.3",
                "statuses": "~1.5.0",
                "unpipe": "~1.0.0"
            }
        },
        "formdata-polyfill": {
            "version": "4.0.10",
            "resolved": "https://registry.npmjs.org/formdata-polyfill/-/formdata-polyfill-4.0.10.tgz",
            "integrity": "sha512-buewHzMvYL29jdeQTVILecSaZKnt/RJWjoZCF5OW60Z67/GmSLBkOFM7qh1PI3zFNtJbaZL5eQu1vLfazOwj4g==",
            "requires": {
                "fetch-blob": "^3.1.2"
            }
        },
        "forwarded": {
            "version": "0.2.0",
            "resolved": "https://registry.npmjs.org/forwarded/-/forwarded-0.2.0.tgz",
            "integrity": "sha512-buRG0fpBtRHSTCOASe6hD258tEubFoRLb4ZNA6NxMVHNw2gOcwHo9wyablzMzOA5z9xA9L1KNjk/Nt6MT9aYow=="
        },
        "fresh": {
            "version": "0.5.2",
            "resolved": "https://registry.npmjs.org/fresh/-/fresh-0.5.2.tgz",
            "integrity": "sha1-PYyt2Q2XZWn6g1qx+OSyOhBWBac="
        },
        "fs-minipass": {
            "version": "2.1.0",
            "resolved": "https://registry.npmjs.org/fs-minipass/-/fs-minipass-2.1.0.tgz",
            "integrity": "sha512-V/JgOLFCS+R6Vcq0slCuaeWEdNC3ouDlJMNIsacH2VtALiu9mV4LPrHc5cDl8k5aw6J8jwgWWpiTo5RYhmIzvg==",
            "requires": {
                "minipass": "^3.0.0"
            }
        },
        "fs.realpath": {
            "version": "1.0.0",
            "resolved": "https://registry.npmjs.org/fs.realpath/-/fs.realpath-1.0.0.tgz",
            "integrity": "sha1-FQStJSMVjKpA20onh8sBQRmU6k8="
        },
        "fsevents": {
            "version": "2.3.2",
            "resolved": "https://registry.npmjs.org/fsevents/-/fsevents-2.3.2.tgz",
            "integrity": "sha512-xiqMQR4xAeHTuB9uWm+fFRcIOgKBMiOBP+eXiyT7jsgVCq1bkVygt00oASowB7EdtpOHaaPgKt812P9ab+DDKA==",
            "optional": true
        },
        "function-bind": {
            "version": "1.1.1",
            "resolved": "https://registry.npmjs.org/function-bind/-/function-bind-1.1.1.tgz",
            "integrity": "sha512-yIovAzMX49sF8Yl58fSCWJ5svSLuaibPxXQJFLmBObTuCr0Mf1KiPopGM9NiFjiYBCbfaa2Fh6breQ6ANVTI0A=="
        },
        "gauge": {
            "version": "3.0.2",
            "resolved": "https://registry.npmjs.org/gauge/-/gauge-3.0.2.tgz",
            "integrity": "sha512-+5J6MS/5XksCuXq++uFRsnUd7Ovu1XenbeuIuNRJxYWjgQbPuFhT14lAvsWfqfAmnwluf1OwMjz39HjfLPci0Q==",
            "requires": {
                "aproba": "^1.0.3 || ^2.0.0",
                "color-support": "^1.1.2",
                "console-control-strings": "^1.0.0",
                "has-unicode": "^2.0.1",
                "object-assign": "^4.1.1",
                "signal-exit": "^3.0.0",
                "string-width": "^4.2.3",
                "strip-ansi": "^6.0.1",
                "wide-align": "^1.1.2"
            }
        },
        "gaxios": {
            "version": "5.0.2",
            "resolved": "https://registry.npmjs.org/gaxios/-/gaxios-5.0.2.tgz",
            "integrity": "sha512-TjtV2AJOZoMQqRYoy5eM8cCQogYwazWNYLQ72QB0kwa6vHHruYkGmhhyrlzbmgNHK1dNnuP2WSH81urfzyN2Og==",
            "requires": {
                "extend": "^3.0.2",
                "https-proxy-agent": "^5.0.0",
                "is-stream": "^2.0.0",
                "node-fetch": "^2.6.7"
            },
            "dependencies": {
                "node-fetch": {
                    "version": "2.6.7",
                    "resolved": "https://registry.npmjs.org/node-fetch/-/node-fetch-2.6.7.tgz",
                    "integrity": "sha512-ZjMPFEfVx5j+y2yF35Kzx5sF7kDzxuDj6ziH4FFbOp87zKDZNx8yExJIb05OGF4Nlt9IHFIMBkRl41VdvcNdbQ==",
                    "requires": {
                        "whatwg-url": "^5.0.0"
                    }
                },
                "tr46": {
                    "version": "0.0.3",
                    "resolved": "https://registry.npmjs.org/tr46/-/tr46-0.0.3.tgz",
                    "integrity": "sha512-N3WMsuqV66lT30CrXNbEjx4GEwlow3v6rr4mCcv6prnfwhS01rkgyFdjPNBYd9br7LpXV1+Emh01fHnq2Gdgrw=="
                },
                "webidl-conversions": {
                    "version": "3.0.1",
                    "resolved": "https://registry.npmjs.org/webidl-conversions/-/webidl-conversions-3.0.1.tgz",
                    "integrity": "sha512-2JAn3z8AR6rjK8Sm8orRC0h/bcl/DqL7tRPdGZ4I1CjdF+EaMLmYxBHyXuKL849eucPFhvBoxMsflfOb8kxaeQ=="
                },
                "whatwg-url": {
                    "version": "5.0.0",
                    "resolved": "https://registry.npmjs.org/whatwg-url/-/whatwg-url-5.0.0.tgz",
                    "integrity": "sha512-saE57nupxk6v3HY35+jzBwYa0rKSy0XR8JSxZPwgLr7ys0IBzhGviA1/TUGJLmSVqs8pb9AnvICXEuOHLprYTw==",
                    "requires": {
                        "tr46": "~0.0.3",
                        "webidl-conversions": "^3.0.0"
                    }
                }
            }
        },
        "gcp-metadata": {
            "version": "5.0.1",
            "resolved": "https://registry.npmjs.org/gcp-metadata/-/gcp-metadata-5.0.1.tgz",
            "integrity": "sha512-jiRJ+Fk7e8FH68Z6TLaqwea307OktJpDjmYnU7/li6ziwvVvU2RlrCyQo5vkdeP94chm0kcSCOOszvmuaioq3g==",
            "requires": {
                "gaxios": "^5.0.0",
                "json-bigint": "^1.0.0"
            }
        },
        "generate-password": {
            "version": "1.7.0",
            "resolved": "https://registry.npmjs.org/generate-password/-/generate-password-1.7.0.tgz",
            "integrity": "sha512-WPCtlfy0jexf7W5IbwxGUgpIDvsZIohbI2DAq2Q6TSlKKis+G4GT9sxvPxrZUGL8kP6WUXMWNqYnxY6DDKAdFA=="
        },
        "get-intrinsic": {
            "version": "1.1.3",
            "resolved": "https://registry.npmjs.org/get-intrinsic/-/get-intrinsic-1.1.3.tgz",
            "integrity": "sha512-QJVz1Tj7MS099PevUG5jvnt9tSkXN8K14dxQlikJuPt4uD9hHAHjLyLBiLR5zELelBdD9QNRAXZzsJx0WaDL9A==",
            "requires": {
                "function-bind": "^1.1.1",
                "has": "^1.0.3",
                "has-symbols": "^1.0.3"
            }
        },
        "glob": {
            "version": "7.2.0",
            "resolved": "https://registry.npmjs.org/glob/-/glob-7.2.0.tgz",
            "integrity": "sha512-lmLf6gtyrPq8tTjSmrO94wBeQbFR3HbLHbuyD69wuyQkImp2hWqMGB47OX65FBkPffO641IP9jWa1z4ivqG26Q==",
            "requires": {
                "fs.realpath": "^1.0.0",
                "inflight": "^1.0.4",
                "inherits": "2",
                "minimatch": "^3.0.4",
                "once": "^1.3.0",
                "path-is-absolute": "^1.0.0"
            }
        },
        "glob-parent": {
            "version": "5.1.2",
            "resolved": "https://registry.npmjs.org/glob-parent/-/glob-parent-5.1.2.tgz",
            "integrity": "sha512-AOIgSQCepiJYwP3ARnGx+5VnTu2HBYdzbGP45eLw1vr3zB3vZLeyed1sC9hnbcOc9/SrMyM5RPQrkGz4aS9Zow==",
            "requires": {
                "is-glob": "^4.0.1"
            }
        },
        "google-auth-library": {
            "version": "8.6.0",
            "resolved": "https://registry.npmjs.org/google-auth-library/-/google-auth-library-8.6.0.tgz",
            "integrity": "sha512-y6bw1yTWMVgs1vGJwBZ3uu+uIClfgxQfsEVcTNKjQeNQOVwox69+ZUgTeTAzrh+74hBqrk1gWyb9RsQVDI7seg==",
            "requires": {
                "arrify": "^2.0.0",
                "base64-js": "^1.3.0",
                "ecdsa-sig-formatter": "^1.0.11",
                "fast-text-encoding": "^1.0.0",
                "gaxios": "^5.0.0",
                "gcp-metadata": "^5.0.0",
                "gtoken": "^6.1.0",
                "jws": "^4.0.0",
                "lru-cache": "^6.0.0"
            },
            "dependencies": {
                "jwa": {
                    "version": "2.0.0",
                    "resolved": "https://registry.npmjs.org/jwa/-/jwa-2.0.0.tgz",
                    "integrity": "sha512-jrZ2Qx916EA+fq9cEAeCROWPTfCwi1IVHqT2tapuqLEVVDKFDENFw1oL+MwrTvH6msKxsd1YTDVw6uKEcsrLEA==",
                    "requires": {
                        "buffer-equal-constant-time": "1.0.1",
                        "ecdsa-sig-formatter": "1.0.11",
                        "safe-buffer": "^5.0.1"
                    }
                },
                "jws": {
                    "version": "4.0.0",
                    "resolved": "https://registry.npmjs.org/jws/-/jws-4.0.0.tgz",
                    "integrity": "sha512-KDncfTmOZoOMTFG4mBlG0qUIOlc03fmzH+ru6RgYVZhPkyiy/92Owlt/8UEN+a4TXR1FQetfIpJE8ApdvdVxTg==",
                    "requires": {
                        "jwa": "^2.0.0",
                        "safe-buffer": "^5.0.1"
                    }
                }
            }
        },
        "google-p12-pem": {
            "version": "4.0.1",
            "resolved": "https://registry.npmjs.org/google-p12-pem/-/google-p12-pem-4.0.1.tgz",
            "integrity": "sha512-WPkN4yGtz05WZ5EhtlxNDWPhC4JIic6G8ePitwUWy4l+XPVYec+a0j0Ts47PDtW59y3RwAhUd9/h9ZZ63px6RQ==",
            "requires": {
                "node-forge": "^1.3.1"
            }
        },
        "googleapis": {
            "version": "108.0.1",
            "resolved": "https://registry.npmjs.org/googleapis/-/googleapis-108.0.1.tgz",
            "integrity": "sha512-NKYTMfQH1xVl38Efj4UAwYq/9j+vc/iaqULfG3dSBK4vQHhsYKgKN6agMrgzlWo3NA8ivwb/0bToxZxnhxj7Bg==",
            "requires": {
                "google-auth-library": "^8.0.2",
                "googleapis-common": "^6.0.0"
            }
        },
        "googleapis-common": {
            "version": "6.0.3",
            "resolved": "https://registry.npmjs.org/googleapis-common/-/googleapis-common-6.0.3.tgz",
            "integrity": "sha512-Xyb4FsQ6PQDu4tAE/M/ev4yzZhFe2Gc7+rKmuCX2ZGk1ajBKbafsGlVYpmzGqQOT93BRDe8DiTmQb6YSkbICrA==",
            "requires": {
                "extend": "^3.0.2",
                "gaxios": "^5.0.1",
                "google-auth-library": "^8.0.2",
                "qs": "^6.7.0",
                "url-template": "^2.0.8",
                "uuid": "^9.0.0"
            }
        },
        "gtoken": {
            "version": "6.1.2",
            "resolved": "https://registry.npmjs.org/gtoken/-/gtoken-6.1.2.tgz",
            "integrity": "sha512-4ccGpzz7YAr7lxrT2neugmXQ3hP9ho2gcaityLVkiUecAiwiy60Ii8gRbZeOsXV19fYaRjgBSshs8kXw+NKCPQ==",
            "requires": {
                "gaxios": "^5.0.1",
                "google-p12-pem": "^4.0.0",
                "jws": "^4.0.0"
            },
            "dependencies": {
                "jwa": {
                    "version": "2.0.0",
                    "resolved": "https://registry.npmjs.org/jwa/-/jwa-2.0.0.tgz",
                    "integrity": "sha512-jrZ2Qx916EA+fq9cEAeCROWPTfCwi1IVHqT2tapuqLEVVDKFDENFw1oL+MwrTvH6msKxsd1YTDVw6uKEcsrLEA==",
                    "requires": {
                        "buffer-equal-constant-time": "1.0.1",
                        "ecdsa-sig-formatter": "1.0.11",
                        "safe-buffer": "^5.0.1"
                    }
                },
                "jws": {
                    "version": "4.0.0",
                    "resolved": "https://registry.npmjs.org/jws/-/jws-4.0.0.tgz",
                    "integrity": "sha512-KDncfTmOZoOMTFG4mBlG0qUIOlc03fmzH+ru6RgYVZhPkyiy/92Owlt/8UEN+a4TXR1FQetfIpJE8ApdvdVxTg==",
                    "requires": {
                        "jwa": "^2.0.0",
                        "safe-buffer": "^5.0.1"
                    }
                }
            }
        },
        "has": {
            "version": "1.0.3",
            "resolved": "https://registry.npmjs.org/has/-/has-1.0.3.tgz",
            "integrity": "sha512-f2dvO0VU6Oej7RkWJGrehjbzMAjFp5/VKPp5tTpWIV4JHHZK1/BxbFRtf/siA2SWTe09caDmVtYYzWEIbBS4zw==",
            "requires": {
                "function-bind": "^1.1.1"
            }
        },
        "has-flag": {
            "version": "3.0.0",
            "resolved": "https://registry.npmjs.org/has-flag/-/has-flag-3.0.0.tgz",
            "integrity": "sha1-tdRU3CGZriJWmfNGfloH87lVuv0="
        },
        "has-symbols": {
            "version": "1.0.3",
            "resolved": "https://registry.npmjs.org/has-symbols/-/has-symbols-1.0.3.tgz",
            "integrity": "sha512-l3LCuF6MgDNwTDKkdYGEihYjt5pRPbEg46rtlmnSPlUbgmB8LOIrKJbYYFBSbnPaJexMKtiPO8hmeRjRz2Td+A=="
        },
        "has-unicode": {
            "version": "2.0.1",
            "resolved": "https://registry.npmjs.org/has-unicode/-/has-unicode-2.0.1.tgz",
            "integrity": "sha1-4Ob+aijPUROIVeCG0Wkedx3iqLk="
        },
        "http-errors": {
            "version": "1.8.1",
            "resolved": "https://registry.npmjs.org/http-errors/-/http-errors-1.8.1.tgz",
            "integrity": "sha512-Kpk9Sm7NmI+RHhnj6OIWDI1d6fIoFAtFt9RLaTMRlg/8w49juAStsrBgp0Dp4OdxdVbRIeKhtCUvoi/RuAhO4g==",
            "requires": {
                "depd": "~1.1.2",
                "inherits": "2.0.4",
                "setprototypeof": "1.2.0",
                "statuses": ">= 1.5.0 < 2",
                "toidentifier": "1.0.1"
            }
        },
        "https-proxy-agent": {
            "version": "5.0.0",
            "resolved": "https://registry.npmjs.org/https-proxy-agent/-/https-proxy-agent-5.0.0.tgz",
            "integrity": "sha512-EkYm5BcKUGiduxzSt3Eppko+PiNWNEpa4ySk9vTC6wDsQJW9rHSa+UhGNJoRYp7bz6Ht1eaRIa6QaJqO5rCFbA==",
            "requires": {
                "agent-base": "6",
                "debug": "4"
            },
            "dependencies": {
                "debug": {
                    "version": "4.3.3",
                    "resolved": "https://registry.npmjs.org/debug/-/debug-4.3.3.tgz",
                    "integrity": "sha512-/zxw5+vh1Tfv+4Qn7a5nsbcJKPaSvCDhojn6FEl9vupwK2VCSDtEiEtqr8DFtzYFOdz63LBkxec7DYuc2jon6Q==",
                    "requires": {
                        "ms": "2.1.2"
                    }
                },
                "ms": {
                    "version": "2.1.2",
                    "resolved": "https://registry.npmjs.org/ms/-/ms-2.1.2.tgz",
                    "integrity": "sha512-sGkPx+VjMtmA6MX27oA4FBFELFCZZ4S4XqeGOXCv68tT+jb3vk/RyaKWP0PTKyWtmLSM0b+adUTEvbs1PEaH2w=="
                }
            }
        },
        "iconv-lite": {
            "version": "0.4.24",
            "resolved": "https://registry.npmjs.org/iconv-lite/-/iconv-lite-0.4.24.tgz",
            "integrity": "sha512-v3MXnZAcvnywkTUEZomIActle7RXXeedOR31wwl7VlyoXO4Qi9arvSenNQWne1TcRwhCL1HwLI21bEqdpj8/rA==",
            "requires": {
                "safer-buffer": ">= 2.1.2 < 3"
            }
        },
        "ieee754": {
            "version": "1.2.1",
            "resolved": "https://registry.npmjs.org/ieee754/-/ieee754-1.2.1.tgz",
            "integrity": "sha512-dcyqhDvX1C46lXZcVqCpK+FtMRQVdIMN6/Df5js2zouUsqG7I6sFxitIC+7KYK29KdXOLHdu9zL4sFnoVQnqaA=="
        },
        "ignore-by-default": {
            "version": "1.0.1",
            "resolved": "https://registry.npmjs.org/ignore-by-default/-/ignore-by-default-1.0.1.tgz",
            "integrity": "sha1-SMptcvbGo68Aqa1K5odr44ieKwk="
        },
        "inflight": {
            "version": "1.0.6",
            "resolved": "https://registry.npmjs.org/inflight/-/inflight-1.0.6.tgz",
            "integrity": "sha1-Sb1jMdfQLQwJvJEKEHW6gWW1bfk=",
            "requires": {
                "once": "^1.3.0",
                "wrappy": "1"
            }
        },
        "inherits": {
            "version": "2.0.4",
            "resolved": "https://registry.npmjs.org/inherits/-/inherits-2.0.4.tgz",
            "integrity": "sha512-k/vGaX4/Yla3WzyMCvTQOXYeIHvqOKtnqBduzTHpzpQZzAskKMhZ2K+EnBiSM9zGSoIFeMpXKxa4dYeZIQqewQ=="
        },
        "ip": {
            "version": "2.0.0",
            "resolved": "https://registry.npmjs.org/ip/-/ip-2.0.0.tgz",
            "integrity": "sha512-WKa+XuLG1A1R0UWhl2+1XQSi+fZWMsYKffMZTTYsiZaUD8k2yDAj5atimTUD2TZkyCkNEeYE5NhFZmupOGtjYQ=="
        },
        "ipaddr.js": {
            "version": "1.9.1",
            "resolved": "https://registry.npmjs.org/ipaddr.js/-/ipaddr.js-1.9.1.tgz",
            "integrity": "sha512-0KI/607xoxSToH7GjN1FfSbLoU0+btTicjsQSWQlh/hZykN8KpmMf7uYwPW3R+akZ6R/w18ZlXSHBYXiYUPO3g=="
        },
        "is-binary-path": {
            "version": "2.1.0",
            "resolved": "https://registry.npmjs.org/is-binary-path/-/is-binary-path-2.1.0.tgz",
            "integrity": "sha512-ZMERYes6pDydyuGidse7OsHxtbI7WVeUEozgR/g7rd0xUimYNlvZRE/K2MgZTjWy725IfelLeVcEM97mmtRGXw==",
            "requires": {
                "binary-extensions": "^2.0.0"
            }
        },
        "is-extglob": {
            "version": "2.1.1",
            "resolved": "https://registry.npmjs.org/is-extglob/-/is-extglob-2.1.1.tgz",
            "integrity": "sha1-qIwCU1eR8C7TfHahueqXc8gz+MI="
        },
        "is-fullwidth-code-point": {
            "version": "3.0.0",
            "resolved": "https://registry.npmjs.org/is-fullwidth-code-point/-/is-fullwidth-code-point-3.0.0.tgz",
            "integrity": "sha512-zymm5+u+sCsSWyD9qNaejV3DFvhCKclKdizYaJUuHA83RLjb7nSuGnddCHGv0hk+KY7BMAlsWeK4Ueg6EV6XQg=="
        },
        "is-glob": {
            "version": "4.0.3",
            "resolved": "https://registry.npmjs.org/is-glob/-/is-glob-4.0.3.tgz",
            "integrity": "sha512-xelSayHH36ZgE7ZWhli7pW34hNbNl8Ojv5KVmkJD4hBdD3th8Tfk9vYasLM+mXWOZhFkgZfxhLSnrwRr4elSSg==",
            "requires": {
                "is-extglob": "^2.1.1"
            }
        },
        "is-number": {
            "version": "7.0.0",
            "resolved": "https://registry.npmjs.org/is-number/-/is-number-7.0.0.tgz",
            "integrity": "sha512-41Cifkg6e8TylSpdtTpeLVMqvSBEVzTttHvERD741+pnZ8ANv0004MRL43QKPDlK9cGvNp6NZWZUBlbGXYxxng=="
        },
        "is-stream": {
            "version": "2.0.1",
            "resolved": "https://registry.npmjs.org/is-stream/-/is-stream-2.0.1.tgz",
            "integrity": "sha512-hFoiJiTl63nn+kstHGBtewWSKnQLpyb155KHheA1l39uvtO9nWIop1p3udqPcUd/xbF1VLMO4n7OI6p7RbngDg=="
        },
        "json-bigint": {
            "version": "1.0.0",
            "resolved": "https://registry.npmjs.org/json-bigint/-/json-bigint-1.0.0.tgz",
            "integrity": "sha512-SiPv/8VpZuWbvLSMtTDU8hEfrZWg/mH/nV/b4o0CYbSxu1UIQPLdwKOCIyLQX+VIPO5vrLX3i8qtqFyhdPSUSQ==",
            "requires": {
                "bignumber.js": "^9.0.0"
            }
        },
        "jsonwebtoken": {
            "version": "8.5.1",
            "resolved": "https://registry.npmjs.org/jsonwebtoken/-/jsonwebtoken-8.5.1.tgz",
            "integrity": "sha512-XjwVfRS6jTMsqYs0EsuJ4LGxXV14zQybNd4L2r0UvbVnSF9Af8x7p5MzbJ90Ioz/9TI41/hTCvznF/loiSzn8w==",
            "requires": {
                "jws": "^3.2.2",
                "lodash.includes": "^4.3.0",
                "lodash.isboolean": "^3.0.3",
                "lodash.isinteger": "^4.0.4",
                "lodash.isnumber": "^3.0.3",
                "lodash.isplainobject": "^4.0.6",
                "lodash.isstring": "^4.0.1",
                "lodash.once": "^4.0.0",
                "ms": "^2.1.1",
                "semver": "^5.6.0"
            },
            "dependencies": {
                "ms": {
                    "version": "2.1.3",
                    "resolved": "https://registry.npmjs.org/ms/-/ms-2.1.3.tgz",
                    "integrity": "sha512-6FlzubTLZG3J2a/NVCAleEhjzq5oxgHyaCU9yYXvcLsvoVaHJq/s5xXI6/XXP6tz7R9xAOtHnSO/tXtF3WRTlA=="
                }
            }
        },
        "jwa": {
            "version": "1.4.1",
            "resolved": "https://registry.npmjs.org/jwa/-/jwa-1.4.1.tgz",
            "integrity": "sha512-qiLX/xhEEFKUAJ6FiBMbes3w9ATzyk5W7Hvzpa/SLYdxNtng+gcurvrI7TbACjIXlsJyr05/S1oUhZrc63evQA==",
            "requires": {
                "buffer-equal-constant-time": "1.0.1",
                "ecdsa-sig-formatter": "1.0.11",
                "safe-buffer": "^5.0.1"
            }
        },
        "jws": {
            "version": "3.2.2",
            "resolved": "https://registry.npmjs.org/jws/-/jws-3.2.2.tgz",
            "integrity": "sha512-YHlZCB6lMTllWDtSPHz/ZXTsi8S00usEV6v1tjq8tOUZzw7DpSDWVXjXDre6ed1w/pd495ODpHZYSdkRTsa0HA==",
            "requires": {
                "jwa": "^1.4.1",
                "safe-buffer": "^5.0.1"
            }
        },
        "jwt-decode": {
            "version": "3.1.2",
            "resolved": "https://registry.npmjs.org/jwt-decode/-/jwt-decode-3.1.2.tgz",
            "integrity": "sha512-UfpWE/VZn0iP50d8cz9NrZLM9lSWhcJ+0Gt/nm4by88UL+J1SiKN8/5dkjMmbEzwL2CAe+67GsegCbIKtbp75A=="
        },
        "kareem": {
            "version": "2.4.1",
            "resolved": "https://registry.npmjs.org/kareem/-/kareem-2.4.1.tgz",
            "integrity": "sha512-aJ9opVoXroQUPfovYP5kaj2lM7Jn02Gw13bL0lg9v0V7SaUc0qavPs0Eue7d2DcC3NjqI6QAUElXNsuZSeM+EA=="
        },
        "lodash.includes": {
            "version": "4.3.0",
            "resolved": "https://registry.npmjs.org/lodash.includes/-/lodash.includes-4.3.0.tgz",
            "integrity": "sha1-YLuYqHy5I8aMoeUTJUgzFISfVT8="
        },
        "lodash.isboolean": {
            "version": "3.0.3",
            "resolved": "https://registry.npmjs.org/lodash.isboolean/-/lodash.isboolean-3.0.3.tgz",
            "integrity": "sha1-bC4XHbKiV82WgC/UOwGyDV9YcPY="
        },
        "lodash.isinteger": {
            "version": "4.0.4",
            "resolved": "https://registry.npmjs.org/lodash.isinteger/-/lodash.isinteger-4.0.4.tgz",
            "integrity": "sha1-YZwK89A/iwTDH1iChAt3sRzWg0M="
        },
        "lodash.isnumber": {
            "version": "3.0.3",
            "resolved": "https://registry.npmjs.org/lodash.isnumber/-/lodash.isnumber-3.0.3.tgz",
            "integrity": "sha1-POdoEMWSjQM1IwGsKHMX8RwLH/w="
        },
        "lodash.isplainobject": {
            "version": "4.0.6",
            "resolved": "https://registry.npmjs.org/lodash.isplainobject/-/lodash.isplainobject-4.0.6.tgz",
            "integrity": "sha1-fFJqUtibRcRcxpC4gWO+BJf1UMs="
        },
        "lodash.isstring": {
            "version": "4.0.1",
            "resolved": "https://registry.npmjs.org/lodash.isstring/-/lodash.isstring-4.0.1.tgz",
            "integrity": "sha1-1SfftUVuynzJu5XV2ur4i6VKVFE="
        },
        "lodash.once": {
            "version": "4.1.1",
            "resolved": "https://registry.npmjs.org/lodash.once/-/lodash.once-4.1.1.tgz",
            "integrity": "sha1-DdOXEhPHxW34gJd9UEyI+0cal6w="
        },
        "lru-cache": {
            "version": "6.0.0",
            "resolved": "https://registry.npmjs.org/lru-cache/-/lru-cache-6.0.0.tgz",
            "integrity": "sha512-Jo6dJ04CmSjuznwJSS3pUeWmd/H0ffTlkXXgwZi+eq1UCmqQwCh+eLsYOYCwY991i2Fah4h1BEMCx4qThGbsiA==",
            "requires": {
                "yallist": "^4.0.0"
            }
        },
        "make-dir": {
            "version": "3.1.0",
            "resolved": "https://registry.npmjs.org/make-dir/-/make-dir-3.1.0.tgz",
            "integrity": "sha512-g3FeP20LNwhALb/6Cz6Dd4F2ngze0jz7tbzrD2wAV+o9FeNHe4rL+yK2md0J/fiSf1sa1ADhXqi5+oVwOM/eGw==",
            "requires": {
                "semver": "^6.0.0"
            },
            "dependencies": {
                "semver": {
                    "version": "6.3.0",
                    "resolved": "https://registry.npmjs.org/semver/-/semver-6.3.0.tgz",
                    "integrity": "sha512-b39TBaTSfV6yBrapU89p5fKekE2m/NwnDocOVruQFS1/veMgdzuPcnOM34M6CwxW8jH/lxEa5rBoDeUwu5HHTw=="
                }
            }
        },
        "media-typer": {
            "version": "0.3.0",
            "resolved": "https://registry.npmjs.org/media-typer/-/media-typer-0.3.0.tgz",
            "integrity": "sha1-hxDXrwqmJvj/+hzgAWhUUmMlV0g="
        },
        "memory-pager": {
            "version": "1.5.0",
            "resolved": "https://registry.npmjs.org/memory-pager/-/memory-pager-1.5.0.tgz",
            "integrity": "sha512-ZS4Bp4r/Zoeq6+NLJpP+0Zzm0pR8whtGPf1XExKLJBAczGMnSi3It14OiNCStjQjM6NU1okjQGSxgEZN8eBYKg==",
            "optional": true
        },
        "merge-descriptors": {
            "version": "1.0.1",
            "resolved": "https://registry.npmjs.org/merge-descriptors/-/merge-descriptors-1.0.1.tgz",
            "integrity": "sha1-sAqqVW3YtEVoFQ7J0blT8/kMu2E="
        },
        "methods": {
            "version": "1.1.2",
            "resolved": "https://registry.npmjs.org/methods/-/methods-1.1.2.tgz",
            "integrity": "sha1-VSmk1nZUE07cxSZmVoNbD4Ua/O4="
        },
        "mime": {
            "version": "1.6.0",
            "resolved": "https://registry.npmjs.org/mime/-/mime-1.6.0.tgz",
            "integrity": "sha512-x0Vn8spI+wuJ1O6S7gnbaQg8Pxh4NNHb7KSINmEWKiPE4RKOplvijn+NkmYmmRgP68mc70j2EbeTFRsrswaQeg=="
        },
        "mime-db": {
            "version": "1.51.0",
            "resolved": "https://registry.npmjs.org/mime-db/-/mime-db-1.51.0.tgz",
            "integrity": "sha512-5y8A56jg7XVQx2mbv1lu49NR4dokRnhZYTtL+KGfaa27uq4pSTXkwQkFJl4pkRMyNFz/EtYDSkiiEHx3F7UN6g=="
        },
        "mime-types": {
            "version": "2.1.34",
            "resolved": "https://registry.npmjs.org/mime-types/-/mime-types-2.1.34.tgz",
            "integrity": "sha512-6cP692WwGIs9XXdOO4++N+7qjqv0rqxxVvJ3VHPh/Sc9mVZcQP+ZGhkKiTvWMQRr2tbHkJP/Yn7Y0npb3ZBs4A==",
            "requires": {
                "mime-db": "1.51.0"
            }
        },
        "minimatch": {
            "version": "3.1.2",
            "resolved": "https://registry.npmjs.org/minimatch/-/minimatch-3.1.2.tgz",
            "integrity": "sha512-J7p63hRiAjw1NDEww1W7i37+ByIrOWO5XQQAzZ3VOcL0PNybwpfmV/N05zFAzwQ9USyEcX6t3UO+K5aqBQOIHw==",
            "requires": {
                "brace-expansion": "^1.1.7"
            }
        },
        "minipass": {
            "version": "3.1.6",
            "resolved": "https://registry.npmjs.org/minipass/-/minipass-3.1.6.tgz",
            "integrity": "sha512-rty5kpw9/z8SX9dmxblFA6edItUmwJgMeYDZRrwlIVN27i8gysGbznJwUggw2V/FVqFSDdWy040ZPS811DYAqQ==",
            "requires": {
                "yallist": "^4.0.0"
            }
        },
        "minizlib": {
            "version": "2.1.2",
            "resolved": "https://registry.npmjs.org/minizlib/-/minizlib-2.1.2.tgz",
            "integrity": "sha512-bAxsR8BVfj60DWXHE3u30oHzfl4G7khkSuPW+qvpd7jFRHm7dLxOjUk1EHACJ/hxLY8phGJ0YhYHZo7jil7Qdg==",
            "requires": {
                "minipass": "^3.0.0",
                "yallist": "^4.0.0"
            }
        },
        "mkdirp": {
            "version": "1.0.4",
            "resolved": "https://registry.npmjs.org/mkdirp/-/mkdirp-1.0.4.tgz",
            "integrity": "sha512-vVqVZQyf3WLx2Shd0qJ9xuvqgAyKPLAiqITEtqW0oIUjzo3PePDd6fW9iFz30ef7Ysp/oiWqbhszeGWW2T6Gzw=="
        },
        "moment": {
            "version": "2.29.4",
            "resolved": "https://registry.npmjs.org/moment/-/moment-2.29.4.tgz",
            "integrity": "sha512-5LC9SOxjSc2HF6vO2CyuTDNivEdoz2IvyJJGj6X8DJ0eFyfszE0QiEd+iXmBvUP3WHxSjFH/vIsA0EN00cgr8w=="
        },
        "mongodb": {
            "version": "4.9.1",
            "resolved": "https://registry.npmjs.org/mongodb/-/mongodb-4.9.1.tgz",
            "integrity": "sha512-ZhgI/qBf84fD7sI4waZBoLBNJYPQN5IOC++SBCiPiyhzpNKOxN/fi0tBHvH2dEC42HXtNEbFB0zmNz4+oVtorQ==",
            "requires": {
                "bson": "^4.7.0",
                "denque": "^2.1.0",
                "mongodb-connection-string-url": "^2.5.3",
                "saslprep": "^1.0.3",
                "socks": "^2.7.0"
            }
        },
        "mongodb-connection-string-url": {
            "version": "2.5.3",
            "resolved": "https://registry.npmjs.org/mongodb-connection-string-url/-/mongodb-connection-string-url-2.5.3.tgz",
            "integrity": "sha512-f+/WsED+xF4B74l3k9V/XkTVj5/fxFH2o5ToKXd8Iyi5UhM+sO9u0Ape17Mvl/GkZaFtM0HQnzAG5OTmhKw+tQ==",
            "requires": {
                "@types/whatwg-url": "^8.2.1",
                "whatwg-url": "^11.0.0"
            }
        },
        "mongoose": {
            "version": "6.6.1",
            "resolved": "https://registry.npmjs.org/mongoose/-/mongoose-6.6.1.tgz",
            "integrity": "sha512-hPDamnn6quL9TjIrOudqUS5sMilENmP/gfxoCIb+rDmlzawtM7+MVCAWrM9930fzD20N7qAema/zE9QIDuifhQ==",
            "requires": {
                "bson": "^4.6.5",
                "kareem": "2.4.1",
                "mongodb": "4.9.1",
                "mpath": "0.9.0",
                "mquery": "4.0.3",
                "ms": "2.1.3",
                "sift": "16.0.0"
            },
            "dependencies": {
                "ms": {
                    "version": "2.1.3",
                    "resolved": "https://registry.npmjs.org/ms/-/ms-2.1.3.tgz",
                    "integrity": "sha512-6FlzubTLZG3J2a/NVCAleEhjzq5oxgHyaCU9yYXvcLsvoVaHJq/s5xXI6/XXP6tz7R9xAOtHnSO/tXtF3WRTlA=="
                }
            }
        },
        "mpath": {
            "version": "0.9.0",
            "resolved": "https://registry.npmjs.org/mpath/-/mpath-0.9.0.tgz",
            "integrity": "sha512-ikJRQTk8hw5DEoFVxHG1Gn9T/xcjtdnOKIU1JTmGjZZlg9LST2mBLmcX3/ICIbgJydT2GOc15RnNy5mHmzfSew=="
        },
        "mquery": {
            "version": "4.0.3",
            "resolved": "https://registry.npmjs.org/mquery/-/mquery-4.0.3.tgz",
            "integrity": "sha512-J5heI+P08I6VJ2Ky3+33IpCdAvlYGTSUjwTPxkAr8i8EoduPMBX2OY/wa3IKZIQl7MU4SbFk8ndgSKyB/cl1zA==",
            "requires": {
                "debug": "4.x"
            },
            "dependencies": {
                "debug": {
                    "version": "4.3.4",
                    "resolved": "https://registry.npmjs.org/debug/-/debug-4.3.4.tgz",
                    "integrity": "sha512-PRWFHuSU3eDtQJPvnNY7Jcket1j0t5OuOsFzPPzsekD52Zl8qUfFIPEiswXqIvHWGVHOgX+7G/vCNNhehwxfkQ==",
                    "requires": {
                        "ms": "2.1.2"
                    }
                },
                "ms": {
                    "version": "2.1.2",
                    "resolved": "https://registry.npmjs.org/ms/-/ms-2.1.2.tgz",
                    "integrity": "sha512-sGkPx+VjMtmA6MX27oA4FBFELFCZZ4S4XqeGOXCv68tT+jb3vk/RyaKWP0PTKyWtmLSM0b+adUTEvbs1PEaH2w=="
                }
            }
        },
        "ms": {
            "version": "2.0.0",
            "resolved": "https://registry.npmjs.org/ms/-/ms-2.0.0.tgz",
            "integrity": "sha1-VgiurfwAvmwpAd9fmGF4jeDVl8g="
        },
        "negotiator": {
            "version": "0.6.3",
            "resolved": "https://registry.npmjs.org/negotiator/-/negotiator-0.6.3.tgz",
            "integrity": "sha512-+EUsqGPLsM+j/zdChZjsnX51g4XrHFOIXwfnCVPGlQk/k5giakcKsuxCObBRu6DSm9opw/O6slWbJdghQM4bBg=="
        },
        "node-addon-api": {
            "version": "3.2.1",
            "resolved": "https://registry.npmjs.org/node-addon-api/-/node-addon-api-3.2.1.tgz",
            "integrity": "sha512-mmcei9JghVNDYydghQmeDX8KoAm0FAiYyIcUt/N4nhyAipB17pllZQDOJD2fotxABnt4Mdz+dKTO7eftLg4d0A=="
        },
        "node-domexception": {
            "version": "1.0.0",
            "resolved": "https://registry.npmjs.org/node-domexception/-/node-domexception-1.0.0.tgz",
            "integrity": "sha512-/jKZoMpw0F8GRwl4/eLROPA3cfcXtLApP0QzLmUT/HuPCZWyB7IY9ZrMeKw2O/nFIqPQB3PVM9aYm0F312AXDQ=="
        },
        "node-fetch": {
            "version": "3.2.10",
            "resolved": "https://registry.npmjs.org/node-fetch/-/node-fetch-3.2.10.tgz",
            "integrity": "sha512-MhuzNwdURnZ1Cp4XTazr69K0BTizsBroX7Zx3UgDSVcZYKF/6p0CBe4EUb/hLqmzVhl0UpYfgRljQ4yxE+iCxA==",
            "requires": {
                "data-uri-to-buffer": "^4.0.0",
                "fetch-blob": "^3.1.4",
                "formdata-polyfill": "^4.0.10"
            }
        },
        "node-forge": {
            "version": "1.3.1",
            "resolved": "https://registry.npmjs.org/node-forge/-/node-forge-1.3.1.tgz",
            "integrity": "sha512-dPEtOeMvF9VMcYV/1Wb8CPoVAXtp6MKMlcbAt4ddqmGqUJ6fQZFXkNZNkNlfevtNkGtaSoXf/vNNNSvgrdXwtA=="
        },
        "nodemailer": {
            "version": "6.7.2",
            "resolved": "https://registry.npmjs.org/nodemailer/-/nodemailer-6.7.2.tgz",
            "integrity": "sha512-Dz7zVwlef4k5R71fdmxwR8Q39fiboGbu3xgswkzGwczUfjp873rVxt1O46+Fh0j1ORnAC6L9+heI8uUpO6DT7Q=="
        },
        "nodemon": {
            "version": "2.0.20",
            "resolved": "https://registry.npmjs.org/nodemon/-/nodemon-2.0.20.tgz",
            "integrity": "sha512-Km2mWHKKY5GzRg6i1j5OxOHQtuvVsgskLfigG25yTtbyfRGn/GNvIbRyOf1PSCKJ2aT/58TiuUsuOU5UToVViw==",
            "requires": {
                "chokidar": "^3.5.2",
                "debug": "^3.2.7",
                "ignore-by-default": "^1.0.1",
                "minimatch": "^3.1.2",
                "pstree.remy": "^1.1.8",
                "semver": "^5.7.1",
                "simple-update-notifier": "^1.0.7",
                "supports-color": "^5.5.0",
                "touch": "^3.1.0",
                "undefsafe": "^2.0.5"
            },
            "dependencies": {
                "debug": {
                    "version": "3.2.7",
                    "resolved": "https://registry.npmjs.org/debug/-/debug-3.2.7.tgz",
                    "integrity": "sha512-CFjzYYAi4ThfiQvizrFQevTTXHtnCqWfe7x1AhgEscTz6ZbLbfoLRLPugTQyBth6f8ZERVUSyWHFD/7Wu4t1XQ==",
                    "requires": {
                        "ms": "^2.1.1"
                    }
                },
                "ms": {
                    "version": "2.1.3",
                    "resolved": "https://registry.npmjs.org/ms/-/ms-2.1.3.tgz",
                    "integrity": "sha512-6FlzubTLZG3J2a/NVCAleEhjzq5oxgHyaCU9yYXvcLsvoVaHJq/s5xXI6/XXP6tz7R9xAOtHnSO/tXtF3WRTlA=="
                }
            }
        },
        "nopt": {
            "version": "1.0.10",
            "resolved": "https://registry.npmjs.org/nopt/-/nopt-1.0.10.tgz",
            "integrity": "sha1-bd0hvSoxQXuScn3Vhfim83YI6+4=",
            "requires": {
                "abbrev": "1"
            }
        },
        "normalize-path": {
            "version": "3.0.0",
            "resolved": "https://registry.npmjs.org/normalize-path/-/normalize-path-3.0.0.tgz",
            "integrity": "sha512-6eZs5Ls3WtCisHWp9S2GUy8dqkpGi4BVSz3GaqiE6ezub0512ESztXUwUB6C6IKbQkY2Pnb/mD4WYojCRwcwLA=="
        },
        "npmlog": {
            "version": "5.0.1",
            "resolved": "https://registry.npmjs.org/npmlog/-/npmlog-5.0.1.tgz",
            "integrity": "sha512-AqZtDUWOMKs1G/8lwylVjrdYgqA4d9nu8hc+0gzRxlDb1I10+FHBGMXs6aiQHFdCUUlqH99MUMuLfzWDNDtfxw==",
            "requires": {
                "are-we-there-yet": "^2.0.0",
                "console-control-strings": "^1.1.0",
                "gauge": "^3.0.0",
                "set-blocking": "^2.0.0"
            }
        },
        "object-assign": {
            "version": "4.1.1",
            "resolved": "https://registry.npmjs.org/object-assign/-/object-assign-4.1.1.tgz",
            "integrity": "sha1-IQmtx5ZYh8/AXLvUQsrIv7s2CGM="
        },
        "object-inspect": {
            "version": "1.12.2",
            "resolved": "https://registry.npmjs.org/object-inspect/-/object-inspect-1.12.2.tgz",
            "integrity": "sha512-z+cPxW0QGUp0mcqcsgQyLVRDoXFQbXOwBaqyF7VIgI4TWNQsDHrBpUQslRmIfAoYWdYzs6UlKJtB2XJpTaNSpQ=="
        },
        "on-finished": {
            "version": "2.3.0",
            "resolved": "https://registry.npmjs.org/on-finished/-/on-finished-2.3.0.tgz",
            "integrity": "sha1-IPEzZIGwg811M3mSoWlxqi2QaUc=",
            "requires": {
                "ee-first": "1.1.1"
            }
        },
        "once": {
            "version": "1.4.0",
            "resolved": "https://registry.npmjs.org/once/-/once-1.4.0.tgz",
            "integrity": "sha1-WDsap3WWHUsROsF9nFC6753Xa9E=",
            "requires": {
                "wrappy": "1"
            }
        },
        "parseurl": {
            "version": "1.3.3",
            "resolved": "https://registry.npmjs.org/parseurl/-/parseurl-1.3.3.tgz",
            "integrity": "sha512-CiyeOxFT/JZyN5m0z9PfXw4SCBJ6Sygz1Dpl0wqjlhDEGGBP1GnsUVEL0p63hoG1fcj3fHynXi9NYO4nWOL+qQ=="
        },
        "path-is-absolute": {
            "version": "1.0.1",
            "resolved": "https://registry.npmjs.org/path-is-absolute/-/path-is-absolute-1.0.1.tgz",
            "integrity": "sha1-F0uSaHNVNP+8es5r9TpanhtcX18="
        },
        "path-to-regexp": {
            "version": "0.1.7",
            "resolved": "https://registry.npmjs.org/path-to-regexp/-/path-to-regexp-0.1.7.tgz",
            "integrity": "sha1-32BBeABfUi8V60SQ5yR6G/qmf4w="
        },
        "picomatch": {
            "version": "2.3.1",
            "resolved": "https://registry.npmjs.org/picomatch/-/picomatch-2.3.1.tgz",
            "integrity": "sha512-JU3teHTNjmE2VCGFzuY8EXzCDVwEqB2a8fsIvwaStHhAWJEeVd1o1QD80CU6+ZdEXXSLbSsuLwJjkCBWqRQUVA=="
        },
        "proxy-addr": {
            "version": "2.0.7",
            "resolved": "https://registry.npmjs.org/proxy-addr/-/proxy-addr-2.0.7.tgz",
            "integrity": "sha512-llQsMLSUDUPT44jdrU/O37qlnifitDP+ZwrmmZcoSKyLKvtZxpyV0n2/bD/N4tBAAZ/gJEdZU7KMraoK1+XYAg==",
            "requires": {
                "forwarded": "0.2.0",
                "ipaddr.js": "1.9.1"
            }
        },
        "pstree.remy": {
            "version": "1.1.8",
            "resolved": "https://registry.npmjs.org/pstree.remy/-/pstree.remy-1.1.8.tgz",
            "integrity": "sha512-77DZwxQmxKnu3aR542U+X8FypNzbfJ+C5XQDk3uWjWxn6151aIMGthWYRXTqT1E5oJvg+ljaa2OJi+VfvCOQ8w=="
        },
        "punycode": {
            "version": "2.1.1",
            "resolved": "https://registry.npmjs.org/punycode/-/punycode-2.1.1.tgz",
            "integrity": "sha512-XRsRjdf+j5ml+y/6GKHPZbrF/8p2Yga0JPtdqTIY2Xe5ohJPD9saDJJLPvp9+NSBprVvevdXZybnj2cv8OEd0A=="
        },
        "qs": {
            "version": "6.11.0",
            "resolved": "https://registry.npmjs.org/qs/-/qs-6.11.0.tgz",
            "integrity": "sha512-MvjoMCJwEarSbUYk5O+nmoSzSutSsTwF85zcHPQ9OrlFoZOYIjaqBAJIqIXjptyD5vThxGq52Xu/MaJzRkIk4Q==",
            "requires": {
                "side-channel": "^1.0.4"
            }
        },
        "range-parser": {
            "version": "1.2.1",
            "resolved": "https://registry.npmjs.org/range-parser/-/range-parser-1.2.1.tgz",
            "integrity": "sha512-Hrgsx+orqoygnmhFbKaHE6c296J+HTAQXoxEF6gNupROmmGJRoyzfG3ccAveqCBrwr/2yxQ5BVd/GTl5agOwSg=="
        },
        "raw-body": {
            "version": "2.4.3",
            "resolved": "https://registry.npmjs.org/raw-body/-/raw-body-2.4.3.tgz",
            "integrity": "sha512-UlTNLIcu0uzb4D2f4WltY6cVjLi+/jEN4lgEUj3E04tpMDpUlkBo/eSn6zou9hum2VMNpCCUone0O0WeJim07g==",
            "requires": {
                "bytes": "3.1.2",
                "http-errors": "1.8.1",
                "iconv-lite": "0.4.24",
                "unpipe": "1.0.0"
            }
        },
        "readable-stream": {
            "version": "3.6.0",
            "resolved": "https://registry.npmjs.org/readable-stream/-/readable-stream-3.6.0.tgz",
            "integrity": "sha512-BViHy7LKeTz4oNnkcLJ+lVSL6vpiFeX6/d3oSH8zCW7UxP2onchk+vTGB143xuFjHS3deTgkKoXXymXqymiIdA==",
            "requires": {
                "inherits": "^2.0.3",
                "string_decoder": "^1.1.1",
                "util-deprecate": "^1.0.1"
            }
        },
        "readdirp": {
            "version": "3.6.0",
            "resolved": "https://registry.npmjs.org/readdirp/-/readdirp-3.6.0.tgz",
            "integrity": "sha512-hOS089on8RduqdbhvQ5Z37A0ESjsqz6qnRcffsMU3495FuTdqSm+7bhJ29JvIOsBDEEnan5DPu9t3To9VRlMzA==",
            "requires": {
                "picomatch": "^2.2.1"
            }
        },
        "redux": {
            "version": "4.1.2",
            "resolved": "https://registry.npmjs.org/redux/-/redux-4.1.2.tgz",
            "integrity": "sha512-SH8PglcebESbd/shgf6mii6EIoRM0zrQyjcuQ+ojmfxjTtE0z9Y8pa62iA/OJ58qjP6j27uyW4kUF4jl/jd6sw==",
            "peer": true,
            "requires": {
                "@babel/runtime": "^7.9.2"
            }
        },
        "redux-persist": {
            "version": "6.0.0",
            "resolved": "https://registry.npmjs.org/redux-persist/-/redux-persist-6.0.0.tgz",
            "integrity": "sha512-71LLMbUq2r02ng2We9S215LtPu3fY0KgaGE0k8WRgl6RkqxtGfl7HUozz1Dftwsb0D/5mZ8dwAaPbtnzfvbEwQ==",
            "requires": {}
        },
        "regenerator-runtime": {
            "version": "0.13.9",
            "resolved": "https://registry.npmjs.org/regenerator-runtime/-/regenerator-runtime-0.13.9.tgz",
            "integrity": "sha512-p3VT+cOEgxFsRRA9X4lkI1E+k2/CtnKtU4gcxyaCUreilL/vqI6CdZ3wxVUx3UOUg+gnUOQQcRI7BmSI656MYA==",
            "peer": true
        },
        "rimraf": {
            "version": "3.0.2",
            "resolved": "https://registry.npmjs.org/rimraf/-/rimraf-3.0.2.tgz",
            "integrity": "sha512-JZkJMZkAGFFPP2YqXZXPbMlMBgsxzE8ILs4lMIX/2o0L9UBw9O/Y3o6wFw/i9YLapcUJWwqbi3kdxIPdC62TIA==",
            "requires": {
                "glob": "^7.1.3"
            }
        },
        "safe-buffer": {
            "version": "5.2.1",
            "resolved": "https://registry.npmjs.org/safe-buffer/-/safe-buffer-5.2.1.tgz",
            "integrity": "sha512-rp3So07KcdmmKbGvgaNxQSJr7bGVSVk5S9Eq1F+ppbRo70+YeaDxkw5Dd8NPN+GD6bjnYm2VuPuCXmpuYvmCXQ=="
        },
        "safer-buffer": {
            "version": "2.1.2",
            "resolved": "https://registry.npmjs.org/safer-buffer/-/safer-buffer-2.1.2.tgz",
            "integrity": "sha512-YZo3K82SD7Riyi0E1EQPojLz7kpepnSQI9IyPbHHg1XXXevb5dJI7tpyN2ADxGcQbHG7vcyRHk0cbwqcQriUtg=="
        },
        "saslprep": {
            "version": "1.0.3",
            "resolved": "https://registry.npmjs.org/saslprep/-/saslprep-1.0.3.tgz",
            "integrity": "sha512-/MY/PEMbk2SuY5sScONwhUDsV2p77Znkb/q3nSVstq/yQzYJOH/Azh29p9oJLsl3LnQwSvZDKagDGBsBwSooag==",
            "optional": true,
            "requires": {
                "sparse-bitfield": "^3.0.3"
            }
        },
        "semver": {
            "version": "5.7.1",
            "resolved": "https://registry.npmjs.org/semver/-/semver-5.7.1.tgz",
            "integrity": "sha512-sauaDf/PZdVgrLTNYHRtpXa1iRiKcaebiKQ1BJdpQlWH2lCvexQdX55snPFyK7QzpudqbCI0qXFfOasHdyNDGQ=="
        },
        "send": {
            "version": "0.17.2",
            "resolved": "https://registry.npmjs.org/send/-/send-0.17.2.tgz",
            "integrity": "sha512-UJYB6wFSJE3G00nEivR5rgWp8c2xXvJ3OPWPhmuteU0IKj8nKbG3DrjiOmLwpnHGYWAVwA69zmTm++YG0Hmwww==",
            "requires": {
                "debug": "2.6.9",
                "depd": "~1.1.2",
                "destroy": "~1.0.4",
                "encodeurl": "~1.0.2",
                "escape-html": "~1.0.3",
                "etag": "~1.8.1",
                "fresh": "0.5.2",
                "http-errors": "1.8.1",
                "mime": "1.6.0",
                "ms": "2.1.3",
                "on-finished": "~2.3.0",
                "range-parser": "~1.2.1",
                "statuses": "~1.5.0"
            },
            "dependencies": {
                "ms": {
                    "version": "2.1.3",
                    "resolved": "https://registry.npmjs.org/ms/-/ms-2.1.3.tgz",
                    "integrity": "sha512-6FlzubTLZG3J2a/NVCAleEhjzq5oxgHyaCU9yYXvcLsvoVaHJq/s5xXI6/XXP6tz7R9xAOtHnSO/tXtF3WRTlA=="
                }
            }
        },
        "serve-static": {
            "version": "1.14.2",
            "resolved": "https://registry.npmjs.org/serve-static/-/serve-static-1.14.2.tgz",
            "integrity": "sha512-+TMNA9AFxUEGuC0z2mevogSnn9MXKb4fa7ngeRMJaaGv8vTwnIEkKi+QGvPt33HSnf8pRS+WGM0EbMtCJLKMBQ==",
            "requires": {
                "encodeurl": "~1.0.2",
                "escape-html": "~1.0.3",
                "parseurl": "~1.3.3",
                "send": "0.17.2"
            }
        },
        "set-blocking": {
            "version": "2.0.0",
            "resolved": "https://registry.npmjs.org/set-blocking/-/set-blocking-2.0.0.tgz",
            "integrity": "sha1-BF+XgtARrppoA93TgrJDkrPYkPc="
        },
        "setprototypeof": {
            "version": "1.2.0",
            "resolved": "https://registry.npmjs.org/setprototypeof/-/setprototypeof-1.2.0.tgz",
            "integrity": "sha512-E5LDX7Wrp85Kil5bhZv46j8jOeboKq5JMmYM3gVGdGH8xFpPWXUMsNrlODCrkoxMEeNi/XZIwuRvY4XNwYMJpw=="
        },
        "side-channel": {
            "version": "1.0.4",
            "resolved": "https://registry.npmjs.org/side-channel/-/side-channel-1.0.4.tgz",
            "integrity": "sha512-q5XPytqFEIKHkGdiMIrY10mvLRvnQh42/+GoBlFW3b2LXLE2xxJpZFdm94we0BaoV3RwJyGqg5wS7epxTv0Zvw==",
            "requires": {
                "call-bind": "^1.0.0",
                "get-intrinsic": "^1.0.2",
                "object-inspect": "^1.9.0"
            }
        },
        "sift": {
            "version": "16.0.0",
            "resolved": "https://registry.npmjs.org/sift/-/sift-16.0.0.tgz",
            "integrity": "sha512-ILTjdP2Mv9V1kIxWMXeMTIRbOBrqKc4JAXmFMnFq3fKeyQ2Qwa3Dw1ubcye3vR+Y6ofA0b9gNDr/y2t6eUeIzQ=="
        },
        "signal-exit": {
            "version": "3.0.7",
            "resolved": "https://registry.npmjs.org/signal-exit/-/signal-exit-3.0.7.tgz",
            "integrity": "sha512-wnD2ZE+l+SPC/uoS0vXeE9L1+0wuaMqKlfz9AMUo38JsyLSBWSFcHR1Rri62LZc12vLr1gb3jl7iwQhgwpAbGQ=="
        },
        "simple-update-notifier": {
            "version": "1.0.7",
            "resolved": "https://registry.npmjs.org/simple-update-notifier/-/simple-update-notifier-1.0.7.tgz",
            "integrity": "sha512-BBKgR84BJQJm6WjWFMHgLVuo61FBDSj1z/xSFUIozqO6wO7ii0JxCqlIud7Enr/+LhlbNI0whErq96P2qHNWew==",
            "requires": {
                "semver": "~7.0.0"
            },
            "dependencies": {
                "semver": {
                    "version": "7.0.0",
                    "resolved": "https://registry.npmjs.org/semver/-/semver-7.0.0.tgz",
                    "integrity": "sha512-+GB6zVA9LWh6zovYQLALHwv5rb2PHGlJi3lfiqIHxR0uuwCgefcOJc59v9fv1w8GbStwxuuqqAjI9NMAOOgq1A=="
                }
            }
        },
        "smart-buffer": {
            "version": "4.2.0",
            "resolved": "https://registry.npmjs.org/smart-buffer/-/smart-buffer-4.2.0.tgz",
            "integrity": "sha512-94hK0Hh8rPqQl2xXc3HsaBoOXKV20MToPkcXvwbISWLEs+64sBq5kFgn2kJDHb1Pry9yrP0dxrCI9RRci7RXKg=="
        },
        "socks": {
            "version": "2.7.0",
            "resolved": "https://registry.npmjs.org/socks/-/socks-2.7.0.tgz",
            "integrity": "sha512-scnOe9y4VuiNUULJN72GrM26BNOjVsfPXI+j+98PkyEfsIXroa5ofyjT+FzGvn/xHs73U2JtoBYAVx9Hl4quSA==",
            "requires": {
                "ip": "^2.0.0",
                "smart-buffer": "^4.2.0"
            }
        },
        "sparse-bitfield": {
            "version": "3.0.3",
            "resolved": "https://registry.npmjs.org/sparse-bitfield/-/sparse-bitfield-3.0.3.tgz",
            "integrity": "sha512-kvzhi7vqKTfkh0PZU+2D2PIllw2ymqJKujUcyPMd9Y75Nv4nPbGJZXNhxsgdQab2BmlDct1YnfQCguEvHr7VsQ==",
            "optional": true,
            "requires": {
                "memory-pager": "^1.0.2"
            }
        },
        "statuses": {
            "version": "1.5.0",
            "resolved": "https://registry.npmjs.org/statuses/-/statuses-1.5.0.tgz",
            "integrity": "sha1-Fhx9rBd2Wf2YEfQ3cfqZOBR4Yow="
        },
        "string_decoder": {
            "version": "1.3.0",
            "resolved": "https://registry.npmjs.org/string_decoder/-/string_decoder-1.3.0.tgz",
            "integrity": "sha512-hkRX8U1WjJFd8LsDJ2yQ/wWWxaopEsABU1XfkM8A+j0+85JAGppt16cr1Whg6KIbb4okU6Mql6BOj+uup/wKeA==",
            "requires": {
                "safe-buffer": "~5.2.0"
            }
        },
        "string-width": {
            "version": "4.2.3",
            "resolved": "https://registry.npmjs.org/string-width/-/string-width-4.2.3.tgz",
            "integrity": "sha512-wKyQRQpjJ0sIp62ErSZdGsjMJWsap5oRNihHhu6G7JVO/9jIB6UyevL+tXuOqrng8j/cxKTWyWUwvSTriiZz/g==",
            "requires": {
                "emoji-regex": "^8.0.0",
                "is-fullwidth-code-point": "^3.0.0",
                "strip-ansi": "^6.0.1"
            }
        },
        "strip-ansi": {
            "version": "6.0.1",
            "resolved": "https://registry.npmjs.org/strip-ansi/-/strip-ansi-6.0.1.tgz",
            "integrity": "sha512-Y38VPSHcqkFrCpFnQ9vuSXmquuv5oXOKpGeT6aGrr3o3Gc9AlVa6JBfUSOCnbxGGZF+/0ooI7KrPuUSztUdU5A==",
            "requires": {
                "ansi-regex": "^5.0.1"
            }
        },
        "supports-color": {
            "version": "5.5.0",
            "resolved": "https://registry.npmjs.org/supports-color/-/supports-color-5.5.0.tgz",
            "integrity": "sha512-QjVjwdXIt408MIiAqCX4oUKsgU2EqAGzs2Ppkm4aQYbjm+ZEWEcW4SfFNTr4uMNZma0ey4f5lgLrkB0aX0QMow==",
            "requires": {
                "has-flag": "^3.0.0"
            }
        },
        "tar": {
            "version": "6.1.11",
            "resolved": "https://registry.npmjs.org/tar/-/tar-6.1.11.tgz",
            "integrity": "sha512-an/KZQzQUkZCkuoAA64hM92X0Urb6VpRhAFllDzz44U2mcD5scmT3zBc4VgVpkugF580+DQn8eAFSyoQt0tznA==",
            "requires": {
                "chownr": "^2.0.0",
                "fs-minipass": "^2.0.0",
                "minipass": "^3.0.0",
                "minizlib": "^2.1.1",
                "mkdirp": "^1.0.3",
                "yallist": "^4.0.0"
            }
        },
        "to-regex-range": {
            "version": "5.0.1",
            "resolved": "https://registry.npmjs.org/to-regex-range/-/to-regex-range-5.0.1.tgz",
            "integrity": "sha512-65P7iz6X5yEr1cwcgvQxbbIw7Uk3gOy5dIdtZ4rDveLqhrdJP+Li/Hx6tyK0NEb+2GCyneCMJiGqrADCSNk8sQ==",
            "requires": {
                "is-number": "^7.0.0"
            }
        },
        "toidentifier": {
            "version": "1.0.1",
            "resolved": "https://registry.npmjs.org/toidentifier/-/toidentifier-1.0.1.tgz",
            "integrity": "sha512-o5sSPKEkg/DIQNmH43V0/uerLrpzVedkUh8tGNvaeXpfpuwjKenlSox/2O/BTlZUtEe+JG7s5YhEz608PlAHRA=="
        },
        "touch": {
            "version": "3.1.0",
            "resolved": "https://registry.npmjs.org/touch/-/touch-3.1.0.tgz",
            "integrity": "sha512-WBx8Uy5TLtOSRtIq+M03/sKDrXCLHxwDcquSP2c43Le03/9serjQBIztjRz6FkJez9D/hleyAXTBGLwwZUw9lA==",
            "requires": {
                "nopt": "~1.0.10"
            }
        },
        "tr46": {
            "version": "3.0.0",
            "resolved": "https://registry.npmjs.org/tr46/-/tr46-3.0.0.tgz",
            "integrity": "sha512-l7FvfAHlcmulp8kr+flpQZmVwtu7nfRV7NZujtN0OqES8EL4O4e0qqzL0DC5gAvx/ZC/9lk6rhcUwYvkBnBnYA==",
            "requires": {
                "punycode": "^2.1.1"
            }
        },
        "type-is": {
            "version": "1.6.18",
            "resolved": "https://registry.npmjs.org/type-is/-/type-is-1.6.18.tgz",
            "integrity": "sha512-TkRKr9sUTxEH8MdfuCSP7VizJyzRNMjj2J2do2Jr3Kym598JVdEksuzPQCnlFPW4ky9Q+iA+ma9BGm06XQBy8g==",
            "requires": {
                "media-typer": "0.3.0",
                "mime-types": "~2.1.24"
            }
        },
        "undefsafe": {
            "version": "2.0.5",
            "resolved": "https://registry.npmjs.org/undefsafe/-/undefsafe-2.0.5.tgz",
            "integrity": "sha512-WxONCrssBM8TSPRqN5EmsjVrsv4A8X12J4ArBiiayv3DyyG3ZlIg6yysuuSYdZsVz3TKcTg2fd//Ujd4CHV1iA=="
        },
        "unpipe": {
            "version": "1.0.0",
            "resolved": "https://registry.npmjs.org/unpipe/-/unpipe-1.0.0.tgz",
            "integrity": "sha1-sr9O6FFKrmFltIF4KdIbLvSZBOw="
        },
        "url-template": {
            "version": "2.0.8",
            "resolved": "https://registry.npmjs.org/url-template/-/url-template-2.0.8.tgz",
            "integrity": "sha512-XdVKMF4SJ0nP/O7XIPB0JwAEuT9lDIYnNsK8yGVe43y0AWoKeJNdv3ZNWh7ksJ6KqQFjOO6ox/VEitLnaVNufw=="
        },
        "util-deprecate": {
            "version": "1.0.2",
            "resolved": "https://registry.npmjs.org/util-deprecate/-/util-deprecate-1.0.2.tgz",
            "integrity": "sha1-RQ1Nyfpw3nMnYvvS1KKJgUGaDM8="
        },
        "utils-merge": {
            "version": "1.0.1",
            "resolved": "https://registry.npmjs.org/utils-merge/-/utils-merge-1.0.1.tgz",
            "integrity": "sha1-n5VxD1CiZ5R7LMwSR0HBAoQn5xM="
        },
        "uuid": {
            "version": "9.0.0",
            "resolved": "https://registry.npmjs.org/uuid/-/uuid-9.0.0.tgz",
            "integrity": "sha512-MXcSTerfPa4uqyzStbRoTgt5XIe3x5+42+q1sDuy3R5MDk66URdLMOZe5aPX/SQd+kuYAh0FdP/pO28IkQyTeg=="
        },
        "vary": {
            "version": "1.1.2",
            "resolved": "https://registry.npmjs.org/vary/-/vary-1.1.2.tgz",
            "integrity": "sha1-IpnwLG3tMNSllhsLn3RSShj2NPw="
        },
        "web-streams-polyfill": {
            "version": "3.2.0",
            "resolved": "https://registry.npmjs.org/web-streams-polyfill/-/web-streams-polyfill-3.2.0.tgz",
            "integrity": "sha512-EqPmREeOzttaLRm5HS7io98goBgZ7IVz79aDvqjD0kYXLtFZTc0T/U6wHTPKyIjb+MdN7DFIIX6hgdBEpWmfPA=="
        },
        "webidl-conversions": {
            "version": "7.0.0",
            "resolved": "https://registry.npmjs.org/webidl-conversions/-/webidl-conversions-7.0.0.tgz",
            "integrity": "sha512-VwddBukDzu71offAQR975unBIGqfKZpM+8ZX6ySk8nYhVoo5CYaZyzt3YBvYtRtO+aoGlqxPg/B87NGVZ/fu6g=="
        },
        "whatwg-url": {
            "version": "11.0.0",
            "resolved": "https://registry.npmjs.org/whatwg-url/-/whatwg-url-11.0.0.tgz",
            "integrity": "sha512-RKT8HExMpoYx4igMiVMY83lN6UeITKJlBQ+vR/8ZJ8OCdSiN3RwCq+9gH0+Xzj0+5IrM6i4j/6LuvzbZIQgEcQ==",
            "requires": {
                "tr46": "^3.0.0",
                "webidl-conversions": "^7.0.0"
            }
        },
        "wide-align": {
            "version": "1.1.5",
            "resolved": "https://registry.npmjs.org/wide-align/-/wide-align-1.1.5.tgz",
            "integrity": "sha512-eDMORYaPNZ4sQIuuYPDHdQvf4gyCF9rEEV/yPxGfwPkRodwEgiMUUXTx/dex+Me0wxx53S+NgUHaP7y3MGlDmg==",
            "requires": {
                "string-width": "^1.0.2 || 2 || 3 || 4"
            }
        },
        "wrappy": {
            "version": "1.0.2",
            "resolved": "https://registry.npmjs.org/wrappy/-/wrappy-1.0.2.tgz",
            "integrity": "sha1-tSQ9jz7BqjXxNkYFvA0QNuMKtp8="
        },
        "yallist": {
            "version": "4.0.0",
            "resolved": "https://registry.npmjs.org/yallist/-/yallist-4.0.0.tgz",
            "integrity": "sha512-3wdGidZyq5PB084XLES5TpOSRA3wjXAlIWMhum2kRcv/41Sn2emQ0dycQW4uZXLejwKvg6EsvbdlVL+FYEct7A=="
        }
    }
}


================================================
File: back-end/package.json
================================================
{
    "name": "back-end",
    "version": "1.0.0",
    "description": "",
    "main": "index.js",
    "type": "module",
    "scripts": {
        "start": "node index.js",
        "dev": "nodemon index.js"
    },
    "author": "",
    "license": "ISC",
    "dependencies": {
        "bcrypt": "^5.0.1",
        "body-parser": "^1.19.2",
        "cookie-parser": "^1.4.6",
        "cors": "^2.8.5",
        "date-fns": "^2.29.3",
        "dotenv": "^16.0.0",
        "express": "^4.17.3",
        "generate-password": "^1.7.0",
        "googleapis": "^108.0.0",
        "jsonwebtoken": "^8.5.1",
        "jwt-decode": "^3.1.2",
        "moment": "^2.29.4",
        "mongoose": "^6.2.4",
        "node-fetch": "^3.2.2",
        "nodemailer": "^6.7.2",
        "nodemon": "^2.0.15",
        "qs": "^6.11.0",
        "redux-persist": "^6.0.0"
    }
}


================================================
File: back-end/vercel.json
================================================
{
    "version": 2,
    "builds": [{
        "src": "./index.js",
        "use": "@vercel/node"
    }],
    "routes": [{
        "src": "/(.*)",
        "dest": "/"
    }]
}

================================================
File: back-end/.gitignore
================================================
# Logs
logs
*.log
npm-debug.log*
yarn-debug.log*
yarn-error.log*
lerna-debug.log*
.pnpm-debug.log*

# Diagnostic reports (https://nodejs.org/api/report.html)
report.[0-9]*.[0-9]*.[0-9]*.[0-9]*.json

# Runtime data
pids
*.pid
*.seed
*.pid.lock

# Directory for instrumented libs generated by jscoverage/JSCover
lib-cov

# Coverage directory used by tools like istanbul
coverage
*.lcov

# nyc test coverage
.nyc_output

# Grunt intermediate storage (https://gruntjs.com/creating-plugins#storing-task-files)
.grunt

# Bower dependency directory (https://bower.io/)
bower_components

# node-waf configuration
.lock-wscript

# Compiled binary addons (https://nodejs.org/api/addons.html)
build/Release

# Dependency directories
node_modules/
jspm_packages/

# Snowpack dependency directory (https://snowpack.dev/)
web_modules/

# TypeScript cache
*.tsbuildinfo

# Optional npm cache directory
.npm

# Optional eslint cache
.eslintcache

# Optional stylelint cache
.stylelintcache

# Microbundle cache
.rpt2_cache/
.rts2_cache_cjs/
.rts2_cache_es/
.rts2_cache_umd/

# Optional REPL history
.node_repl_history

# Output of 'npm pack'
*.tgz

# Yarn Integrity file
.yarn-integrity

# dotenv environment variable files
.env
.env.development.local
.env.test.local
.env.production.local
.env.local

# parcel-bundler cache (https://parceljs.org/)
.cache
.parcel-cache

# Next.js build output
.next
out

# Nuxt.js build / generate output
.nuxt
dist

# Gatsby files
.cache/
# Comment in the public line in if your project uses Gatsby and not Next.js
# https://nextjs.org/blog/next-9-1#public-directory-support
# public

# vuepress build output
.vuepress/dist

# vuepress v2.x temp and cache directory
.temp
.cache

# Serverless directories
.serverless/

# FuseBox cache
.fusebox/

# DynamoDB Local files
.dynamodb/

# TernJS port file
.tern-port

# Stores VSCode versions used for testing VSCode extensions
.vscode-test

# yarn v2
.yarn/cache
.yarn/unplugged
.yarn/build-state.yml
.yarn/install-state.gz
.pnp.*


================================================
File: back-end/controllers/AdminController.js
================================================
import bcrypt from "bcrypt";
import { User } from "../models/User.js";
import jwt from "jsonwebtoken";
import { ResponseData, ResponseDetail } from "../services/ResponseJSON.js";
import { Role } from "../models/Role.js";
import { Novel } from "../models/Novel.js";
import {Bill} from "../models/Bill.js";
import { Comment } from "../models/Comment.js";
import { Rating } from "../models/Rating.js";
import { sendMail } from "../services/EmailService.js";
import mongoose from "mongoose";
import generator from "generate-password"

export const AdminController = {
    activeByAdmin: async (req, res) => {
       try {
           const userId = req.body.userId;
           const updateUser = await User.findByIdAndUpdate(userId, { active: true }, { new: true }).populate('roles')
   
           if (updateUser)
               return res.status(200).json(ResponseData(200, updateUser))
           return res.status(400).json(ResponseDetail(400, {message:"Kích hoạt thất bại"}))
       }
       catch (error) {
           console.log(error)
           return res.status(500).json(ResponseDetail(500, { message: "Lỗi cập nhật quyền tài khoản" }))
       }
   },
   inactiveByAdmin: async (req, res) => {
       try {
           const userId = req.body.userId;
           const updateUser = await User.findByIdAndUpdate(userId, { active: false }, { new: true }).populate('roles')
           if (updateUser)
               return res.status(200).json(ResponseData(200, updateUser))
           return res.status(400).json(ResponseDetail(400,  {message:"Khoá thất bại"}))
       }
       catch (error) {
           console.log(error)
           return res.status(500).json(ResponseDetail(500, { message: "Lỗi cập nhật quyền tài khoản" }))
       }
   },
   updateRoles:async(req,res)=>{
        try{
            const rolesRequest = req.body.roles;
            const username = req.body.username;
            let roles=[]
            const getRoles =async(list)=>{
                const roles=[]
                for(let i=0;i<list.length;i++){
                    let role = await Role.findOne({name:list[i]})
                roles.push(role)
                }
                return roles
            }
            roles = await getRoles(rolesRequest)
            if(username){
                const newUser=await User.updateOne({username},{roles:roles.map(item=>item.id)},{new:true})
                if(newUser){
                    return res.status(200).json(ResponseData(200,{message:"Cập nhật quyền thành công"}))
                }
                else
                    return res.status(400).json(ResponseDetail(400,{message:"Cập nhật không thành công"}))
            }else
                return res.status(400).json(ResponseDetail(400,{message:"Không có username"}))
        }
        catch (error) {
            console.log(error)
            return res.status(500).json(ResponseDetail(500,{message:"Lỗi cập nhật quyền tài khoản"}))
        }
    },

    deleteAccount: async(req,res)=>{
        try {
            const userId = req.body.userId;
            const updateUser = await User.findByIdAndUpdate( userId, { isDeleted: true })
            if (updateUser)
            {
                updateUser['isDeleted']=true
                return res.status(200).json(ResponseData(200, updateUser))
            }
                
            return res.status(400).json(ResponseDetail(400, {message:"Xóa tài khoản thất bại"}))
        }
        catch (error) {
            console.log(error)
            return res.status(500).json(ResponseDetail(500, { message: "Lỗi xóa tài khoản" }))
        }
    },
    deleteNovelById: async(req,res) => {
        try {
            const novelId = req.body.novelId
            const novel = await Novel.findOne({ _id: novelId })
            if (novel) {
                const response = await Novel.deleteOne({ _id: novel._id })
                if (response.deletedCount == 1)
                    return res.status(200).json(ResponseData(200, { message: "Xoá truyện thành công" }))
                return res.status(400).json(ResponseDetail(400, { message: "Xoá truyện không thành công" }))

            }
            else
                return res.status(400).json(ResponseDetail(400, { message: "Không tìm thấy truyện" }))
        } catch (error) {
            console.log(error)
            return res.status(500).json(ResponseDetail(500, { message: "Lỗi sửa truyện" }))
        }
    },
    GetListUser: (req, res) => {
        try {

            User.find().sort({ name: -1 })
                .then(result => {
                    res.status(200).json(ResponseData(200, result))
                }).
                catch(err => {
                    console.log(err)
                    res.status(500).json(ResponseDetail(500, { message: "Lỗi GetUsers" }))
                })
        } catch (error) {
            console.log(error)
            res.status(500).json(ResponseDetail(500, { message: "Lỗi GetUsers" }))
        }
    },
    GetNovels: (req, res) => {
        try {

            Novel.find().sort({ name: -1 })
                .then(result => {
                    res.status(200).json(ResponseData(200, result))
                }).
                catch(err => {
                    console.log(err)
                    res.status(500).json(ResponseDetail(500, { message: "Lỗi GetNovels" }))
                })
        } catch (error) {
            console.log(error)
            res.status(500).json(ResponseDetail(500, { message: "Lỗi GetNovels" }))
        }
    },
    GetBills: async (req, res) => {
        try{
            let listPayments= await Bill.find().populate('userId').populate('orderId')
            // listPayments=listPayments.map(item=>{return {
            //     orderId:item.orderId,
            //     name:item.userId.nickname,
            //     amount:item.amount,
            //     description:item.description,
            //     status:item.status,
            //     createdAt: item.createdAt
            // }})
            return res.status(200).json(ResponseData(200,listPayments))
        }catch(error){
            console.log(error)
            return res.status(500).json(ResponseDetail(500,{message:"Không xác định"}))
        }
    },
    GetUserById: async (req,res)=>{
        try {
            const userId=req.body.userId
            const user =await User.findOne({_id:userId}).populate("roles");

            return res.status(200).json(ResponseData(200,{userInfo:user}))
        } catch (error) {
            console.log(error)
            return res.status(500).json(ResponseDetail(500,{message:"Lỗi xác thực"}))
        }
    },
    inactiveWithIdByAdmin: async (req, res) => {
        try {
            const userId = req.body.userId;
            const updateUser = await User.findOneAndUpdate({ userId:userId }, { active: false }, { new: true }).populate('roles')
            if (updateUser)
                return res.status(200).json(ResponseData(200, updateUser))
            return res.status(400).json(ResponseDetail(400,  {message:"Khoá thất bại"}))
        }
        catch (error) {
            console.log(error)
            return res.status(500).json(ResponseDetail(500, { message: "Lỗi cập nhật quyền tài khoản" }))
        }
    },
    updateDeleteStatus: async (req,res) => {
        try {
            const username = req.body.username;
            const updateUser = await User.findOneAndUpdate( {username:username}, { isDeleted: false })
            if (updateUser)
            {
                updateUser['isDeleted']=true
                return res.status(200).json(ResponseData(200, updateUser))
            }
                
            return res.status(400).json(ResponseDetail(400, {message:"Xóa tài khoản thất bại"}))
        }
        catch (error) {
            console.log(error)
            return res.status(500).json(ResponseDetail(500, { message: "Lỗi xóa tài khoản" }))
        }
    },
    GetListOfComments: async (req, res) => {
        try {
            let comments = await Comment.find().sort({createdAt:-1}).populate('userId').populate('novelId')
                return res.status(200).json(ResponseData(200, comments))

        } catch (error) {
            console.log(error)
            return res.status(500).json(ResponseDetail(200, { message: "Lỗi tạo comment" }))
        }
    },
    GetListRating: async (req, res) => {
        try {
            let ratings = await Rating.find().sort({createdAt:-1}).populate('userId').populate('novelId')
                return res.status(200).json(ResponseData(200, ratings))
        } catch (error) {
            console.log(error)
            return res.status(500).json(ResponseDetail(200, { message: "Lỗi tạo comment" }))
        }
    },
    DeleteRating: async (req, res) => {
        try {
            const ratingid = req.query.id
            console.log(ratingid)
            const rate = await Rating.findById(ratingid)
            const novel =  await Novel.findOne({_id: rate.novelId})
            const count = await Rating.findByIdAndDelete(ratingid)
            const total = await Rating.find({novelId: novel._id})
            novel.numberofrating = total.length
            await novel.save()
            if(count) 
                return res.status(200).json(ResponseData(200, {message:"Xoá thành công"}))
            else {
                return res.status(400).json(ResponseDetail(400, { message: 'Xoá thất bại' }))
            }

        } catch (error) {
            console.log(error)
            return res.status(500).json(ResponseDetail(200, { message: "Lỗi xoá comment" }))
        }
    },
    DeleteComment: async (req, res) => {
        try {
            const commentId = req.query.id
            const count = await Comment.findByIdAndDelete(commentId)
            if(count) 
                return res.status(200).json(ResponseData(200, {message:"Xoá thành công"}))
            else {
                return res.status(400).json(ResponseDetail(400, { message: 'Xoá thất bại' }))
            }

        } catch (error) {
            console.log(error)
            return res.status(500).json(ResponseDetail(200, { message: "Lỗi xoá comment" }))
        }
    },
    GetNovelCommentRatings: async (req,res)=>{
        try {
            let novels = await Novel.find().populate('uploader')
            let ratings = await Rating.find().sort({createdAt:-1}).populate('userId')
            let comments = await Comment.find().sort({createdAt:-1}).populate('userId')
            novels=novels.map((item,index)=>{
                let tempListRatings=ratings.filter((value)=>{
                   return value.novelId.toString()===item.id.toString() 
                })
                let tempListComments=comments.filter((value)=>{
                    return value.novelId.toString()===item.id.toString() 
                 })
                return {
                    ...item._doc,
                    comments:tempListComments,
                    ratings:tempListRatings,
                }
            })
                return res.status(200).json(ResponseData(200, novels))
        } catch (error) {
            console.log(error)
            return res.status(500).json(ResponseDetail(200, { message: "Lỗi tạo comment" }))
        }
    },
    GetNovelReviewById: async(req,res)=>{
        try {
            const novelId = req.body.novelId
            const novel = await Novel.findOne({ _id: novelId })
            if (novel) {
                let ratings = await Rating.find({novelId: novel._id}).populate('userId')
                let comments = await Comment.find({novelId: novel._id}).populate('userId')
                let resultReviewNovel={
                    ...novel._doc,
                    ratings:ratings,
                    comments:comments,
                }
                return res.status(200).json(ResponseData(200,{reviewNovelInfo:resultReviewNovel}))
            }
            else
                return res.status(400).json(ResponseDetail(400, { message: "Không tìm thấy truyện" }))
        } catch (error) {
            console.log(error)
            return res.status(500).json(ResponseDetail(500, { message: "Lỗi sửa truyện" }))
        }
    },
    GetNovelReviewByUrl: async(req,res)=>{
        try {
            const url = req.body.url
            const novel = await Novel.findOne({ url: url })
            if (novel) {
                let ratings = await Rating.find({novelId: novel._id}).populate('userId')
                let comments = await Comment.find({novelId: novel._id}).populate('userId')
                let resultReviewNovel={
                    ...novel._doc,
                    ratings:ratings,
                    comments:comments,
                }
                return res.status(200).json(ResponseData(200,{reviewNovelInfo:resultReviewNovel}))
            }
            else
                return res.status(400).json(ResponseDetail(400, { message: "Không tìm thấy truyện" }))
        } catch (error) {
            console.log(error)
            return res.status(500).json(ResponseDetail(500, { message: "Lỗi sửa truyện" }))
        }
    }
} 

================================================
File: back-end/controllers/AuthController.js
================================================
import bcrypt from "bcrypt";
import { User } from "../models/User.js";
import jwt from "jsonwebtoken";
import { ResponseData, ResponseDetail } from "../services/ResponseJSON.js";
import { Role } from "../models/Role.js";
import { sendMail } from "../services/EmailService.js";
import mongoose from "mongoose";
import generator from "generate-password"
export const AuthController = {
    generateAccessToken: (data) => {
        const accessToken = jwt.sign(
            data,
            process.env.JWT_ACCESS_KEY,
            { expiresIn: "2h" }
        )
        return accessToken
    },
    generateRefreshToken: (data) => {
        const accessToken = jwt.sign(
            data,
            process.env.JWT_ACCESS_KEY,
            { expiresIn: "7d" }
        )
        return accessToken
    },
    RegisterUser: async (req, res) => {
        try {
            const roles = await Role.find({ name: "USER" });
            const salt = await bcrypt.genSalt(10);
            const hash = await bcrypt.hash(req.body.password, salt);
            console.log(hash)
            const newUser = await new User({
                username: req.body.username,
                password: hash,
                email: req.body.email,
                roles: roles.map(item => item._id),
                birthdate:new Date(),
                balance: 0
            });
            let error = newUser.validateSync();
            if(error)
                return res.status(400).json(ResponseDetail(400, { 
                    message: error.errors['email']?.message||error.errors['username']?.message }))
            let temp = (await User.findOne({ username: req.body.username }))
            if (temp) {
                return res.status(400).json(ResponseDetail(400, { username: "Username đã tồn tại" }))
            }
            temp = (await User.findOne({ email: req.body.email }))
            if (temp) {
                return res.status(400).json(ResponseDetail(400, { username: "Email đã tồn tại" }))
            }
            const activeCode = jwt.sign(
                { email:req.body.email },
                process.env.JWT_ACCESS_KEY,
                { expiresIn: "15m" }
            )
            sendMail(req.body.email , "Kích hoạt tài khoản", process.env.CLIENT_URL + "active/" + activeCode)
            .then(async (response)=>{
                const user = await newUser.save();
                return res.status(200).json(ResponseData(200, user))

            })
            .catch(err=>{
                res.status(500).json(ResponseDetail(400, { username: "Tạo tài khoản không thành công" }))
            })

        } catch (error) {
            console.log(error)
            res.status(500).json(ResponseDetail(400, { username: "Lỗi tạo tài khoản" }))
        }

    },

    LoginUser: async (req, res) => {
        try {
            console.log(req.body.username)
            const user = await User.findOne({ username: req.body.username }).populate("roles");

            if (!user) {
                return res.status(404).json(ResponseDetail(400, { username: "Sai tên đăng nhập/mật khẩu" }))
            }
            if(user.isDeleted){
                return res.status(404).json(ResponseDetail(400, { username: "Sai tên đăng nhập/mật khẩu" }))
            }
            const auth = await bcrypt.compare(req.body.password, user.password)
            if (auth) {
                const data = {
                    sub: user.username,
                    roles: user.roles.map(item => item.name)
                };
                const accessToken = AuthController.generateAccessToken(data);
                const refreshToken = AuthController.generateRefreshToken(data);
                const { username, nickname, image, roles,balance,_id,birthdate,email } = user._doc;

                res.cookie("token", refreshToken, {
                    httpOnly: true,
                    secure: false,
                    sameSite: "strict"
                })
                return res.status(200).json(ResponseData(200, {
                    username,
                    nickname,
                    birthdate,
                    image,
                    accessToken,
                    refreshToken,
                    email,
                    id:_id,
                    roles: roles.map(item => item.name),
                    balance
                }));
            }
            return res.status(404).json(ResponseDetail(400, { username: "Sai tên đăng nhập/mật khẩu" }))

        } catch (error) {
            console.log(error)
            return res.status(500).json(ResponseDetail(500, { message: "Lỗi đăng nhập" }))
        }
    },

    LoginUserAdmin: async (req, res) => {
        try {
            console.log(req.body.username)
            const user = await User.findOne({ username: req.body.username }).populate("roles");

            if (!user) {
                return res.status(404).json(ResponseDetail(400, { username: "Sai tên đăng nhập/mật khẩu" }))
            }
            const auth = await bcrypt.compare(req.body.password, user.password)
            if (auth) {
                const data = {
                    sub: user.username,
                    roles: user.roles.map(item => item.name)
                };
                const accessToken = AuthController.generateAccessToken(data);
                const refreshToken = AuthController.generateRefreshToken(data);
                const { username, nickname, image, roles,balance,_id,birthdate } = user._doc;

                res.cookie("token", refreshToken, {
                    httpOnly: true,
                    secure: false,
                    sameSite: "strict"
                })
                if(data.roles.length!=1&&(data.roles[0] == "ADMIN"||data.roles[1] == "ADMIN")){
                    return res.status(200).json(ResponseData(200, {
                        username,
                        nickname,
                        birthdate,
                        image,
                        accessToken,
                        refreshToken,
                        id:_id,
                        roles: roles.map(item => item.name),
                        balance
                    }));
                }
                return res.status(404).json(ResponseDetail(400, { username: "Không có quyền truy cập" }))
            }
            return res.status(404).json(ResponseDetail(400, { username: "Sai tên đăng nhập/mật khẩu" }))

        } catch (error) {
            console.log(error)
            return res.status(500).json(ResponseDetail(500, { message: "Lỗi đăng nhập" }))
        }
    },

    RefreshToken: async (req, res) => {
        try {
            const refreshToken = req.body.refreshToken;
            if (!refreshToken) {
                return res.status(401).json("Bạn chưa có token")
            }

            jwt.verify(refreshToken, process.env.JWT_ACCESS_KEY, (err, user) => {
                if (err) {
                    console.log("Lỗi:" + err)
                    return res.status(500).json(ResponseDetail(500, { message: "Token sai" }))
                }
                else {
                    const { iat, exp, ...data } = user;
                    const newAccessToken = AuthController.generateAccessToken(data);
                    const newRefreshToken = AuthController.generateRefreshToken(data);
                    console.log("refresh")
                    res.cookie("token", newRefreshToken, {
                        httpOnly: true,
                        secure: true,
                        sameSite: "strict"
                    })
                    return res.status(200).json(ResponseData(200, { refreshToken: newRefreshToken, accessToken: newAccessToken }));
                }

            })

        } catch (error) {
            console.log(error)
            res.status(500).json(error)
        }
    },

    LoadUsers: async (req, res) => {
        try {
            const listUser = await User.find().limit(20).populate('roles');
            return res.status(200).json(ResponseData(200, listUser))

        } catch (error) {
            return res.status(500).json(ResponseDetail(500, { message: "Lỗi lấy thông tin user" }))
        }
    },

    LoginWithAccessToken: async (req, res) => {
        try {
            const token = req.headers.token;
            if (token) {
                const accessToken = token.split(" ")[1];
                jwt.verify(accessToken, process.env.JWT_ACCESS_KEY, (err, user) => {
                    if (err) {
                        res.status(403).json("Token is not valid");
                    }
                    req.user = user
                })
            } else {
                res.status(401).json("Bạn không có token");
            }
        } catch (error) {
            res.status(500).json("Lỗi xác thực")
        }
    },

    ReActive: async (req, res) => {
        try {
            const email = req.body.email;
            console.log(email)
            if (email) {
                const user = await User.findOne({ email: email })
                if (user) {
                    if (user.active)
                        return res.status(400).json(ResponseDetail(400, { message: "Tài khoản đã được kích hoạt" }))
                    const activeCode = jwt.sign(
                        { email },
                        process.env.JWT_ACCESS_KEY,
                        { expiresIn: "15m" }
                    )
                    console.log("active:" + activeCode);
                    sendMail(email, "Kích hoạt tài khoản", process.env.CLIENT_URL + "active/" + activeCode)
                        .then(response => {
                            console.log(response)
                            return res.status(200).json(ResponseData(200, { message: "Đã gửi mail kích hoạt" }))
                        })
                        .catch(err => {
                            console.log(err)
                            return res.status(500).json(ResponseDetail(400, { message: "Lỗi gửi mail" }))
                        })

                }
                else {
                    return res.status(400).json(ResponseDetail(400, { message: "Tài khoản không tồn tại" }))
                }

            } else {
                res.status(400).json(ResponseDetail(400, { message: "Thiếu email" }));
            }
        } catch (error) {
            res.status(500).json(ResponseDetail(400, { message: "Lỗi xác thực" }))
        }
    }
    ,
    Forgotpassword: async (req, res) => {
        try {
            const email = req.body.email;
            var password = generator.generate({
                length: 12,
                numbers: true,
            });
            const salt = await bcrypt.genSalt(10);
            const hash = await bcrypt.hash(password, salt);
            if (email) {
                const user = await User.findOne({ email: email })
                if (user) {
                    const newUser = await User.findOneAndUpdate({email: email },{password:hash},{new:true})
                    
                    sendMail(email, "Mật khẩu mới", "Mật khẩu mới của tài khoản:"+password)
                        .then(response => {
                            console.log(response)
                            return res.status(200).json(ResponseData(200, { message: "Đã gửi mật khẩu mới" }))
                        })
                        .catch(err => {
                            console.log(err)
                            return res.status(500).json(ResponseDetail(400, { message: "Lỗi gửi mail" }))
                        })

                }
                else {
                    return res.status(400).json(ResponseDetail(400, { message: "Tài khoản không tồn tại" }))
                }

            } else {
                res.status(400).json(ResponseDetail(400, { message: "Thiếu email" }));
            }
        } catch (error) {
            res.status(500).json("Lỗi xác thực")
        }
    },
    Active: async (req, res) => {
        try {
            const key = req.query.key;
            if (key) {
                jwt.verify(key, process.env.JWT_ACCESS_KEY, async (err, user) => {
                    if (err) {
                        console.log(err)
                        return res.status(400).json(ResponseDetail(400, { message: "Mã kích hoạt hết hạn" }))
                    }
                    const email = user.email
                    const newUser = await User.findOneAndUpdate({ email: email }, { active: true }, { new: true })
                    console.log(newUser)
                    if (newUser) {
                        return res.status(200).json(ResponseDetail(200, { message: "Kích hoạt thành công" }))
                    }
                    return res.status(400).json(ResponseDetail(200, { message: "Kích hoạt không thành công" }))

                })
            }
            else {
                return res.status(400).json(ResponseDetail(400, { message: "Không có mã kích hoạt" }))
            }

        } catch (error) {
            return res.status(500).json(ResponseDetail(500, { message: "Lỗi kích hoạt" }))
        }
    },
    verifyToken: async (req, res) => {
        const token = req.headers.authorization;
        if (token) {
            const accessToken = token.split(" ")[1];
            console.log(accessToken)
            jwt.verify(accessToken, process.env.JWT_ACCESS_KEY, (err, user) => {
                if (err) {
                    return res.status(403).json(ResponseDetail(403, { message: "Token không hợp lệ" }));
                }
                return res.status(200).json(ResponseData(200, { message: "Hợp lệ" }))
            })
        } else {
            return res.status(401).json(ResponseDetail(401, { message: "Không có token" }));
        }
    },


    checkUsername: async (req, res) => {
        try {
            const username = req.body.username;
            const user = await User.findOne({ username:username })
            if (user)
                return res.status(200).json(ResponseData(200, {message:"Tên đăng nhập đã tồn tại trong hệ thống",valid: false}))
            return res.status(200).json(ResponseData(200, {message:"Tên đăng nhập hợp lý",valid: true}))
        }
        catch (error) {
            console.log(error)
            return res.status(500).json(ResponseDetail(500, { message: "Lỗi",valid: false }))
        }
    },
    checkEmail: async (req, res) => {
        try {
            const email = req.body.email;
            const user = await User.findOne({ email:email })
            if (user)
                return res.status(200).json(ResponseData(200, {message:"Email đã tồn tại trong hệ thống",valid: false}))
            return res.status(200).json(ResponseData(200, {message:"Email hợp lý",valid: true}))
        }
        catch (error) {
            console.log(error)
            return res.status(500).json(ResponseDetail(500, { message: "Lỗi",valid: false }))
        }
    }

}

================================================
File: back-end/controllers/CommentController.js
================================================
import jwt_decode from 'jwt-decode'
import { User } from '../models/User.js';
import { ResponseDetail, ResponseData } from '../services/ResponseJSON.js';
import { Novel } from '../models/Novel.js'
import { Comment } from '../models/Comment.js';

export const CommentController = {
    CreateComment: async (req, res) => {
        try {
            const token = req.headers.authorization.split(" ")[1];
            const content = req.body.content
            const url = req.body.urltruyen
            const username = jwt_decode(token).sub
            const user = await User.findOne({ username: username })
            if (user) {
                const novel = await Novel.findOne({ url: url })
                if (novel) {
                    const comment = await new Comment({
                        novelId: novel.id,
                        userId: user.id,
                        content: content
                    })
                    const cmtResponse = await comment.save()
                    const data={
                        id:cmtResponse.id,
                        content,
                        image:user.image,
                        nickname:user.nickname,
                        username:user.username,
                        createdAt:cmtResponse.createdAt

                    }
                    return res.status(200).json(ResponseData(200, data))
                } else {
                    return res.status(400).json(ResponseDetail(400, { message: 'Không tồn tại tài khoản' }))
                }
            } else {
                return res.status(400).json(ResponseDetail(400, { message: 'Không tồn tại tài khoản' }))
            }
        } catch (error) {
            return res.status(500).json(ResponseDetail(200, { message: "Lỗi tạo comment" }))
        }
    },
    GetCommentsByUrl: async (req, res) => {
        try {
            const url = req.params.url
            const novel = await Novel.findOne({ url: url })
            if (novel) {
                let comments = await Comment.find({
                    novelId: novel._id}).sort({createdAt:-1}).populate('userId')
                comments=comments.map(item=>{return {
                    nickname:item.userId.nickname,
                    image:item.userId.image,
                    content:item.content,
                    id:item.id,
                    username:item.userId.username,
                    createdAt:item.createdAt
                }})
                return res.status(200).json(ResponseData(200, comments))
            } else {
                return res.status(400).json(ResponseDetail(400, { message: 'Không tồn tại tài khoản' }))
            }

        } catch (error) {
            console.log(error)
            return res.status(500).json(ResponseDetail(200, { message: "Lỗi tạo comment" }))
        }
    },

    DeleteComment: async (req, res) => {
        try {
            const commentId = req.query.id
            const count = await Comment.findByIdAndDelete(commentId)
            if(count) 
                return res.status(200).json(ResponseData(200, {message:"Xoá thành công"}))
            else {
                return res.status(400).json(ResponseDetail(400, { message: 'Xoá thất bại' }))
            }
        } catch (error) {
            console.log(error)
            return res.status(500).json(ResponseDetail(200, { message: "Lỗi xoá comment" }))
        }
    }
}

================================================
File: back-end/controllers/NovelController.js
================================================
import { Novel } from "../models/Novel.js"
import { ResponseDetail, ResponseData } from "../services/ResponseJSON.js"
import { Chapter } from "../models/Chapter.js"
import jwt_decode from 'jwt-decode'
import { Reading } from '../models/Reading.js'
import { User } from '../models/User.js'
import mongoose from "mongoose"
import { Chapterunlocked } from "../models/Chapterunlocked.js"

export const NovelController = {
    CreateNovel: async (req, res) => {
        try {
            const name = req.body.tentruyen
            const url = req.body.url
            const image = req.body.hinhanh
            const type = req.body.theloai
            const author = req.body.tacgia
            const uploader = new mongoose.Types.ObjectId(req.body.nguoidangtruyen)
            const novel = await new Novel({ name, url, image, type, author, uploader })
            let error = novel.validateSync();
            if (error)
                return res.status(400).json(ResponseDetail(400, {
                    message: Object.values(error.errors)[0].message || 'Lỗi'
                }))

            const response = await novel.save()
            if (response) {
                return res.status(200).json(ResponseData(200, novel))
            }
            return res.status(400).json(ResponseDetail(400, { message: "Đăng truyện không thành công" }))
        } catch (error) {
            console.log(error)
            return res.status(500).json(ResponseDetail(500, { message: "Lỗi đăng truyện" }))
        }
    },
    EditNovel: async (req, res) => {
        try {
            const name = req.body.tentruyen
            const url = req.body.url
            const image = req.body.hinhanh
            const type = req.body.theloai
            const author = req.body.tacgia
            const id = new mongoose.Types.ObjectId(req.body.id)
            const username = req.user.sub
            const newUser = await User.findOne({ username: username })
            if (!newUser)
                return req.status(405).json(ResponseDetail(403, { message: "Bạn không có quyền sửa truyện của người khác" }))

            const novel = await Novel.findOne({ _id: id, uploader: newUser.id })
            if (!novel)
                return res.status(400).json(ResponseDetail(400, { message: "Bạn không có quyền sửa truyện của người khác" }))
            const newNovel = await Novel.findByIdAndUpdate(id, {
                name, url, image, type, author
            }, { new: true })
            if (newNovel)
                return res.status(200).json(ResponseData(200, novel))
            return res.status(400).json(ResponseDetail(400, { message: "Sửa truyện không thành công" }))
        } catch (error) {
            console.log(error)
            return res.status(500).json(ResponseDetail(500, { message: "Lỗi đăng truyện" }))
        }
    },
    DeleteNovelByUrl: async (req, res) => {
        try {
            const url = req.query.url

            const user = req.user
            const newUser = await User.findOne({ username: user.sub })
            if (!newUser)
                return res.status(405).json(ResponseDetail(403, { message: "Bạn không có quyền xoá truyện của người khác" }))
            const novel = await Novel.findOne({ url: url })
            if (novel) {
                if (!novel.uploader.equals(newUser._id)) {
                    return res.status(403).json(ResponseDetail(403, { message: "Bạn không có quyền xoá truyện của người khác" }))
                }
                const response = await Novel.deleteOne({ _id: novel._id })
                if (response.deletedCount == 1)
                    return res.status(200).json(ResponseData(200, { message: "Xoá truyện thành công" }))
                return res.status(400).json(ResponseDetail(400, { message: "Xoá truyện không thành công" }))

            }
            else
                return res.status(400).json(ResponseDetail(400, { message: "Không tìm thấy truyện" }))
        } catch (error) {
            console.log(error)
            return res.status(500).json(ResponseDetail(500, { message: "Lỗi sửa truyện" }))
        }
    },
    SearchNovelByName: async (req, res) => {
        try {
            let search = req.query.search
            if (!search) {
                return res.status(500).json(ResponseDetail(500, { message: "Thiếu field" }))
            }
            search = search.normalize("NFD").toLowerCase().replace(/[\u0300-\u036f]/g, "").replace(/[\u0300-\u036f]/g, "").split(' ').filter(i => i !== '').join(' ')
            console.log(search)
            const novels = await Novel.find({ $text: { $search: search } })
            if (novels) {
                return res.status(200).json(ResponseData(200, novels))
            }
        } catch (error) {
            console.log(error)
            return res.status(500).json(ResponseDetail(500, { message: "Lỗi tìm truyện" }))
        }
    },
    CreateChapter: async (req, res) => {
        try {
            let chaptername = req.body.tenchap
            const content = req.body.content
            const isLock = req.body.isLock || false
            const url = req.body.url
            if (content.length <= 10)
                return res.status(400).json(ResponseDetail(400, { message: "Nội dung phải dài hơn 10 kí tự" }))
            const novel = await Novel.findOne({ url: url })
            if (novel) {

                const newestChap = await Chapter.find({ novelId: novel._id }).sort({ chapternumber: -1 }).limit(1)
                let chapternumber = 1
                if (newestChap.length > 0) {
                    chapternumber = newestChap[0].chapternumber + 1
                }

                chaptername = `Chương ${chapternumber}: ${chaptername}`

                const chapter = await new Chapter({ chaptername, novelId: novel._id, content, chapternumber, isLock })
                const response = await chapter.save()
                const count = await Chapter.count({ novelId: novel._id })
                await Novel.updateOne({ _id: novel._id }, { numberofchapter: count })
                if (response) return res.status(200).json(ResponseData(200, response))
                return res.status(400).json(ResponseDetail(400, { message: "Đăng chương không thành công" }))
            }
            return res.status(400).json(ResponseDetail(400, { message: "Không tìm thấy truyện" }))
        } catch (error) {
            console.log(error)
            return res.status(500).json(ResponseDetail(500, { message: "Lỗi đăng truyện" }))
        }
    },
    UpdateChapter: async (req, res) => {
        try {
            let chaptername = req.body.tenchap
            const content = req.body.content
            const url = req.body.url
            const chapternumber = req.body.chapnumber
            const isLock = req.body.isLock
            const user = req.user
            if (content.length <= 10)
                return res.status(400).json(ResponseDetail(400, { message: "Nội dung phải dài hơn 10 kí tự" }))
            const newUser = await User.findOne({ username: user.sub })
            if (!newUser)
                return req.status(405).json(ResponseDetail(403, { message: "Bạn không có quyền sửa truyện của người khác" }))
            const novel = await Novel.findOne({ url: url })
            if (novel) {
                if (!novel.uploader.equals(newUser._id))
                    return res.status(403).json(ResponseDetail(403, { message: "Bạn không có quyền sửa truyện của người khác" }))
                const newChap = await Chapter.findOneAndUpdate({ chapternumber, novelId: novel._id }, { content, chaptername, isLock }, { new: true })
                if (newChap) return res.status(200).json(ResponseData(200, newChap))
                return res.status(400).json(ResponseDetail(400, { message: "Sửa chương không thành công" }))
            }
            return res.status(400).json(ResponseDetail(400, { message: "Không tìm thấy truyện" }))
        } catch (error) {
            console.log(error)
            return res.status(500).json(ResponseDetail(500, { message: "Lỗi sửa truyện" }))
        }
    },
    DeleteChapter: async (req, res) => {
        try {
            const url = req.query.url
            const chapnumber = req.query.chapnumber
            const user = req.user
            const newUser = await User.findOne({ username: user.sub })
            if (!newUser)
                return req.status(405).json(ResponseDetail(403, { message: "Bạn không có quyền xoá truyện của người khác" }))
            const novel = await Novel.findOne({ url: url })
            if (novel) {
                if (!novel.uploader.equals(newUser._id))
                    return res.status(403).json(ResponseDetail(403, { message: "Bạn không có quyền xoá truyện của người khác" }))
                const newChap = await Chapter.findOneAndDelete({ chapnumber, novelId: novel.id })
                const count = await Chapter.count({ novelId: novel._id })
                await Novel.updateOne({ _id: novel._id }, { numberofchapter: count })
                if (newChap) return res.status(200).json(ResponseData(200, { message: "Xoá chương thành công" }))
                return res.status(400).json(ResponseDetail(400, { message: "Xoá chương không thành công" }))
            }
            return res.status(400).json(ResponseDetail(400, { message: "Không tìm thấy truyện" }))
        } catch (error) {
            console.log(error)
            return res.status(500).json(ResponseDetail(500, { message: "Lỗi sửa truyện" }))
        }
    },
    GetNovelsByUserId: async (req, res) => {
        try {
            const status = req.query.status || 'None'
            const sort = req.query.sort || 'tentruyen'
            const page = req.query.page || 0
            const size = req.query.size || 20
            const id = req.query.id

            Novel.find({ uploader: new mongoose.Types.ObjectId(id) }).limit(size).skip(size * page).sort({ name: -1 })
                .then(result => {
                    res.status(200).json(ResponseData(200, result))
                }).
                catch(err => {
                    console.log(err)
                    res.status(500).json(ResponseDetail(500, { message: "Lỗi GetNovels" }))
                })
        } catch (error) {
            console.log(error)
            res.status(500).json(ResponseDetail(500, { message: "Lỗi GetNovels" }))
        }
    },

    GetNovels: (req, res) => {
        try {
            const status = req.query.status || 'None'
            const sort = req.query.sort || 'tentruyen'
            const page = req.query.page - 1 || 0
            const size = req.query.size || 6

            Novel.find().limit(size).skip(size * (page)).sort({ name: -1 })
                .then(result => {
                    res.status(200).json(ResponseData(200, result))
                }).
                catch(err => {
                    console.log(err)
                    res.status(500).json(ResponseDetail(500, { message: "Lỗi GetNovels" }))
                })
        } catch (error) {
            console.log(error)
            res.status(500).json(ResponseDetail(500, { message: "Lỗi GetNovels" }))
        }
    },
    GetNovelsTopRating: (req, res) => {
        try {
            const status = req.query.status || 'None'
            const sort = req.query.sort || 'tentruyen'
            const page = req.query.page - 1 || 0
            const size = req.query.size || 6

            Novel.find().limit(size).skip(size * (page)).sort({ rating: -1 })
                .then(result => {
                    res.status(200).json(ResponseData(200, result))
                }).
                catch(err => {
                    console.log(err)
                    res.status(500).json(ResponseDetail(500, { message: "Lỗi GetNovels" }))
                })
        } catch (error) {
            console.log(error)
            res.status(500).json(ResponseDetail(500, { message: "Lỗi GetNovels" }))
        }
    },

    GetNovelsByUrl: async (req, res) => {
        try {
            const url = req.params.url;
            const novel = await Novel.findOne({ url: url })
            if (novel)
                return res.status(200).json(ResponseData(200, novel))
            return res.status(400).json(ResponseDetail(400, { message: "Không tìm thấy truyện" }))

        } catch (error) {
            console.log(error)
            res.status(500).json(ResponseDetail(500, { message: "Lỗi lấy thông tin truyện" }))
        }
    },
    GetChapterByNumber: async (req, res) => {
        try {
            const chapNumber = req.params.chapNumber;
            const url = req.params.url

            const token = req.headers.authorization?.split(" ")[1];
            var username;
            if (token) {
                username = jwt_decode(token).sub
            }

            const novel = await Novel.findOne({ url: url })
            if (novel) {
                Chapter.findOne({ novelId: novel._id, chapternumber: chapNumber })
                    .then(
                        async (result) => {
                            if (username) {
                                const user = await User.findOne({ username })
                                if (user) {
                                    if (result.isLock === true) {
                                        if (novel.uploader.toString() === user._id.toString()) {
                                            return res.status(200).json(ResponseData(200, result))
                                        }
                                        const chapterisUnlock = await Chapterunlocked.findOne({ chapterId: result._id, userId: user._id })
                                        if (!chapterisUnlock) {
                                            return res.status(400).json(ResponseDetail(500, { message: "Bạn chưa mở khoá chương" }))
                                        }
                                    }
                                    let reading = await Reading.findOne({
                                        novelId: novel._id,
                                        userId: user._id
                                    })
                                    if (reading) {
                                        reading.chapternumber = chapNumber
                                    }
                                    else {
                                        reading = await new Reading({
                                            novelId: novel._id,
                                            userId: user._id,
                                            chapternumber: chapNumber
                                        })
                                    }
                                    await reading.save()
                                }
                            } else {
                                if (result.isLock === true) {
                                    return res.status(400).json(ResponseDetail(500, { message: "Bạn chưa mở khoá chương" }))
                                }
                            }
                            Novel.updateOne({ _id: novel._id }, { $inc: { reads: 1 } })
                            return res.status(200).json(ResponseData(200, result))
                        }
                    ).
                    catch(err => {
                        console.log(err)
                        return res.status(400).json(ResponseDetail(500, { message: "Không tìm thấy chap" }))
                    })
            }
            else {
                return res.status(400).json(ResponseDetail(500, { message: "Không tìm thấy truyện" }))
            }
        } catch (error) {
            console.log(error)
            res.status(500).json(ResponseDetail(500, { message: "Lỗi lấy thông tin chap" }))
        }
    },

    GetChapterByUrl: async (req, res) => {
        try {
            const url = req.params.url;
            const page = req.query.page || 0
            const size = req.query.size || 1000
            const novel = await Novel.findOne({ url: url })
            const token = req.headers.authorization?.split(" ")[1];
            var username;
            if (token) {
                username = jwt_decode(token).sub
            }

            if (novel) {
                Chapter.find({ novelId: novel._id })
                    .limit(size)
                    .skip((page) * size)
                    .sort({ chapternumber: 1 })
                    .select({ chapternumber: 1, chaptername: 1, isLock: 1 }).then(
                        async result => {
                            if (username) {
                                const user = await User.findOne({ username })
                                const listChapterId = result.map(item => item.id)

                                if (user) {
                                    let chapterisUnlock = await Chapterunlocked.find({ chapterId: { $in: listChapterId }, userId: user._id })
                                    let newChapterisUnlock = chapterisUnlock.reduce((total, current) => ({
                                        ...total,
                                        [current.chapterId]: { ...current._doc }
                                    })
                                        , {})
                                    for (let i = 0; i < result.length; i++) {
                                        result[i] = { ...result[i]._doc, unlock: false }
                                        if (newChapterisUnlock[result[i]._id]) {
                                            console.log(result[i]._doc)
                                            result[i] = { ...result[i], unlock: true }
                                        }
                                        if (novel.uploader.toString() == user._id.toString()) {
                                            result[i] = { ...result[i], unlock: true }
                                        }
                                    }
                                }
                            }
                            //console.log(result)
                            return res.status(200).json(ResponseData(200, result))
                        }
                    ).
                    catch(err => {
                        console.log(err)
                        return res.status(400).json(ResponseDetail(500, { message: "Không tìm thấy chap" }))
                    })
            }
            else {
                return res.status(400).json(ResponseDetail(500, { message: "Không tìm thấy truyện" }))
            }
        } catch (error) {
            console.log(error)
            res.status(500).json(ResponseDetail(500, { message: "Lỗi lấy thông tin chap" }))
        }
    }

    ,
    SetReading: async (req, res) => {
        try {
            const chapNumber = req.body.chapNumber
            const url = req.body.url
            const token = req.headers.authorization?.split(" ")[1];
            const decode = jwt_decode(token)

            if (!decode.sub) {
                return res.status(500).json(ResponseDetail(500, { message: "Lỗi token" }))
            }
            const username = decode.sub;
            User.findOne({ username: username })
                .then(async (result) => {
                    const novel = await Novel.findOne({ url: url })
                    if (novel) {

                        let reading = await Reading.findOne({
                            novelId: novel._id,
                            userId: result._id
                        })
                        if (reading) {
                            reading.chapternumber = chapNumber
                        }
                        else {
                            reading = await new Reading({
                                novelId: novel._id,
                                userId: result._id,
                                chapNumber
                            })
                        }
                        const temp = await reading.save()
                        return res.status(200).json(ResponseData(200, temp))
                    }
                    return res.status(500).json(ResponseDetail(500, { message: "Không tìm thấy tài khoản" }))
                })
                .catch(err => {
                    return res.status(500).json(ResponseDetail(500, { message: "Lỗi tìm tài khoản" }))
                })
        } catch (error) {
            console.log(error)
            return res.status(500).json(ResponseDetail(500, { message: "Lỗi lấy thông tin chap" }))
        }
    },
    GetReadings: async (req, res) => {
        try {
            const token = req.headers.authorization?.split(" ")[1];
            const decode = jwt_decode(token)

            if (!decode.sub) {
                return res.status(500).json(ResponseDetail(500, { message: "Lỗi token" }))
            }
            const username = decode.sub;
            const user = await User.findOne({ username: username })
            if (user) {
                let readings = await Reading.find({ userId: user._id }).populate('novelId').populate("userId")

                readings = await Promise.all(readings.map(async (item) => {
                    let sochap = await Chapter.countDocuments({ novelId: item.novelId._id })
                    return {
                        name: item.novelId.name,
                        image: item.novelId.image,
                        chapternumber: item.chapternumber,
                        url: item.novelId.url,
                        sochap
                    }
                }))

                return res.status(200).json(ResponseData(200, readings))
            } else {
                return res.status(500).json(ResponseDetail(500, { message: "Lỗi tìm tài khoản" }))
            }
        } catch (error) {
            console.log(error)
            return res.status(500).json(ResponseDetail(500, { message: "Lỗi lấy thông tin chap" }))
        }
    },

    GetNewestChapter: async (req, res) => {
        try {
            const page = req.query.page || 0
            const size = req.query.size || 10
            let chaps = await Chapter.find().populate({
                path: 'novelId',
                populate: {
                    path: 'uploader'
                }
            }).limit(size).sort({ updatedAt: -1 })
            chaps = chaps.map(item => {
                return {
                    type: item.novelId.type,
                    name: item.novelId.name,
                    chaptername: item.chaptername,
                    author: item.novelId.author,
                    uploader: item.novelId.uploader?.nickname,
                    updatedAt: item.updatedAt,
                    url: item.novelId.url,
                    chapternumber: item.chapternumber
                }
            })
            if (chaps) {
                return res.status(200).json(ResponseData(200, chaps))
            }
            return res.status(200).json(ResponseData(200, []))
        }
        catch (err) {
            console.log(err)
            return res.status(500).json(ResponseDetail(500, { message: "Lỗi lấy thông tin chap" }))
        }
    },

    GetReadingsDefault: async (req, res) => {
        try {
            const page = req.query.page || 0
            const size = req.query.size || 10
            var novelReading = await Novel.find().limit(size)
            novelReading = await Promise.all(novelReading.map(async (item) => {
                let sochap = await Chapter.countDocuments({ novelId: item._id })
                return { name: item.name, image: item.image, chapternumber: 0, url: item.url, sochap }
            }))
            if (novelReading) {
                return res.status(200).json(ResponseData(200, novelReading))
            }
            return res.status(200).json(ResponseData(200, []))
        }
        catch (err) {
            console.log(err)
            return res.status(500).json(ResponseDetail(500, { message: "Lỗi lấy thông tin chap" }))
        }
    },

    UpdateChapters: async (req, res) => {
        try {
            console.log("CHẠY UPDATE")
            var NovelID = mongoose.Types.ObjectId('634318e300c8a010015ec04e')
            const count = await Chapter.count({ novelId: NovelID })
            await Novel.updateMany({ _id: NovelID }, { numberofchapter: count })
            // await Chapter.updateMany({novelId: NovelID}, {"isLock": true})
            // await Chapter.updateMany({},{$unset: {"isLock": true}},{strict:false})
            // await Chapter.updateMany({novelId: NovelID},{$set: {"isLock": true}},{strict:false})
            // await Chapter.updateMany({},{$rename: {"chapnumber": "chapternumber"}},{strict:false})
            // await Chapter.updateMany({},{$set: {"isLock": false}},{strict:false})
            // await Chapter.updateMany({},{$set: {"price": 200}},{strict:false})
            return res.status(200).json(ResponseDetail(200, { message: "Update thông tin chap thành công" }))
        }
        catch (err) {
            console.log(err)
            return res.status(500).json(ResponseDetail(500, { message: "Update không thành công" }))
        }
    },

    UnlockChapter: async (req, res) => {
        try {
            const chapterID = req.body.id
            const token = req.headers.authorization?.split(" ")[1];
            const decodeToken = jwt_decode(token)
            const username = decodeToken.sub
            const user = await User.findOne({ username: username }).populate("roles");
            const chapter = await Chapter.findById(chapterID)
            const balance = user.balance - chapter.price;
            if (balance < 0) {
                return res.status(400).json(ResponseDetail(400, { message: "Mở khóa không thành công, số dư không đủ!!" }))
            }
            await User.updateOne({ _id: user._id }, { balance: balance })

            const newChapterUnlocked = await new Chapterunlocked({
                userId: user._id,
                chapterId: chapter._id
            });
            await newChapterUnlocked.save();

            return res.status(200).json(ResponseDetail(200, { message: "Mở khóa chương thành công" }))
        }
        catch (err) {
            console.log(err)
            return res.status(500).json(ResponseDetail(500, { message: "Mở khóa không thành công" }))
        }
    },
}


================================================
File: back-end/controllers/PaymentController.js
================================================
import crypto from 'crypto';
import https from 'https';
import moment from 'moment/moment.js';
import mongoose from 'mongoose';
import QueryString from 'qs';
import { Bill } from '../models/Bill.js';
import { User } from '../models/User.js';
// const frontendUrl = 'http://localhost:3000/'
// const backendUrl = 'http://localhost:5000/'
const frontendUrl = 'https://cnpmm.vercel.app/'
const backendUrl = 'https://becnpmm.vercel.app/'
export const PaymentController = {
    createPayment: async (req, res) => {
        try {

            //https://developers.momo.vn/#/docs/en/aiov2/?id=payment-method
            //parameters
            var partnerCode = "MOMOQDD420220927";
            var accessKey = "yFRGoK0eLSrthX4Y";
            var secretkey = "tZNafmaHgldR8XfZA9wiYCFIkaXbzxbu";
            var requestId = partnerCode + new Date().getTime();
            var orderId = req.body.orderId;
            var orderInfo = "Thanh toán đơn hàng #" + orderId;
            var redirectUrl = frontendUrl + "result-payment";
            var ipnUrl = backendUrl + "api/payment/result-payment";
            //var ipnUrl ='https://playerhostedapitest.herokuapp.com/api/myorders';
            // var ipnUrl = redirectUrl = "https://webhook.site/454e7b77-f177-4ece-8236-ddf1c26ba7f8";
            var amount = req.body.amount;
            var requestType = "captureWallet"
            var username = req.body.username;
            const user = await User.findOne({username})
            if(!user){
                return res.status(400).json({message:'Không tồn tài tài khoản'})
            }
            var extraData = Buffer.from(JSON.stringify({username})).toString('base64');
            //before sign HMAC SHA256 with format
            //accessKey=$accessKey&amount=$amount&extraData=$extraData&ipnUrl=$ipnUrl&orderId=$orderId&orderInfo=$orderInfo&partnerCode=$partnerCode&redirectUrl=$redirectUrl&requestId=$requestId&requestType=$requestType
            var rawSignature = "accessKey=" + accessKey + "&amount=" + amount + "&extraData=" + extraData + "&ipnUrl=" + ipnUrl + "&orderId=" + orderId + "&orderInfo=" + orderInfo + "&partnerCode=" + partnerCode + "&redirectUrl=" + redirectUrl + "&requestId=" + requestId + "&requestType=" + requestType
            //puts raw signature
            console.log("--------------------RAW SIGNATURE----------------")
            console.log(rawSignature)
            //signature

            var signature = crypto.createHmac('sha256', secretkey)
                .update(rawSignature)
                .digest('hex');
            console.log("--------------------SIGNATURE----------------")
            console.log(signature)

            //json object send to MoMo endpoint
            const requestBody = JSON.stringify({
                partnerCode: partnerCode,
                accessKey: accessKey,
                requestId: requestId,
                amount: amount,
                orderId: orderId,
                orderInfo: orderInfo,
                redirectUrl: redirectUrl,
                ipnUrl: ipnUrl,
                extraData: extraData,
                requestType: requestType,
                signature: signature,
                lang: 'vi'
            });
            //Create the HTTPS objects
            const options = {
                hostname: 'test-payment.momo.vn',
                port: 443,
                path: '/v2/gateway/api/create',
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'Content-Length': Buffer.byteLength(requestBody)
                }
            }
            const newBill = new Bill({orderId,userId:user.id,amount,description:'Nạp tiền vào tài khoản',method:'Momo'})
            await newBill.save()
            let payUrl = ""
            //Send the request and get the response
            const reqPayment = https.request(options, response => {
                console.log(`Status: ${response.statusCode}`);
                console.log(`Headers: ${JSON.stringify(response.headers)}`);
                response.setEncoding('utf8');
                response.on('data', (body) => {
                    console.log('Body: ');
                    console.log(body);
                    console.log('payUrl: ');
                    console.log(JSON.parse(body).payUrl);
                    payUrl = JSON.parse(body).payUrl;
                });
                response.on('end', () => {
                    console.log('No more data in response.');
                    res.status(200).json({payUrl})
                });
            })

            reqPayment.on('error', (e) => {
                console.log(`problem with request: ${e.message}`);
            });
            // write data to request body
            console.log("Sending....")
            reqPayment.write(requestBody);
            reqPayment.end();
            
        }
        catch (e) {
            console.log(e)
            return res.status(500).json({ error: "Lỗi tạo hoá đơn thanh toán. Vui lòng thực hiện lại thanh toán" });
        }
    },
    ipn: async (req, res) => {
        try {
            console.log(req.body)
            var resultCode = req.body.resultCode;
            var partnerCode = "MOMOQDD420220927";
            var accessKey = "yFRGoK0eLSrthX4Y";
            var secretkey = "tZNafmaHgldR8XfZA9wiYCFIkaXbzxbu";
            var orderId = req.body.orderId || req.query.orderId;
            var extraData = req.body.extraData;
            var amount = req.body.amount;
            var username = JSON.parse (Buffer.from(extraData,'base64').toString('ascii')).username;
            var statusPayment = resultCode === 0 ? "Thành công":"Thất bại"
            console.log(await Bill.findOneAndUpdate({orderId},{status:statusPayment},{new:true}))
            if(resultCode === 0){
                // write data to request body
                const user = await User.findOne({username: username});
                const balance = user.balance + amount;
                await User.findOneAndUpdate({username:username},{balance:balance})
            }
            return res.status(204).json({});
        }
        catch (e) {
            return res.status(500).json({ error: "Lỗi tạo hoá đơn thanh toán. Vui lòng thực hiện lại thanh toán" });
        }
    },
    CreatePaymentVNPay: async (req, res, next) => {
        try{

            let ipAddr = req.headers['x-forwarded-for'] ||
                req.connection.remoteAddress ||
                req.socket.remoteAddress ||
                req.connection.socket.remoteAddress;
            if(ipAddr ==='::1')
                ipAddr ='127.0.0.1'
            let tmnCode = process.env.vnp_TmnCode;
            let secretKey = process.env.vnp_HashSecret;
            let vnpUrl = "https://sandbox.vnpayment.vn/paymentv2/vpcpay.html"
            let returnUrl = backendUrl+"api/payment/result-vnp-payment"
            let date = new Date();
    
            let createDate =moment().format('YYYYMMDDHHmmss'); 
            var orderId = req.body.orderId;
            let username = req.user.sub
            let amount = req.body.amount;
            let bankCode = req.body.bankCode || '';
    
            let orderInfo = req.body.orderDescription || "Nang cap tai khoan "+username;
            let orderType = req.body.orderType || 'billpayment';
            let locale = req.body.language || 'vn';
            if (locale === null || locale === '') {
                locale = 'vn';
            }
            let currCode = 'VND';
            let vnp_Params = {};
            vnp_Params['vnp_Version'] = '2.1.0';
            vnp_Params['vnp_Command'] = 'pay';
            vnp_Params['vnp_TmnCode'] = tmnCode;
            // vnp_Params['vnp_Merchant'] = ''
            vnp_Params['vnp_Locale'] = locale;
            vnp_Params['vnp_CurrCode'] = currCode;
            vnp_Params['vnp_OrderInfo'] = orderInfo;
            vnp_Params['vnp_OrderType'] = orderType;
            vnp_Params['vnp_Amount'] = amount * 100;
            vnp_Params['vnp_ReturnUrl'] = returnUrl;
            vnp_Params['vnp_IpAddr'] = ipAddr;
            vnp_Params['vnp_CreateDate'] = createDate;
            if (bankCode !== null && bankCode !== '') {
                vnp_Params['vnp_BankCode'] = bankCode;
            }
    
            //Tạo bill
            const user = await User.findOne({username})
            if(!user){
                return res.status(400).json({message:"Không tồn tại tài khoản"})
            }
            const newBill = await new Bill({
                orderId,
                userId:user.id,
                description:"Nâng cấp tài khoản bằng VNPay",
                amount,
                method:"VNPay"
            })
            await newBill.save()//lưu bill vào db
            vnp_Params['vnp_TxnRef'] = newBill.id.toString()
            vnp_Params = sortObject(vnp_Params);
    
           
            let signData = QueryString.stringify(vnp_Params, { encode: false });
            let hmac = crypto.createHmac("sha512", secretKey);
            let signed = hmac.update(Buffer.from(signData, 'utf-8')).digest("hex");
            vnp_Params['vnp_SecureHash'] = signed;
            vnpUrl += '?' + QueryString.stringify(vnp_Params, { encode: false });
            console.log(vnpUrl)
            res.status(200).json({payUrl:vnpUrl})
        }
        catch(err){
            console.log(err)
            res.status(400).json({message:"Tạo hoá đơn không thành công. Vui lòng thử lại"})
        }
    },
    
    VNPayIPN:async(req, res, next)=>{
        try{
            let vnp_Params = req.query;
            let secureHash = vnp_Params['vnp_SecureHash'];
            let amount  = vnp_Params['vnp_Amount']/100
            delete vnp_Params['vnp_SecureHash'];
            delete vnp_Params['vnp_SecureHashType'];
        
            vnp_Params = sortObject(vnp_Params);
            let secretKey = process.env.vnp_HashSecret;
            let signData = QueryString.stringify(vnp_Params, { encode: false });
            let hmac = crypto.createHmac("sha512", secretKey);
            let signed = hmac.update(Buffer.from(signData, 'utf-8')).digest("hex");     
             let rspCode = vnp_Params['vnp_ResponseCode'];
            if(secureHash === signed){
                let orderId = vnp_Params['vnp_TxnRef'];
                
                console.log(rspCode);
                if(rspCode==='00')//giao dich thanh cong
                {
                    const bill = await Bill.findOneAndUpdate({_id:mongoose.Types.ObjectId(orderId)}
                    ,{status:'Thành công',transactionId:vnp_Params['vnp_TransactionNo']}
                    ,{new:true})
                    const user = await User.findById(bill.userId);
                    const balance = user.balance + amount;
                    await User.findByIdAndUpdate(bill.userId,{balance:balance})
                   
                    return res.redirect(`${frontendUrl}result-payment?resultCode=0?message=Giao dịch thành công`)
                }
                //Kiem tra du lieu co hop le khong, cap nhat trang thai don hang va gui ket qua cho VNPAY theo dinh dang duoi
                return res.redirect(`${frontendUrl}result-payment?resultCode=${rspCode}?message=Giao dịch không thành công`)
            }
            else {
                return res.redirect(`${frontendUrl}result-payment?resultCode=${rspCode}?message=Giao dịch không thành công`)
            }
        }
        catch(err){
            console.log(err)
            return res.redirect(`${frontendUrl}result-payment?resultCode=01?message=Xác nhận giao dịch không thành công`)
        }
    }

}

function sortObject(obj) {
	let sorted = {};
	let str = [];
	let key;
	for (key in obj){
		if (obj.hasOwnProperty(key)) {
		str.push(encodeURIComponent(key));
		}
	}
	str.sort();
    for (key = 0; key < str.length; key++) {
        sorted[str[key]] = encodeURIComponent(obj[str[key]]).replace(/%20/g, "+");
    }
    return sorted;
}


================================================
File: back-end/controllers/RatingController.js
================================================
import { Novel } from "../models/Novel.js"
import { ResponseDetail, ResponseData } from "../services/ResponseJSON.js"
import jwt_decode from 'jwt-decode'
import { User } from '../models/User.js'
import mongoose from "mongoose"
import { Rating } from "../models/Rating.js"


export const RatingController = { 
    CreateRating: async (req, res) => {
        try {
            const token = req.headers.authorization?.split(" ")[1];
            var username;
            if (token) {
                username = jwt_decode(token).sub
            }
            const content = req.body.content
            const rating = req.body.rating
            const novelurl = req.body.url
            
            if(username) {
                const user = await User.findOne({ username })
                if (user) {
                    const novel = await Novel.findOne({ url: novelurl })
                    const newrating = new Rating({userId: user._id, novelId: novel._id, rating: rating, content: content })
                    await newrating.save()

                    const ratings =  await Rating.find({novelId:novel._id})
                    const totalRating =  await Rating.countDocuments({novelId:novel._id})
                    const totalrating = ratings.reduce((total, current) => {return total+current.rating},0) / ratings.length

                    novel.rating = totalrating;
                    novel.numberofrating = totalRating
                    await novel.save()
                    return res.status(200).json(ResponseData(200, "Gửi đánh giá thành công"))
                }
            }
            return res.status(400).json(ResponseDetail(400, { message: "Yêu cầu đăng nhập để có thể gửi đánh giá" }))
        } catch (error) {
            console.log(error)
            return res.status(500).json(ResponseDetail(500, { message: "Lỗi hệ thống" }))
        }
    },

    GetRatingByUrl: async (req, res) => {
        try {
            const url = req.params.url
            const novel = await Novel.findOne({ url: url })
            if (novel) {
                let ratings = await Rating.find({
                    novelId: novel._id}).sort({createdAt:-1}).populate('userId')
                ratings=ratings.map(item=>{return {
                    nickname:item.userId.nickname,
                    image:item.userId.image,
                    content:item.content,
                    id:item.id,
                    username:item.userId.username,
                    rating: item.rating,
                    createdAt:item.createdAt,
                }})
                return res.status(200).json(ResponseData(200, ratings))
            } else {
                return res.status(400).json(ResponseDetail(400, { message: 'Không tồn tại tài khoản' }))
            }

        } catch (error) {
            console.log(error)
            return res.status(500).json(ResponseDetail(200, { message: "Lỗi hệ thống" }))
        }
    },
    DeleteRating: async (req, res) => {
        try {
            const ratingid = req.query.id
            console.log(ratingid)
            const rate = await Rating.findById(ratingid)
            const novel =  await Novel.findOne({_id: rate.novelId})
            const count = await Rating.findByIdAndDelete(ratingid)
            const total = await Rating.find({novelId: novel._id})
            novel.numberofrating = total.length
            await novel.save()
            if(count) 
                return res.status(200).json(ResponseData(200, {message:"Xoá thành công"}))
            else {
                return res.status(400).json(ResponseDetail(400, { message: 'Xoá thất bại' }))
            }

        } catch (error) {
            console.log(error)
            return res.status(500).json(ResponseDetail(200, { message: "Lỗi hệ thống" }))
        }
    }

}


================================================
File: back-end/controllers/SavedController.js
================================================
import { Novel } from "../models/Novel.js";
import {Saved} from "../models/Saved.js"
import { ResponseData } from "../services/ResponseJSON.js";
import jwt_decode from 'jwt-decode'
import { User } from '../models/User.js'

export const SavedController = {
    createdSaved:async(req,res)=>{
        try {
             const token = req.headers.authorization.split(" ")[1];
            const url = req.body.url
            const username = jwt_decode(token).sub
            const user = await User.findOne({ username: username })
            if(user){
                const novel =await Novel.findOne({url:url})
                if(novel){
                    const saved = await new Saved({
                        userId:user._id,
                        novelId:novel._id
                    })
                    await saved.save()
                    return res.status(200).json(ResponseData(200,"Lưu thành công"))
                }
                else
                    return res.status(401).json(ResponseData(401,"Không tìm thấy truyện"))
            }
            else{
                return res.status(401).json(ResponseData(401,"Không tìm thấy tài khoản"))
            }
        } catch (error) {
            return res.status(500).json(ResponseData(500,"Lỗi lưu truyện"))
        }
    },
    
    checkSavedByUser:async(req,res)=>{
        try {
            const token = req.headers.authorization.split(" ")[1];
            const url = req.params.url
            const username = jwt_decode(token).sub
            const user = await User.findOne({ username: username })
            if(user){
                const novel =await Novel.findOne({url:url})
                if(novel){
                    const saved =await Saved.findOne({
                        userId:user._id,
                        novelId:novel._id
                    })
                    if(saved)
                        return res.status(200).json(ResponseData(200,{saved:true}))
                    else
                        return res.status(200).json(ResponseData(200,{saved:false}))
                }
                else
                    return res.status(401).json(ResponseData(401,"Không tìm thấy truyện"))
            }
            else{
                return res.status(401).json(ResponseData(401,"Không tìm thấy tài khoản"))
            }
        } catch (error) {
            return res.status(500).json(ResponseData(500,"Lỗi lưu truyện"))
        }
    },
    getSavedsByUser:async(req,res)=>{
        try {
            const token = req.headers.authorization.split(" ")[1];
            const username = jwt_decode(token).sub
            const user = await User.findOne({ username: username })

            if(user){
                var saveds = await Saved.find({userId:user._id}).populate("novelId")
                console.log(saveds)
                saveds = saveds.map(item=>{
                    return {
                        name:item.novelId.name,
                        image:item.novelId.image,
                        url:item.novelId.url,
                        author:item.novelId.author
                            }
                })
                return res.status(200).json(ResponseData(200,saveds))
            }
            else{
                return res.status(401).json(ResponseData(401,"Không tìm thấy tài khoản"))
            }
        } catch (error) {
            console.log(error)
            return res.status(500).json(ResponseData(500,"Lỗi lưu truyện"))
        }
    },

    deleteSaved:async(req,res)=>{
        try {
             const token = req.headers.authorization.split(" ")[1];
            const url = req.body.url
            const username = jwt_decode(token).sub
            const user = await User.findOne({ username: username })
            if(user){
                const novel =await Novel.findOne({url:url})
                if(novel){
                    await Saved.deleteOne({userId:user._id,novelId:novel._id})
                    return res.status(200).json(ResponseData(200,"Xoá thành công"))
                }
                else
                    return res.status(401).json(ResponseData(401,"Không tìm thấy truyện"))
            }
            else{
                return res.status(401).json(ResponseData(401,"Không tìm thấy tài khoản"))
            }
        } catch (error) {
            return res.status(500).json(ResponseData(500,"Lỗi xoá truyện"))
        }
    }
}

================================================
File: back-end/controllers/StatisticController.js
================================================
import { ResponseData,ResponseDetail } from "../services/ResponseJSON.js";
import jwt_decode from 'jwt-decode'
import { Chapter } from "../models/Chapter.js";
import { Novel } from "../models/Novel.js";
import { User } from "../models/User.js";
import { Bill } from "../models/Bill.js";
import { compareAsc, format } from 'date-fns'
export const StatisticController = {
    getCountChapters: async(req,res)=>{
        try {
            const countNumberOfChapter=await Chapter.countDocuments()
            return res.status(200).json(ResponseData(200,{chapterNumber:countNumberOfChapter}))

        } catch (error) {
            console.log(error)
            return res.status(500).json(ResponseDetail(500,{message:"Không xác định"}))
        }
    },
    getCountNovels: async(req,res)=>{
        try {
            const countNumberOfNovel=await Novel.countDocuments()
            return res.status(200).json(ResponseData(200,{novelNumber:countNumberOfNovel}))

        } catch (error) {
            console.log(error)
            return res.status(500).json(ResponseDetail(500,{message:"Không xác định"}))
        }
    },
    getCountAccounts: async(req,res)=>{
        try {
            const countNumberOfAccount=await User.countDocuments()
            return res.status(200).json(ResponseData(200,{accountNumber:countNumberOfAccount}))

        } catch (error) {
            console.log(error)
            return res.status(500).json(ResponseDetail(500,{message:"Không xác định"}))
        }
    },
    getListBills: async(req,res) => {
        try{
            let listPayments= await Bill.find().populate('userId')
            listPayments=listPayments.map(item=>{return {
                orderId:item.orderId,
                name:item.userId.nickname,
                amount:item.amount,
                description:item.description,
                status:item.status,
                createdAt: item.createdAt
            }})
            return res.status(200).json(ResponseData(200,listPayments))
        }catch(error){
            console.log(error)
            return res.status(500).json(ResponseDetail(500,{message:"Không xác định"}))
        }
    },
    getListBillByUser: async(req,res) => {
        try{
            const username = req.user?.sub
            const user = await User.findOne({username})
            if(!user){
                return res.status(400).json(ResponseDetail(400,{message:"Không xác định tài khoản"}))
            }
            let listPayments= await Bill.find({userId:user.id})
           
            listPayments=listPayments.map(item=>{return {
                id:item.id,
                orderId:item.orderId,
                name:item.userId.nickname,
                amount:item.amount,
                description:item.description,
                status:item.status,
                method:item.method,
                updatedAt: item.updatedAt
            }})
            return res.status(200).json(ResponseData(200,listPayments))
        }catch(error){
            console.log(error)
            return res.status(500).json(ResponseDetail(500,{message:"Không xác định"}))
        }
    },
    getSumRevenue: async(req,res)=>{
        try{
            let listPayments= await Bill.find()
            var tempTotalRevenue=0
            listPayments.forEach((item,index)=>{
                tempTotalRevenue+=item.amount
            })
            return res.status(200).json(ResponseData(200,{totalRevenue:tempTotalRevenue}))
        }catch(error){
            console.log(error)
            return res.status(500).json(ResponseDetail(500,{message:"Không xác định"}))
        }
    },
    GetTotalRevenueByDay: async (req, res) => {
        try{
            let listPayments= await Bill.find()
            listPayments=listPayments.map(item=>{
                return {
                    item,
                    dateAdd:format(item.createdAt, 'yyyy-MM-dd')
                }
            })
            var result = [];
            listPayments.reduce(function(res, value) {
            if (!res[value.dateAdd]) {
                res[value.dateAdd] = { dateAdd: value.dateAdd, amount: 0 };
                result.push(res[value.dateAdd])
            }
            res[value.dateAdd].amount += value.item.amount;
            return res;
            }, {});

            return res.status(200).json(ResponseData(200,result))
        }catch(error){
            console.log(error)
            return res.status(500).json(ResponseDetail(500,{message:"Không xác định"}))
        }
    },
    GetTotalCreateNovelByDay: async (req, res) => {
        try {
            let listNovels= await Novel.find()
            listNovels=listNovels.map(item=>{
                return {
                    item,
                    dateAdd:format(item.createdAt, 'yyyy-MM-dd')
                }
            })
            var result = [];
            listNovels.reduce(function(res, value) {
            if (!res[value.dateAdd]) {
                res[value.dateAdd] = { dateAdd: value.dateAdd, sum: 0 };
                result.push(res[value.dateAdd])
            }
            res[value.dateAdd].sum++;
            return res;
            }, {});

            return res.status(200).json(ResponseData(200,result))
            
        } catch (error) {
            console.log(error)
            res.status(500).json(ResponseDetail(500, { message: "Lỗi GetNovels" }))
        }
    },
    GetTotalNewUserByDay: async (req, res) => {
        try{
            let listUsers= await User.find()
            listUsers=listUsers.map(item=>{
                if(item._doc.hasOwnProperty('createdAt')){
                    return {
                        item,
                        dateAdd:format(item.createdAt, 'yyyy-MM-dd')
                    }
                }
                return {
                    item,
                    dateAdd:"2022-04-08"
                }
            })
            var result = [];
            listUsers.reduce(function(res, value) {
            if (!res[value.dateAdd]) {
                res[value.dateAdd] = { dateAdd: value.dateAdd, sum: 0 };
                result.push(res[value.dateAdd])
            }
            res[value.dateAdd].sum++;
            return res;
            }, {});

            return res.status(200).json(ResponseData(200,result))
        }catch(error){
            console.log(error)
            return res.status(500).json(ResponseDetail(500,{message:"Không xác định"}))
        }
    },
}

================================================
File: back-end/controllers/TrafficController.js
================================================
import { Novel } from "../models/Novel.js";
import { Saved } from "../models/Saved.js"
import { ResponseData } from "../services/ResponseJSON.js";
import jwt_decode from 'jwt-decode'
import { User } from '../models/User.js'
import { Traffic } from "../models/Traffic.js";
import { compareAsc, format } from 'date-fns'
export const TrafficController = {
    updateTraffic: async (req, res) => {
        try {
            const token = req.headers.authorization?.split(" ")[1];
            let username = ''
            if (token)
                username = jwt_decode(token).sub

            const user = await User.findOne({ username })

            const now = new Date()
            now.setHours(0)
            now.setMinutes(0)
            now.setSeconds(0)
            now.setMilliseconds(0)
            if (user) {
                await Traffic.findOneAndUpdate({ date: now }, { $inc: { count: 1, countUser: 1 } }, { upsert: true, new: true })
            }
            else {
                await Traffic.findOneAndUpdate({ date: now }, { $inc: { count: 1, countGuest: 1 } }, { upsert: true, new: true })
            }
            return res.status(200).json(ResponseData(200, { message: "Lưu thành công" }))

        } catch (error) {
            console.log(error)
            return res.status(500).json(ResponseData(500, "Lỗi lưu truyện"))
        }
    },
    getAllTraffic: async (req, res) => {
        try {
            let traffics = await Traffic.find()
            traffics=traffics.sort((a,b)=>new Date(a.date).getTime() -new Date(b.date).getTime())
            return res.status(200).json(ResponseData(200, { message: "Lưu thành công", traffics }))

        } catch (error) {
            console.log(error)
            return res.status(500).json(ResponseData(500, "Lỗi lưu truyện"))
        }
    },


}

================================================
File: back-end/controllers/UserController.js
================================================
import jwt_decode from 'jwt-decode'
import { User } from '../models/User.js';
import { ResponseDetail,ResponseData } from '../services/ResponseJSON.js';
import { Role } from '../models/Role.js';

import bcrypt from 'bcrypt'
export const UserController ={
    getInfo:async(req,res)=>{
        try {
            const token = req.headers.authorization?.split(" ")[1];
            const decodeToken = jwt_decode(token)
            const username = decodeToken.sub
            const user =await User.findOne({username:username}).populate("roles");
            const {password,_id:id,...rest}=user._doc;
            const data ={id,...rest}

            return res.status(200).json(ResponseData(200,{userInfo:data}))

        } catch (error) {
            console.log(error)
            return res.status(500).json(ResponseDetail(500,{message:"Lỗi xác thực"}))
        }
    },
    getInfoWithBalance:async(req,res)=>{
        try {
            const token = req.headers.authorization?.split(" ")[1];
            const decodeToken = jwt_decode(token)
            const username = decodeToken.sub
            const user =await User.findOne({username:username}).populate("roles");
            const {balance }=user._doc;

            return res.status(200).json(ResponseData(200,{
                balance
            }))

        } catch (error) {
            console.log(error)
            return res.status(500).json(ResponseDetail(500,{message:"Lỗi xác thực"}))
        }
    },
    updateUser:async(req,res)=>{
        try {
            const token = req.headers.authorization?.split(" ")[1];
            const decodeToken = jwt_decode(token)
            const username = decodeToken.sub

            const data = {
                birthdate:req.body.birthdate,
                image:req.body.image,
                nickname:req.body.tenhienthi
            }

            const newUser= await User.findOneAndUpdate({username:username},data,{new:true})
            console.log(newUser)
            const {password,...rest}=newUser._doc
            return res.status(200).json(ResponseData(200,{userInfo:{...rest}}))
            
        } catch (error) {
            console.log(error)
            return res.status(500).json(ResponseDetail(500,{message:"Lỗi cập nhật tài khoản"}))
        }
    },
    updatePassword:async(req,res)=>{
        try {
            const token = req.headers.authorization?.split(" ")[1];
            const decodeToken = jwt_decode(token)
            const username = decodeToken.sub
            
            const salt =await bcrypt.genSalt(10);
            const hash =await bcrypt.hash(req.body.newPassword, salt);

            const data = {
                password:hash
            }
            const user = await User.findOne({username:username})
            const auth = await bcrypt.compare(req.body.password,user.password)
            if(auth){
                const newUser = await User.findOneAndUpdate({username:username},data,{new:true})
                if(newUser){
                    const {password,...rest}=newUser._doc
                    return res.status(200).json(ResponseData(200,{userInfo:{...rest}}))
                }
                return res.status(400).json(ResponseDetail(400,{message:"Cập nhật không thành công"}))
            }
            return res.status(400).json(ResponseDetail(400,{password:"Sai mật khẩu"}))
            
            
        } catch (error) {
            console.log(error)
            return res.status(500).json(ResponseDetail(500,{message:"Lỗi cập nhật tài khoản"}))
        }
    },
    
    deleteAccount:async(req,res)=>{
        try{
            const id=req.query.id;
            console.log(id)
            const deleteUser =await User.deleteOne({_id:id})
            console.log(deleteUser)
            if(deleteUser)
                return res.status(200).json(ResponseData(200,{message:"Xoá thành công"}))
            return res.status(400).json(ResponseDetail(400,"Xoá thất bại"))
        }
        catch (error) {
            console.log(error)
            return res.status(500).json(ResponseDetail(500,{message:"Lỗi cập nhật quyền tài khoản"}))
        }
    },
    
}

================================================
File: back-end/controllers/middlewareController.js
================================================
import jwt from "jsonwebtoken";
import { ResponseDetail } from "../services/ResponseJSON.js";
const verifyToken = (req, res, next) => {
        const token = req.headers.authorization;
        if (token) {
            const accessToken = token.split(" ")[1];
            jwt.verify(accessToken, process.env.JWT_ACCESS_KEY, (err, user) => {
                if (err) {
                    return res.status(403).json(ResponseDetail(403,{message:"Token không hợp lệ"}));
                }
                req.user = user;
                next();
            })          
        } else {
            return res.status(401).json(ResponseDetail(401,{message:"Không có token"}));
        }    
}

export const verifyTokenAdmin = (req, res, next) => {
    const token = req.headers.authorization;
    if (token) {
        const accessToken = token.split(" ")[1];
        jwt.verify(accessToken, process.env.JWT_ACCESS_KEY, (err, user) => {
            if (err) {
                return res.status(403).json(ResponseDetail(403,{message:"Token không hợp lệ"}));
            }
            if(user.roles.includes("ADMIN")){
                req.user = user
                next();
            }
                
            else
                return res.status(403).json(ResponseDetail(403,{message:"Bạn không có quyền truy cập"}))
        })          
    } else {
        return res.status(401).json(ResponseDetail(401,{message:"Không có token"}));
    }    
}

export { verifyToken }

================================================
File: back-end/models/Bill.js
================================================
import mongoose from 'mongoose'

const schema =new  mongoose.Schema({
    orderId: {
        type: String,
        require: true,
    },
    userId: {
        type: mongoose.Schema.Types.ObjectId,
        default: null,
        ref: 'User',
    },
    amount: {
        type: Number,
        default: 0,
    },
    status: {
        type: String,
        default: 'Chưa thanh toán'
    },
    description:{
        type:String,
        require:true,
        default:""
    },
    method:{
        type: String,
        require:true,
    },
    transactionId:{
        type: String,
        default:"",
    }
},
{timestamps:true}
)
export const Bill = mongoose.model('Bill', schema)

================================================
File: back-end/models/Chapter.js
================================================
import mongoose from 'mongoose'
import { Novel } from './Novel.js'

const schema =new  mongoose.Schema({
    chapternumber:{
        type: Number,
        require: true,
        default:0
    },
    content:{
        type: String,
        require: true,
        default:"Nội dung chương",
        validate:{
            validator:item=>{
                return item.length > 10
            },
            message:"Nội dung phải dài hơn 10 kí tự"
        }
    },
    chaptername:{
        type: String,
        require: true,
    },
    novelId:{
        type: mongoose.Schema.Types.ObjectId,
        ref: "Novel"
    },
    isLock: {
        type: Boolean,
        default: false
    },
    price: {
        type:Number,
        default:200
    }
},
{timestamps:true}
)
schema.pre('save',async function(next){
    console.log(this)
    await Novel.updateOne({_id:this.dautruyenId},{$inc:{chapternumber:1}})
    next()
})

schema.pre('findOneAndDelete', { query: true, document: false },async function(next){
    let id=this.getQuery()['novelId'];
    await Novel.updateOne({_id:id},{$inc:{chapternumber:-1}})
    next()
})
export const Chapter = mongoose.model('Chapter', schema)

================================================
File: back-end/models/Chapterunlocked.js
================================================
import mongoose from 'mongoose'

const schema =new  mongoose.Schema({
    userId:{
        type:mongoose.Types.ObjectId,
        required:true,
        ref:"User"
    },
    chapterId:{
        type:mongoose.Types.ObjectId,
        required:true,
        ref:"Chapter"
    }
},
{timestamps:true}
)

export const Chapterunlocked = mongoose.model('Chapterunlocked', schema)

================================================
File: back-end/models/Comment.js
================================================
import mongoose from 'mongoose'

const schema = new mongoose.Schema({
    novelId:{
        type:mongoose.Types.ObjectId,
        required:true,
        ref:"Novel"
    },
    userId:{
        type:mongoose.Types.ObjectId,
        required:true,
        ref:"User"
    },
    content:{
        type:String,
        required:true
    },
    
},{timestamps:true})

export const Comment = mongoose.model("Comment",schema) 

================================================
File: back-end/models/Novel.js
================================================
import mongoose from 'mongoose'
import { Comment } from './Comment.js';
import { Reading } from './Reading.js';
import { Chapter } from './Chapter.js';
import { Rating } from './Rating.js';
const schema =new  mongoose.Schema({
    name:{
        type: String,
        require: true,
    },
    author:{
        type: String,
        require: true,
    },
    type:{
        type: String,
        require: true,
    },
    rating:{
        type: Number,
        require: true,
        default:0
    },
    reads:{
        type: Number,
        require: true,
        default:0
    },
    image:{
        type: String,
        require: true,
    },
    uploader:{
        type: mongoose.Schema.Types.ObjectId,
        ref: "User"
    },
    description:{
        type: String,
        require: true,
        default:"Mô tả truyện đọc",
        validate:{
            validator:item=>{
                return item.length > 10
            },
            message:"Nội dung phải dài hơn 10 kí tự"
        }
    },
    numberofrating:{
        type: Number,
        require: true,
        default:0
    },
    state:{
        type: String,
        require: true,
        default:"Đang ra"
    },
    url:{
        type: String,
        require: true,
    },
    numberofchapter:{
        type:Number,
        required:true,
        default:0
    }
},
{timestamps:true}
)
schema.index({name:'text'})
schema.pre('deleteOne',{ query: true, document: false }, async function(next) {
    // 'this' is the client being removed. Provide callbacks here if you want
    // to be notified of the calls' result.
    let id=this.getQuery()['_id'];
    console.log(id)
    await Comment.deleteMany({novelId:id});
    await Reading.deleteMany({novelId:id});
    await Chapter.deleteMany({novelId:id});
    await Rating.deleteMany({novelId:id});
    next();
});



export const Novel = mongoose.model('Novel', schema)

================================================
File: back-end/models/Rating.js
================================================
import  mongoose  from "mongoose";
import { Novel } from "./Novel.js";
import { Reading } from "./Reading.js";
import { User} from './User.js'
const schema = new mongoose.Schema({
    userId: {
        type: mongoose.Schema.Types.ObjectId,
        ref: "User"
    },
    novelId:{
        type: mongoose.Schema.Types.ObjectId,
        ref: "Novel"
    },
    rating: {
        type:Number,
        require: true,
    },
    content:{
        type:String,
        required:true
    },
},
    {timestamps:true}
);


export const Rating = mongoose.model('Rating', schema)


================================================
File: back-end/models/Reading.js
================================================
import mongoose from "mongoose";

const scheme = new mongoose.Schema({
    novelId:{
        type: mongoose.Schema.Types.ObjectId,
        ref: "Novel",
        required:true
    },
    userId:{
        type: mongoose.Schema.Types.ObjectId,
        ref: "User",
        required:true
    },
    chapternumber:{
        type: Number,
        required:true
    }
})

export const Reading = mongoose.model("Reading",scheme)

================================================
File: back-end/models/Role.js
================================================
import  mongoose  from "mongoose";

const schema = new mongoose.Schema({
    name:{
        type: String,
        require: true,
    }
},
 );

 export const Role = mongoose.model('Role',schema);

================================================
File: back-end/models/Saved.js
================================================
import mongoose from "mongoose";

const scheme = new mongoose.Schema({
    userId:{
        type: mongoose.Schema.Types.ObjectId,
        ref: "User",
        required:true
    },
    novelId:{
        type: mongoose.Schema.Types.ObjectId,
        ref: "Novel",
        required:true
    }
})

export const Saved = mongoose.model("Saved",scheme)

================================================
File: back-end/models/Traffic.js
================================================
import mongoose from 'mongoose'

const schema = new mongoose.Schema({
    date:{
        type:Date,
        required:true
    },
    count:{
        type:Number,
        required:true,
        default:0
    },
    countGuest:{
        type:Number,
        required:true,
        default:0
    },
    countUser:{
        type:Number,
        required:true,
        default:0
    },
    description:{
        type:String,
        required:true,
        default:''
    },
    
},{timestamps:true})

export const Traffic = mongoose.model("Traffic",schema) 

================================================
File: back-end/models/User.js
================================================
import  mongoose  from "mongoose";
import {Comment} from './Comment.js';
import { Novel } from "./Novel.js";
import { Reading } from "./Reading.js";
const schema = new mongoose.Schema({
    username: {
        type: String,
        require: true,
        unique:true,
        validate:{
            validator:item=>{
                return item.length >= 6
            },
            message:"Tên đăng nhập phải dài hơn 5 kí tự"
        }
    },
    password: {
        type:String,
        require: true,
        validate:{
            validator:item=>{
                return item.length >= 8
            },
            message:"Mật khẩu phải dài hơn 8 kí tự"
        }
    },
    email: {
        type: String,
        require: true,
        default: "Anonymous",
        validate:{
            validator:item=>{
                return /^[a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+@[a-zA-Z0-9-]+(?:\.[a-zA-Z0-9-]+)*$/.test(item)
            },
            message:"Email không hợp lệ"
        }
    },
    roles:[
        {
          type: mongoose.Schema.Types.ObjectId,
          ref: "Role"
        }
      ],
    nickname:{
        type: String,
        require: true,
        default: "Anonymous"
    },
    image:{
        type:String,
        default:"https://1.bp.blogspot.com/-CV8fOXMMw60/YZ-UJ4X9sAI/AAAAAAAACMc/2Svet97exjgNdJ9CeTKUU3OuA-mnCQEzwCLcBGAsYHQ/s595/3a.jpg"
    },
    active:{
        type:Boolean,
        require: true,
        default:false
    },
    birthdate:{
        type:Date,
        required:true,
    },
    balance: {
        type:Number,
        default:0,
        require: true
    },
    isDeleted:{
        type:Boolean,
        default:false,
    }
},
    {timestamps:true}
 );

 schema.pre('deleteOne', { query: true, document: false },async function(next) {
    // 'this' is the client being removed. Provide callbacks here if you want
    // to be notified of the calls' result.
    let id = this.getQuery()['_id'];
    await Comment.deleteMany({userId: id})
    await Reading.deleteMany({userId: id})
    await Novel.deleteMany({uploader: id})
    await Rating.deleteMany({userId: id});
    next();
});

 export const User = mongoose.model('User',schema);

================================================
File: back-end/routers/AdminRoute.js
================================================

import express from 'express';
import {AdminController} from '../controllers/AdminController.js';
import { AuthController } from '../controllers/AuthController.js';
import {verifyToken, verifyTokenAdmin} from "../controllers/middlewareController.js"

const router = express.Router();
router.put('/user/active',verifyTokenAdmin,AdminController.activeByAdmin);

router.put('/user/inactive',verifyTokenAdmin,AdminController.inactiveByAdmin);

router.put('/user/inactivebyid',verifyTokenAdmin,AdminController.inactiveWithIdByAdmin);

router.put('/role/updatetouser',verifyTokenAdmin,AdminController.updateRoles)

router.get('/users',verifyTokenAdmin,AuthController.LoadUsers);

router.post('/user/deleteaccount',verifyTokenAdmin,AdminController.deleteAccount)

router.post('/novel/deletenovel',verifyTokenAdmin,AdminController.deleteNovelById)

router.get('/users/getlistusers',verifyTokenAdmin,AdminController.GetListUser)

router.get('/novel/getnovels',verifyTokenAdmin,AdminController.GetNovels)

router.get('/bills/getbills',verifyTokenAdmin,AdminController.GetBills)

router.post('/user/getuserinfo',verifyTokenAdmin,AdminController.GetUserById)

router.post('/user/updatedeleteaccount',AdminController.updateDeleteStatus)

router.get('/comment/getlistcomments',verifyTokenAdmin,AdminController.GetListOfComments)

router.get('/rating/getlistratings',verifyTokenAdmin,AdminController.GetListRating)

router.get('/rating/deleterating',verifyTokenAdmin,AdminController.DeleteRating)

router.get('/comment/deletecomment',verifyTokenAdmin,AdminController.DeleteComment)

router.get('/novel/getnovelreview',verifyTokenAdmin,AdminController.GetNovelCommentRatings)

router.post('/novel/getnovelreviewbyid',verifyTokenAdmin,AdminController.GetNovelReviewById)

router.post('/novel/getnovelreviewbyurl',verifyTokenAdmin,AdminController.GetNovelReviewByUrl)
export default router

================================================
File: back-end/routers/AuthRoute.js
================================================
import express from 'express';
import { AuthController } from '../controllers/AuthController.js';
import {verifyToken, verifyTokenAdmin} from "../controllers/middlewareController.js"

const router = express.Router();

router.post('/auth/register', AuthController.RegisterUser);

router.post('/auth/login', AuthController.LoginUser);

router.post('/auth/loginadmin', AuthController.LoginUserAdmin)

router.post('/auth/refreshtoken',AuthController.RefreshToken);

router.post('/auth/reactive',AuthController.ReActive);

router.get('/auth/active',AuthController.Active);

router.get('/auth/verifytoken',AuthController.verifyToken);

router.post('/auth/forgetpassword',AuthController.Forgotpassword);

router.post('/auth/checkusername',AuthController.checkUsername);

router.post('/auth/checkemail',AuthController.checkEmail);

export default router;

================================================
File: back-end/routers/CommentRoute.js
================================================
import express from 'express';
import {verifyToken} from "../controllers/middlewareController.js"
import {CommentController} from '../controllers/CommentController.js'
const router = express.Router();

router.post('/', verifyToken, CommentController.CreateComment);

router.get('/:url', CommentController.GetCommentsByUrl);

router.delete('/', verifyToken, CommentController.DeleteComment);

export default router;

================================================
File: back-end/routers/NovelRoute.js
================================================
import express from 'express';
import {verifyToken} from "../controllers/middlewareController.js"
import {NovelController} from '../controllers/NovelController.js';

const router = express.Router();

router.get('/novel/newupdate',NovelController.GetNewestChapter);

router.get('/novel-toprating',NovelController.GetNovelsTopRating);

router.get('/', NovelController.GetNovels);

router.get('/search', NovelController.SearchNovelByName);

router.get('/created', NovelController.GetNovelsByUserId);

router.get('/novel/:url', NovelController.GetNovelsByUrl);

router.get('/novel/:url/mucluc', NovelController.GetChapterByUrl);

router.get('/novel/:url/chuong/:chapNumber',NovelController.GetChapterByNumber)

router.post('/novel/reading/',NovelController.SetReading)

router.get('/readings',NovelController.GetReadings)

router.post('/novel/create',verifyToken,NovelController.CreateNovel)

router.post('/novel/chuong/create',verifyToken,NovelController.CreateChapter)

router.put('/novel/chuong/edit',verifyToken,NovelController.UpdateChapter)

router.delete('/novel/chuong',verifyToken,NovelController.DeleteChapter)

router.put('/novel/edit',verifyToken,NovelController.EditNovel)

router.delete('/novel',verifyToken,NovelController.DeleteNovelByUrl)

router.get('/readingsdefault',NovelController.GetReadingsDefault)

router.get('/updatechapters',NovelController.UpdateChapters)

router.post('/chuong/unlock',verifyToken,NovelController.UnlockChapter)

export default router;

================================================
File: back-end/routers/PaymentRoute.js
================================================
import express from 'express';
import { PaymentController } from '../controllers/PaymentController.js';
import {verifyToken} from "../controllers/middlewareController.js"
const router = express.Router();

router.post('/create-payment', PaymentController.createPayment);
router.post('/result-payment', PaymentController.ipn);

router.post('/create-vnp-payment',verifyToken, PaymentController.CreatePaymentVNPay);
router.get('/result-vnp-payment', PaymentController.VNPayIPN);

export default router;

================================================
File: back-end/routers/RatingRoute.js
================================================
import express from 'express';

import { RatingController } from '../controllers/RatingController.js';
import {verifyToken} from "../controllers/middlewareController.js"

const router = express.Router();

router.post('/', verifyToken, RatingController.CreateRating);

router.get('/:url', RatingController.GetRatingByUrl);

router.delete('/', verifyToken, RatingController.DeleteRating);

export default router;

================================================
File: back-end/routers/SavedRoute.js
================================================
import express from 'express';
import {verifyToken} from "../controllers/middlewareController.js"
import { SavedController } from '../controllers/SavedController.js';

const router = express.Router();

router.post("/",verifyToken,SavedController.createdSaved);

router.get("/",verifyToken,SavedController.getSavedsByUser);

router.get("/:url",verifyToken,SavedController.checkSavedByUser);

router.delete("/",verifyToken,SavedController.deleteSaved);

export default router

================================================
File: back-end/routers/StatisticRoute.js
================================================
import express from 'express';
import {verifyToken, verifyTokenAdmin} from "../controllers/middlewareController.js"
import { StatisticController } from '../controllers/StatisticController.js';

const router = express.Router();
router.get('/countChapters',verifyTokenAdmin,StatisticController.getCountChapters);

router.get('/countNovels',verifyTokenAdmin,StatisticController.getCountNovels);

router.get('/countAccounts',verifyTokenAdmin,StatisticController.getCountAccounts);

router.get('/get-bill-byuser',verifyToken,StatisticController.getListBillByUser);

router.get('/sumTotalRevenue',verifyTokenAdmin,StatisticController.getSumRevenue)

router.get('/bills/getTotalRevenueByDay',verifyTokenAdmin,StatisticController.GetTotalRevenueByDay)

router.get('/novels/getTotalCreateNovelByDay',verifyTokenAdmin,StatisticController.GetTotalCreateNovelByDay)

router.get('/user/getTotalNewUserByDay',verifyTokenAdmin,StatisticController.GetTotalNewUserByDay)
export default router

================================================
File: back-end/routers/TrafficRoute.js
================================================
import express from 'express';
import {verifyTokenAdmin} from "../controllers/middlewareController.js"
import { TrafficController } from '../controllers/TrafficController.js';

const router = express.Router();

router.post("/",TrafficController.updateTraffic);
router.get("/getAll",verifyTokenAdmin,TrafficController.getAllTraffic);

export default router

================================================
File: back-end/routers/UserRoute.js
================================================
import express from 'express';
import {verifyToken,verifyTokenAdmin} from "../controllers/middlewareController.js"
import {AuthController} from "../controllers/AuthController.js"
import { UserController } from '../controllers/UserController.js';

import {CloneChapter, CloneNovel} from '../services/cloneDB.js'
const router = express.Router();

router.get('/info', verifyToken, UserController.getInfo);

router.put('/info',verifyToken, UserController.updateUser);

router.put('/info/password',verifyToken, UserController.updatePassword);

router.get('/getusers',verifyTokenAdmin,AuthController.LoadUsers);

router.get('/chapter',CloneChapter)

router.post('/info-balance',UserController.getInfoWithBalance)



router.delete('/',verifyTokenAdmin,UserController.deleteAccount)

export default router;

================================================
File: back-end/routers/index.js
================================================
import AuthRoute from './AuthRoute.js'
import UserRoute from './UserRoute.js';
import NovelRoute from './NovelRoute.js'
import CommentRoute from './CommentRoute.js'
import AdminRoute from './AdminRoute.js'
import SavedRoute from './SavedRoute.js'
import PaymentRoute from './PaymentRoute.js'
import StatisticRoute from './StatisticRoute.js'
import RatingRoute from './RatingRoute.js'
import TrafficRoute from './TrafficRoute.js'
export {AuthRoute,UserRoute,NovelRoute,CommentRoute,AdminRoute,SavedRoute,PaymentRoute,StatisticRoute, RatingRoute,TrafficRoute}



================================================
File: back-end/services/EmailService.js
================================================

import nodemailer from 'nodemailer';
import { google } from 'googleapis';
const OAuth2 = google.auth.OAuth2;

export const createTransporter = async () => {
        const oauth2Client = new OAuth2(
            process.env.clientId,
            process.env.clientSecret,
            "https://developers.google.com/oauthplayground"
        );

        oauth2Client.setCredentials({
            refresh_token: process.env.refreshToken
        });
        

        const accessToken = await new Promise((resolve, reject) => {
            oauth2Client.getAccessToken((err, token) => {
                if (err) {
                    reject();
                }
                
                resolve(token);
            });
        });


        var transporter = nodemailer.createTransport({ // config mail server
            service: 'gmail',
            host: "smtp.gmail.com",
  port: 465,
  secure: true,
            auth: {
                type: 'OAuth2',
                user: 'server10.noreply@gmail.com',
                clientId: process.env.clientId,
                clientSecret: process.env.clientSecret,
                refreshToken: process.env.refreshToken,
                accessToken:accessToken
            }
        });
        return transporter

}

export const sendMail = async (to, subject, active) => {
    var emailOptions = { // thiết lập đối tượng, nội dung gửi mail
        from: 'Thích truyện chữ',
        to: to,
        subject: subject,
        text: active,
        //html: '<p>You have got a new message</b><ul><li>Username:' + req.body.name + '</li><li>Email:' + req.body.email + '</li><li>Username:' + req.body.message + '</li></ul>'
    }
    
    let emailTransporter = await createTransporter()
    return emailTransporter.sendMail(emailOptions)
    

}

================================================
File: back-end/services/ResponseJSON.js
================================================
export const ResponseData = (status,data)=>{
    return {
        status,
        data
    }
}

export const ResponseDetail = (status,details)=>{
    return {
        status,
        details
    }
}

================================================
File: back-end/services/cloneDB.js
================================================
import fetch from 'node-fetch'
import { Novel } from '../models/Novel.js'
import { User } from '../models/User.js'
import mongoose from 'mongoose'
import { Chapter } from '../models/Chapter.js'
export const CloneNovel = async (req, res) => {
    try {
        
        fetch("https://novelbe.herokuapp.com/api/novels/?page=0&size=10&sort=tentruyen&status=None")
            .then(response => {
                return response.json()
            })
            .then(async(json) => {
                const data = json
                console.log(typeof data)
                const admin = await User.findOne({ email: "tranbaoduy4@gmail.com" })
                let i = 0
                data.map(async (item) => {
                    console.log(item)
                    const novel = new Novel({
                        ...item,
                        nguoidangtruyen: admin.id
                    })
                    console.log(i++)
                    await novel.save()
                })

                res.status(200).json("Thanh cong")
            })
            .catch(err => {
                console.log(err)
            })

    } catch (error) {
        console.log(error)
    }
}

export const CloneChapter = async (req, res) => {
    try {
        fetch("http://localhost:8080/api/novels/novel/chuong")
            .then(response => {
                return response.json()
            })
            .then(async(json) => {
                const data = json
                const novel1=new mongoose.Types.ObjectId("622015a45d8076656b3a3eb6")
                const novel2=new mongoose.Types.ObjectId("62201a7cb598d336f362dd4f")
                const novel3=new mongoose.Types.ObjectId("6220156381ed8e2841dbd810")
                const novel4=new mongoose.Types.ObjectId("62200f8ec8f4590191ba0061")
                const novel5=new mongoose.Types.ObjectId("62201a54b3fead562622156c")
                console.log(novel1.getTimestamp().getTime()/1000)
                const ids =[
                    {
                        n:novel1,
                        key:"6228847524448ca87d2a5fa2"
                    },
                    {
                    n:novel2,
                    key:"6228847524448ca87d2a5fa1"},
                    {
                    n:novel3,
                    key:"6228847524448ca87d2a5fa5"},
                    {
                    n:novel4,
                    key:"6228847524448ca87d2a5fa3"},
                    {
                    n:novel5,
                    key:"6228847524448ca87d2a5fa4"}
                ]
                let i=0

                
                data.forEach(async (item) => {

                    const {dautruyenId}=item
                    let key=""
                    ids.forEach((novel)=>{
                        if(novel.n.getTimestamp().getTime()/1000===dautruyenId.timestamp){
                            key = novel.key
                        }
                    })
                    const id = new mongoose.Types.ObjectId(key)
                     const chapter = new Chapter({
                        ...item,
                        dautruyenId:id
                    })
                   await chapter.save()
                })

                res.status(200).json("Thanh cong")
            })
            .catch(err => {
                console.log(err)
            })

    } catch (error) {
        console.log(error)
    }
}

